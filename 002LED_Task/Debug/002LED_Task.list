
002LED_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee0  08004ee0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee0  08004ee0  00014ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee8  08004ee8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001980c  2000001c  08004f0c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019828  08004f0c  00029828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011054  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a76  00000000  00000000  000310e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1a  00000000  00000000  00034c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001895a  00000000  00000000  00035982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e2d  00000000  00000000  0004e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099545  00000000  00000000  00061109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004714  00000000  00000000  000fa650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  000fed64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004df8 	.word	0x08004df8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08004df8 	.word	0x08004df8

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001925c 	.word	0x2001925c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb6b 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f85f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8c7 	bl	8000710 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000582:	4826      	ldr	r0, [pc, #152]	; (800061c <main+0xac>)
 8000584:	f003 f824 	bl	80035d0 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0xb0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <main+0xb0>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6013      	str	r3, [r2, #0]
  status = xTaskCreate( led_green_handler,
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2302      	movs	r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	22c8      	movs	r2, #200	; 0xc8
 80005a2:	4920      	ldr	r1, [pc, #128]	; (8000624 <main+0xb4>)
 80005a4:	4820      	ldr	r0, [pc, #128]	; (8000628 <main+0xb8>)
 80005a6:	f001 fe04 	bl	80021b2 <xTaskCreate>
 80005aa:	6178      	str	r0, [r7, #20]
                        200,
                        NULL,
                        2,
						&task1_handle
                        );
  configASSERT(status == pdPASS);
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d00a      	beq.n	80005c8 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b6:	f383 8811 	msr	BASEPRI, r3
 80005ba:	f3bf 8f6f 	isb	sy
 80005be:	f3bf 8f4f 	dsb	sy
 80005c2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c4:	bf00      	nop
 80005c6:	e7fe      	b.n	80005c6 <main+0x56>
  status = xTaskCreate( led_red_handler,
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	4915      	ldr	r1, [pc, #84]	; (800062c <main+0xbc>)
 80005d6:	4816      	ldr	r0, [pc, #88]	; (8000630 <main+0xc0>)
 80005d8:	f001 fdeb 	bl	80021b2 <xTaskCreate>
 80005dc:	6178      	str	r0, [r7, #20]
                        200,
						NULL,
                        2,
  						&task2_handle
                        );
  configASSERT(status = pdPASS);
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]

  status = xTaskCreate( led_orange_handler,
 80005e2:	463b      	mov	r3, r7
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2302      	movs	r3, #2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	22c8      	movs	r2, #200	; 0xc8
 80005ee:	4911      	ldr	r1, [pc, #68]	; (8000634 <main+0xc4>)
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <main+0xc8>)
 80005f2:	f001 fdde 	bl	80021b2 <xTaskCreate>
 80005f6:	6178      	str	r0, [r7, #20]
                        200,
						NULL,
                        2,
  						&task3_handle
                        );
  configASSERT(status == pdPASS);
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00a      	beq.n	8000614 <main+0xa4>
        __asm volatile
 80005fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	f3bf 8f6f 	isb	sy
 800060a:	f3bf 8f4f 	dsb	sy
 800060e:	60fb      	str	r3, [r7, #12]
    }
 8000610:	bf00      	nop
 8000612:	e7fe      	b.n	8000612 <main+0xa2>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000614:	f001 ff30 	bl	8002478 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0xa8>
 800061a:	bf00      	nop
 800061c:	0007a120 	.word	0x0007a120
 8000620:	e0001000 	.word	0xe0001000
 8000624:	08004e10 	.word	0x08004e10
 8000628:	080009cd 	.word	0x080009cd
 800062c:	08004e20 	.word	0x08004e20
 8000630:	080009ed 	.word	0x080009ed
 8000634:	08004e30 	.word	0x08004e30
 8000638:	08000a0d 	.word	0x08000a0d

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f004 fb9a 	bl	8004d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006b0:	2354      	movs	r3, #84	; 0x54
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fdc5 	bl	8001250 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f9c0 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f826 	bl	8001740 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f9a9 	bl	8000a50 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
 800072a:	4ba2      	ldr	r3, [pc, #648]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4aa1      	ldr	r2, [pc, #644]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b9f      	ldr	r3, [pc, #636]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	4b9b      	ldr	r3, [pc, #620]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a9a      	ldr	r2, [pc, #616]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b98      	ldr	r3, [pc, #608]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b94      	ldr	r3, [pc, #592]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a93      	ldr	r2, [pc, #588]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b91      	ldr	r3, [pc, #580]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b8d      	ldr	r3, [pc, #564]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a8c      	ldr	r2, [pc, #560]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b8a      	ldr	r3, [pc, #552]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	4b86      	ldr	r3, [pc, #536]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a85      	ldr	r2, [pc, #532]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b83      	ldr	r3, [pc, #524]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a7e      	ldr	r2, [pc, #504]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b7c      	ldr	r3, [pc, #496]	; (80009b4 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	4879      	ldr	r0, [pc, #484]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007d4:	f000 fd08 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	4877      	ldr	r0, [pc, #476]	; (80009bc <MX_GPIO_Init+0x2ac>)
 80007de:	f000 fd03 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e2:	2200      	movs	r2, #0
 80007e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007e8:	4875      	ldr	r0, [pc, #468]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80007ea:	f000 fcfd 	bl	80011e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ee:	2304      	movs	r3, #4
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	486d      	ldr	r0, [pc, #436]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000802:	f000 fb6d 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000806:	2308      	movs	r3, #8
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4866      	ldr	r0, [pc, #408]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800081e:	f000 fb5f 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000822:	2332      	movs	r3, #50	; 0x32
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000826:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4860      	ldr	r0, [pc, #384]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000838:	f000 fb52 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083c:	2301      	movs	r3, #1
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	485a      	ldr	r0, [pc, #360]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000854:	f000 fb44 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000858:	2308      	movs	r3, #8
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000868:	2305      	movs	r3, #5
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4852      	ldr	r0, [pc, #328]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000874:	f000 fb34 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800087c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	484d      	ldr	r0, [pc, #308]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800088e:	f000 fb27 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000892:	2310      	movs	r3, #16
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a2:	2306      	movs	r3, #6
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4845      	ldr	r0, [pc, #276]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80008ae:	f000 fb17 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008b2:	23e0      	movs	r3, #224	; 0xe0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	483d      	ldr	r0, [pc, #244]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80008ce:	f000 fb07 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4836      	ldr	r0, [pc, #216]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 80008f0:	f000 faf6 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	482c      	ldr	r0, [pc, #176]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 800090e:	f000 fae7 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000912:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000924:	2306      	movs	r3, #6
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4823      	ldr	r0, [pc, #140]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000930:	f000 fad6 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	481e      	ldr	r0, [pc, #120]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800094a:	f000 fac9 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800094e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000960:	230a      	movs	r3, #10
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4816      	ldr	r0, [pc, #88]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800096c:	f000 fab8 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 8000984:	f000 faac 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000988:	f44f 7310 	mov.w	r3, #576	; 0x240
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099a:	2304      	movs	r3, #4
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 80009a6:	f000 fa9b 	bl	8000ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400

080009cc <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters ){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while(1){

		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <led_green_handler+0x1c>)
 80009da:	f000 fc1e 	bl	800121a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f000 f977 	bl	8000cd4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009e6:	e7f5      	b.n	80009d4 <led_green_handler+0x8>
 80009e8:	40020c00 	.word	0x40020c00

080009ec <led_red_handler>:
		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		//taskYIELD();
	}
}
static void led_red_handler(void* parameters ){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while(1){

		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80009f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <led_red_handler+0x1c>)
 80009fa:	f000 fc0e 	bl	800121a <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80009fe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a02:	f000 f967 	bl	8000cd4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a06:	e7f5      	b.n	80009f4 <led_red_handler+0x8>
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <led_orange_handler>:

		//SEGGER_SYSVIEW_PrintfTarget(msg);

	}
}
static void led_orange_handler(void* parameters ){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	//char msg[100];
	while(1){

		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <led_orange_handler+0x1c>)
 8000a1a:	f000 fbfe 	bl	800121a <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a1e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a22:	f000 f957 	bl	8000cd4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a26:	e7f5      	b.n	8000a14 <led_orange_handler+0x8>
 8000a28:	40020c00 	.word	0x40020c00

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 f929 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010000 	.word	0x40010000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
   vInitPrioGroupValue();
 8000a9e:	f002 f8fb 	bl	8002c98 <vInitPrioGroupValue>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_InitTick+0xd4>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <HAL_InitTick+0xd4>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad0:	4b2c      	ldr	r3, [pc, #176]	; (8000b84 <HAL_InitTick+0xd4>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 020c 	add.w	r2, r7, #12
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f836 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000aec:	f001 f820 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8000af0:	4603      	mov	r3, r0
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	4a23      	ldr	r2, [pc, #140]	; (8000b88 <HAL_InitTick+0xd8>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	0c9b      	lsrs	r3, r3, #18
 8000b00:	3b01      	subs	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b06:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <HAL_InitTick+0xe0>)
 8000b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b12:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b2a:	4818      	ldr	r0, [pc, #96]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b2c:	f001 f846 	bl	8001bbc <HAL_TIM_Base_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d11b      	bne.n	8000b76 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <HAL_InitTick+0xdc>)
 8000b40:	f001 f896 	bl	8001c70 <HAL_TIM_Base_Start_IT>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d111      	bne.n	8000b76 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b52:	2019      	movs	r0, #25
 8000b54:	f000 f9b6 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d808      	bhi.n	8000b70 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 f992 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_InitTick+0xe4>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e002      	b.n	8000b76 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	20000038 	.word	0x20000038
 8000b90:	40010000 	.word	0x40010000
 8000b94:	20000004 	.word	0x20000004

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bca:	f001 f8b3 	bl	8001d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000038 	.word	0x20000038

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f004 f8b3 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc9f 	bl	8000570 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c40:	08004ef0 	.word	0x08004ef0
  ldr r2, =_sbss
 8000c44:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c48:	20019828 	.word	0x20019828

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8fc 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff16 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff feec 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000080 	.word	0x20000080

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000080 	.word	0x20000080

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e159      	b.n	80011b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8148 	bne.w	80011aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80a2 	beq.w	80011aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a56      	ldr	r2, [pc, #344]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x2ec>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a49      	ldr	r2, [pc, #292]	; (80011d0 <HAL_GPIO_Init+0x2f0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x202>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_GPIO_Init+0x2f4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x1fe>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a47      	ldr	r2, [pc, #284]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x1fa>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_GPIO_Init+0x2fc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x1f6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a45      	ldr	r2, [pc, #276]	; (80011e0 <HAL_GPIO_Init+0x300>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x1f2>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f4:	4935      	ldr	r1, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x2ec>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001150:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117a:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f aea2 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	041a      	lsls	r2, r3, #16
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	43d9      	mvns	r1, r3
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	400b      	ands	r3, r1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e267      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b04      	cmp	r3, #4
 8001278:	d00c      	beq.n	8001294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b85      	ldr	r3, [pc, #532]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d112      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4b82      	ldr	r3, [pc, #520]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001292:	d10b      	bne.n	80012ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	4b7e      	ldr	r3, [pc, #504]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d05b      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d157      	bne.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e242      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x74>
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a75      	ldr	r2, [pc, #468]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e01d      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b70      	ldr	r3, [pc, #448]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6f      	ldr	r2, [pc, #444]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a6c      	ldr	r2, [pc, #432]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xb0>
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcd8 	bl	8000cbc <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcd4 	bl	8000cbc <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e207      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b5b      	ldr	r3, [pc, #364]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0xc0>
 800132e:	e014      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fcc4 	bl	8000cbc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fcc0 	bl	8000cbc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1f3      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d063      	beq.n	800142e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137a:	2b08      	cmp	r3, #8
 800137c:	d11c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1c7      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4937      	ldr	r1, [pc, #220]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	e03a      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fc79 	bl	8000cbc <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fc75 	bl	8000cbc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1a8      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4925      	ldr	r1, [pc, #148]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_RCC_OscConfig+0x244>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fc58 	bl	8000cbc <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc54 	bl	8000cbc <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e187      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d036      	beq.n	80014a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d016      	beq.n	8001470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fc38 	bl	8000cbc <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fc34 	bl	8000cbc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e167      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x240>)
 8001464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x200>
 800146e:	e01b      	b.n	80014a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x248>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc21 	bl	8000cbc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	e00e      	b.n	800149c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fc1d 	bl	8000cbc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d907      	bls.n	800149c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e150      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 8001490:	40023800 	.word	0x40023800
 8001494:	42470000 	.word	0x42470000
 8001498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b88      	ldr	r3, [pc, #544]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ea      	bne.n	800147e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 8097 	beq.w	80015e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b81      	ldr	r3, [pc, #516]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b7d      	ldr	r3, [pc, #500]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a7c      	ldr	r2, [pc, #496]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b7a      	ldr	r3, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b77      	ldr	r3, [pc, #476]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a73      	ldr	r2, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbdd 	bl	8000cbc <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff fbd9 	bl	8000cbc <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e10c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b6a      	ldr	r3, [pc, #424]	; (80016c4 <HAL_RCC_OscConfig+0x474>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x2ea>
 800152c:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	; 0x70
 8001538:	e01c      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x30c>
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a5b      	ldr	r2, [pc, #364]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0x324>
 800155c:	4b58      	ldr	r3, [pc, #352]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a57      	ldr	r2, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	4b55      	ldr	r3, [pc, #340]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800156e:	f023 0304 	bic.w	r3, r3, #4
 8001572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d015      	beq.n	80015a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fb9e 	bl	8000cbc <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	e00a      	b.n	800159a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fb9a 	bl	8000cbc <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e0cb      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ee      	beq.n	8001584 <HAL_RCC_OscConfig+0x334>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a8:	f7ff fb88 	bl	8000cbc <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7ff fb84 	bl	8000cbc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e0b5      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ee      	bne.n	80015b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a1 	beq.w	8001730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d05c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d141      	bne.n	8001686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb58 	bl	8000cbc <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fb54 	bl	8000cbc <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e087      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	3b01      	subs	r3, #1
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fb2d 	bl	8000cbc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fb29 	bl	8000cbc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e05c      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x416>
 8001684:	e054      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb16 	bl	8000cbc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fb12 	bl	8000cbc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e045      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
 80016b2:	e03d      	b.n	8001730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e038      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x4ec>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d028      	beq.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d121      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d11a      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	3b01      	subs	r3, #1
 8001716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cc      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b68      	ldr	r3, [pc, #416]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d90c      	bls.n	800177c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d020      	beq.n	80017ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	494d      	ldr	r1, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d044      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d107      	bne.n	80017ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d119      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e07f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e067      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4934      	ldr	r1, [pc, #208]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff fa44 	bl	8000cbc <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff fa40 	bl	8000cbc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e04f      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20c      	bcs.n	8001888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e032      	b.n	80018ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4916      	ldr	r1, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d009      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	490e      	ldr	r1, [pc, #56]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c6:	f000 f821 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	490a      	ldr	r1, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	5ccb      	ldrb	r3, [r1, r3]
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a09      	ldr	r2, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f8e2 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00
 80018fc:	40023800 	.word	0x40023800
 8001900:	08004eb8 	.word	0x08004eb8
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001910:	b094      	sub	sp, #80	; 0x50
 8001912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191c:	2300      	movs	r3, #0
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001924:	4b79      	ldr	r3, [pc, #484]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d00d      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x40>
 8001930:	2b08      	cmp	r3, #8
 8001932:	f200 80e1 	bhi.w	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 800193a:	2b04      	cmp	r3, #4
 800193c:	d003      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x3a>
 800193e:	e0db      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001940:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001942:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001944:	e0db      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001946:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194a:	e0d8      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001954:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001956:	4b6d      	ldr	r3, [pc, #436]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	2200      	movs	r2, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
 800196c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
 800197a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	0159      	lsls	r1, r3, #5
 800198c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001990:	0150      	lsls	r0, r2, #5
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4621      	mov	r1, r4
 8001998:	1a51      	subs	r1, r2, r1
 800199a:	6139      	str	r1, [r7, #16]
 800199c:	4629      	mov	r1, r5
 800199e:	eb63 0301 	sbc.w	r3, r3, r1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b0:	4659      	mov	r1, fp
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	4651      	mov	r1, sl
 80019b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ba:	4651      	mov	r1, sl
 80019bc:	018a      	lsls	r2, r1, #6
 80019be:	4651      	mov	r1, sl
 80019c0:	ebb2 0801 	subs.w	r8, r2, r1
 80019c4:	4659      	mov	r1, fp
 80019c6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019de:	4690      	mov	r8, r2
 80019e0:	4699      	mov	r9, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	eb18 0303 	adds.w	r3, r8, r3
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	462b      	mov	r3, r5
 80019ec:	eb49 0303 	adc.w	r3, r9, r3
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fe:	4629      	mov	r1, r5
 8001a00:	024b      	lsls	r3, r1, #9
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a08:	4621      	mov	r1, r4
 8001a0a:	024a      	lsls	r2, r1, #9
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a12:	2200      	movs	r2, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a1c:	f7fe fc2a 	bl	8000274 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	e058      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	099b      	lsrs	r3, r3, #6
 8001a30:	2200      	movs	r2, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	4611      	mov	r1, r2
 8001a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a44:	4642      	mov	r2, r8
 8001a46:	464b      	mov	r3, r9
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	0159      	lsls	r1, r3, #5
 8001a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a56:	0150      	lsls	r0, r2, #5
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a62:	4649      	mov	r1, r9
 8001a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a80:	eb63 050b 	sbc.w	r5, r3, fp
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	00eb      	lsls	r3, r5, #3
 8001a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a92:	00e2      	lsls	r2, r4, #3
 8001a94:	4614      	mov	r4, r2
 8001a96:	461d      	mov	r5, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	18e3      	adds	r3, r4, r3
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	eb45 0303 	adc.w	r3, r5, r3
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	028b      	lsls	r3, r1, #10
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001abc:	4621      	mov	r1, r4
 8001abe:	028a      	lsls	r2, r1, #10
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad0:	f7fe fbd0 	bl	8000274 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af6:	e002      	b.n	8001afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3750      	adds	r7, #80	; 0x50
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0b5b      	lsrs	r3, r3, #13
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08004ec8 	.word	0x08004ec8

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f839 	bl	8001c5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f9ca 	bl	8001f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d001      	beq.n	8001c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e044      	b.n	8001d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	; (8001d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d018      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb2:	d013      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00e      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d004      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x6c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d111      	bne.n	8001d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d010      	beq.n	8001d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	e007      	b.n	8001d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	40000c00 	.word	0x40000c00
 8001d30:	40014000 	.word	0x40014000

08001d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0202 	mvn.w	r2, #2
 8001d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8ee 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8e0 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8f1 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0204 	mvn.w	r2, #4
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8c4 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8b6 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8c7 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0208 	mvn.w	r2, #8
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f89a 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f88c 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f89d 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d122      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d11b      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0210 	mvn.w	r2, #16
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2208      	movs	r2, #8
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f870 	bl	8001f58 <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f862 	bl	8001f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f873 	bl	8001f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10e      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0201 	mvn.w	r2, #1
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fdba 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b80      	cmp	r3, #128	; 0x80
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	2b80      	cmp	r3, #128	; 0x80
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8e2 	bl	80020a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f838 	bl	8001f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0220 	mvn.w	r2, #32
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8ac 	bl	8002094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a34      	ldr	r2, [pc, #208]	; (8002078 <TIM_Base_SetConfig+0xe4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00f      	beq.n	8001fcc <TIM_Base_SetConfig+0x38>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d00b      	beq.n	8001fcc <TIM_Base_SetConfig+0x38>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a31      	ldr	r2, [pc, #196]	; (800207c <TIM_Base_SetConfig+0xe8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <TIM_Base_SetConfig+0x38>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a30      	ldr	r2, [pc, #192]	; (8002080 <TIM_Base_SetConfig+0xec>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0x38>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <TIM_Base_SetConfig+0xf0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d108      	bne.n	8001fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <TIM_Base_SetConfig+0xe4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01b      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d017      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <TIM_Base_SetConfig+0xe8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <TIM_Base_SetConfig+0xec>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00f      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a20      	ldr	r2, [pc, #128]	; (8002084 <TIM_Base_SetConfig+0xf0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00b      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <TIM_Base_SetConfig+0xf4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <TIM_Base_SetConfig+0xf8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0x8a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <TIM_Base_SetConfig+0xfc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <TIM_Base_SetConfig+0xe4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d103      	bne.n	8002064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	615a      	str	r2, [r3, #20]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40010000 	.word	0x40010000
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800
 8002084:	40000c00 	.word	0x40000c00
 8002088:	40014000 	.word	0x40014000
 800208c:	40014400 	.word	0x40014400
 8002090:	40014800 	.word	0x40014800

08002094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f103 0208 	add.w	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 0208 	add.w	r2, r3, #8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 0208 	add.w	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6852      	ldr	r2, [r2, #4]
 800217e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d103      	bne.n	8002192 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b08c      	sub	sp, #48	; 0x30
 80021b6:	af04      	add	r7, sp, #16
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fed0 	bl	8002f6c <pvPortMalloc>
 80021cc:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00e      	beq.n	80021f2 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021d4:	2058      	movs	r0, #88	; 0x58
 80021d6:	f000 fec9 	bl	8002f6c <pvPortMalloc>
 80021da:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
 80021e8:	e005      	b.n	80021f6 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f000 ff9e 	bl	800312c <vPortFree>
 80021f0:	e001      	b.n	80021f6 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	2300      	movs	r3, #0
 8002200:	9303      	str	r3, [sp, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f80e 	bl	8002234 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002218:	69f8      	ldr	r0, [r7, #28]
 800221a:	f000 f8a1 	bl	8002360 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	e002      	b.n	800222a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800222a:	69bb      	ldr	r3, [r7, #24]
    }
 800222c:	4618      	mov	r0, r3
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	21a5      	movs	r1, #165	; 0xa5
 800224e:	f002 fd99 	bl	8004d84 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800225c:	3b01      	subs	r3, #1
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f023 0307 	bic.w	r3, r3, #7
 800226a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	617b      	str	r3, [r7, #20]
    }
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01f      	beq.n	80022d2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e012      	b.n	80022be <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	7819      	ldrb	r1, [r3, #0]
 80022a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	3334      	adds	r3, #52	; 0x34
 80022a8:	460a      	mov	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	d9e9      	bls.n	8002298 <prvInitialiseNewTask+0x64>
 80022c4:	e000      	b.n	80022c8 <prvInitialiseNewTask+0x94>
            {
                break;
 80022c6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022d0:	e003      	b.n	80022da <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d901      	bls.n	80022e4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022e0:	2304      	movs	r3, #4
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ee:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	2200      	movs	r2, #0
 80022f4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	3304      	adds	r3, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fefe 	bl	80020fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	3318      	adds	r3, #24
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fef9 	bl	80020fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800230e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	f1c3 0205 	rsb	r2, r3, #5
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	3350      	adds	r3, #80	; 0x50
 8002324:	2204      	movs	r2, #4
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fd2b 	bl	8004d84 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	3354      	adds	r3, #84	; 0x54
 8002332:	2201      	movs	r2, #1
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fd24 	bl	8004d84 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	69b8      	ldr	r0, [r7, #24]
 8002342:	f000 fb7b 	bl	8002a3c <pxPortInitialiseStack>
 8002346:	4602      	mov	r2, r0
 8002348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002356:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002360:	b5b0      	push	{r4, r5, r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af02      	add	r7, sp, #8
 8002366:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002368:	f000 fd14 	bl	8002d94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800236c:	4b3b      	ldr	r3, [pc, #236]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 8002374:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800237e:	4a38      	ldr	r2, [pc, #224]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <prvAddNewTaskToReadyList+0xfc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d110      	bne.n	80023ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800238c:	f000 fabc 	bl	8002908 <prvInitialiseTaskLists>
 8002390:	e00d      	b.n	80023ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <prvAddNewTaskToReadyList+0x104>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800239a:	4b31      	ldr	r3, [pc, #196]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d802      	bhi.n	80023ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023a8:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ae:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <prvAddNewTaskToReadyList+0x108>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <prvAddNewTaskToReadyList+0x94>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 fa9f 	bl	800490c <SEGGER_SYSVIEW_OnTaskCreate>
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	461d      	mov	r5, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461c      	mov	r4, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	1ae3      	subs	r3, r4, r3
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	462b      	mov	r3, r5
 80023f0:	f000 ffba 	bl	8003368 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fb0c 	bl	8004a14 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <prvAddNewTaskToReadyList+0x10c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <prvAddNewTaskToReadyList+0x10c>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <prvAddNewTaskToReadyList+0x110>)
 800241c:	441a      	add	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f7ff fe76 	bl	8002116 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800242a:	f000 fce3 	bl	8002df4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <prvAddNewTaskToReadyList+0x104>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00e      	beq.n	8002454 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <prvAddNewTaskToReadyList+0x100>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	429a      	cmp	r2, r3
 8002442:	d207      	bcs.n	8002454 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <prvAddNewTaskToReadyList+0x114>)
 8002446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bdb0      	pop	{r4, r5, r7, pc}
 800245c:	2000015c 	.word	0x2000015c
 8002460:	20000084 	.word	0x20000084
 8002464:	20000168 	.word	0x20000168
 8002468:	20000178 	.word	0x20000178
 800246c:	20000164 	.word	0x20000164
 8002470:	20000088 	.word	0x20000088
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <vTaskStartScheduler+0x98>)
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	2300      	movs	r3, #0
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	2282      	movs	r2, #130	; 0x82
 800248a:	4922      	ldr	r1, [pc, #136]	; (8002514 <vTaskStartScheduler+0x9c>)
 800248c:	4822      	ldr	r0, [pc, #136]	; (8002518 <vTaskStartScheduler+0xa0>)
 800248e:	f7ff fe90 	bl	80021b2 <xTaskCreate>
 8002492:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d124      	bne.n	80024e4 <vTaskStartScheduler+0x6c>
        __asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	60bb      	str	r3, [r7, #8]
    }
 80024ac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <vTaskStartScheduler+0xa4>)
 80024b0:	f04f 32ff 	mov.w	r2, #4294967295
 80024b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <vTaskStartScheduler+0xa8>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <vTaskStartScheduler+0xac>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024c2:	4b19      	ldr	r3, [pc, #100]	; (8002528 <vTaskStartScheduler+0xb0>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <vTaskStartScheduler+0x98>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d102      	bne.n	80024d4 <vTaskStartScheduler+0x5c>
 80024ce:	f002 fa01 	bl	80048d4 <SEGGER_SYSVIEW_OnIdle>
 80024d2:	e004      	b.n	80024de <vTaskStartScheduler+0x66>
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <vTaskStartScheduler+0xb0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fa59 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80024de:	f000 fb39 	bl	8002b54 <xPortStartScheduler>
 80024e2:	e00e      	b.n	8002502 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d10a      	bne.n	8002502 <vTaskStartScheduler+0x8a>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	607b      	str	r3, [r7, #4]
    }
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <vTaskStartScheduler+0xb4>)
 8002504:	681b      	ldr	r3, [r3, #0]
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000180 	.word	0x20000180
 8002514:	08004e40 	.word	0x08004e40
 8002518:	080028d9 	.word	0x080028d9
 800251c:	2000017c 	.word	0x2000017c
 8002520:	20000168 	.word	0x20000168
 8002524:	20000160 	.word	0x20000160
 8002528:	20000084 	.word	0x20000084
 800252c:	2000000c 	.word	0x2000000c

08002530 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <vTaskSuspendAll+0x18>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a03      	ldr	r2, [pc, #12]	; (8002548 <vTaskSuspendAll+0x18>)
 800253c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	20000184 	.word	0x20000184

0800254c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <xTaskResumeAll+0x11c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10a      	bne.n	8002578 <xTaskResumeAll+0x2c>
        __asm volatile
 8002562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	f3bf 8f6f 	isb	sy
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	603b      	str	r3, [r7, #0]
    }
 8002574:	bf00      	nop
 8002576:	e7fe      	b.n	8002576 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002578:	f000 fc0c 	bl	8002d94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <xTaskResumeAll+0x11c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	4a39      	ldr	r2, [pc, #228]	; (8002668 <xTaskResumeAll+0x11c>)
 8002584:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <xTaskResumeAll+0x11c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d165      	bne.n	800265a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <xTaskResumeAll+0x120>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d061      	beq.n	800265a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002596:	e032      	b.n	80025fe <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002598:	4b35      	ldr	r3, [pc, #212]	; (8002670 <xTaskResumeAll+0x124>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3318      	adds	r3, #24
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fdda 	bl	800215e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fdd5 	bl	800215e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fa2c 	bl	8004a14 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	2201      	movs	r2, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <xTaskResumeAll+0x128>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <xTaskResumeAll+0x128>)
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4a27      	ldr	r2, [pc, #156]	; (8002678 <xTaskResumeAll+0x12c>)
 80025dc:	441a      	add	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3304      	adds	r3, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f7ff fd96 	bl	8002116 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <xTaskResumeAll+0x130>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d302      	bcc.n	80025fe <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <xTaskResumeAll+0x134>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <xTaskResumeAll+0x124>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1c8      	bne.n	8002598 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800260c:	f000 f9fa 	bl	8002a04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002610:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <xTaskResumeAll+0x138>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800261c:	f000 f836 	bl	800268c <xTaskIncrementTick>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <xTaskResumeAll+0x134>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f1      	bne.n	800261c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <xTaskResumeAll+0x138>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <xTaskResumeAll+0x134>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002646:	2301      	movs	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <xTaskResumeAll+0x13c>)
 800264c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800265a:	f000 fbcb 	bl	8002df4 <vPortExitCritical>

    return xAlreadyYielded;
 800265e:	68bb      	ldr	r3, [r7, #8]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000184 	.word	0x20000184
 800266c:	2000015c 	.word	0x2000015c
 8002670:	2000011c 	.word	0x2000011c
 8002674:	20000164 	.word	0x20000164
 8002678:	20000088 	.word	0x20000088
 800267c:	20000084 	.word	0x20000084
 8002680:	20000170 	.word	0x20000170
 8002684:	2000016c 	.word	0x2000016c
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002696:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <xTaskIncrementTick+0x14c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 8092 	bne.w	80027c4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026a0:	4b4e      	ldr	r3, [pc, #312]	; (80027dc <xTaskIncrementTick+0x150>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <xTaskIncrementTick+0x150>)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d120      	bne.n	80026f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026b4:	4b4a      	ldr	r3, [pc, #296]	; (80027e0 <xTaskIncrementTick+0x154>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	603b      	str	r3, [r7, #0]
    }
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <xTaskIncrementTick+0x46>
 80026d4:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <xTaskIncrementTick+0x154>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b42      	ldr	r3, [pc, #264]	; (80027e4 <xTaskIncrementTick+0x158>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a40      	ldr	r2, [pc, #256]	; (80027e0 <xTaskIncrementTick+0x154>)
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <xTaskIncrementTick+0x158>)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <xTaskIncrementTick+0x15c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <xTaskIncrementTick+0x15c>)
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	f000 f987 	bl	8002a04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <xTaskIncrementTick+0x160>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d34c      	bcc.n	800279a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002700:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <xTaskIncrementTick+0x154>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d104      	bne.n	8002714 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <xTaskIncrementTick+0x160>)
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	601a      	str	r2, [r3, #0]
                    break;
 8002712:	e042      	b.n	800279a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <xTaskIncrementTick+0x154>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d203      	bcs.n	8002734 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800272c:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <xTaskIncrementTick+0x160>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002732:	e032      	b.n	800279a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	3304      	adds	r3, #4
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fd10 	bl	800215e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d004      	beq.n	8002750 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3318      	adds	r3, #24
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fd07 	bl	800215e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 f95e 	bl	8004a14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <xTaskIncrementTick+0x164>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <xTaskIncrementTick+0x164>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4a1f      	ldr	r2, [pc, #124]	; (80027f4 <xTaskIncrementTick+0x168>)
 8002778:	441a      	add	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3304      	adds	r3, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7ff fcc8 	bl	8002116 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <xTaskIncrementTick+0x16c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	429a      	cmp	r2, r3
 8002792:	d3b5      	bcc.n	8002700 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002798:	e7b2      	b.n	8002700 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <xTaskIncrementTick+0x16c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	4914      	ldr	r1, [pc, #80]	; (80027f4 <xTaskIncrementTick+0x168>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d901      	bls.n	80027b6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <xTaskIncrementTick+0x170>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e004      	b.n	80027ce <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <xTaskIncrementTick+0x174>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <xTaskIncrementTick+0x174>)
 80027cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80027ce:	697b      	ldr	r3, [r7, #20]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000184 	.word	0x20000184
 80027dc:	20000160 	.word	0x20000160
 80027e0:	20000114 	.word	0x20000114
 80027e4:	20000118 	.word	0x20000118
 80027e8:	20000174 	.word	0x20000174
 80027ec:	2000017c 	.word	0x2000017c
 80027f0:	20000164 	.word	0x20000164
 80027f4:	20000088 	.word	0x20000088
 80027f8:	20000084 	.word	0x20000084
 80027fc:	20000170 	.word	0x20000170
 8002800:	2000016c 	.word	0x2000016c

08002804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <vTaskSwitchContext+0xbc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <vTaskSwitchContext+0xc0>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002818:	e04d      	b.n	80028b6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <vTaskSwitchContext+0xc0>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <vTaskSwitchContext+0xc4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	f1c3 031f 	rsb	r3, r3, #31
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	4925      	ldr	r1, [pc, #148]	; (80028cc <vTaskSwitchContext+0xc8>)
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <vTaskSwitchContext+0x5c>
        __asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	607b      	str	r3, [r7, #4]
    }
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <vTaskSwitchContext+0x5a>
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <vTaskSwitchContext+0xc8>)
 800286c:	4413      	add	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	3308      	adds	r3, #8
 8002882:	429a      	cmp	r2, r3
 8002884:	d104      	bne.n	8002890 <vTaskSwitchContext+0x8c>
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <vTaskSwitchContext+0xcc>)
 8002898:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <vTaskSwitchContext+0xcc>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <vTaskSwitchContext+0xd0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d102      	bne.n	80028ac <vTaskSwitchContext+0xa8>
 80028a6:	f002 f815 	bl	80048d4 <SEGGER_SYSVIEW_OnIdle>
}
 80028aa:	e004      	b.n	80028b6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <vTaskSwitchContext+0xcc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 f86d 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000184 	.word	0x20000184
 80028c4:	20000170 	.word	0x20000170
 80028c8:	20000164 	.word	0x20000164
 80028cc:	20000088 	.word	0x20000088
 80028d0:	20000084 	.word	0x20000084
 80028d4:	20000180 	.word	0x20000180

080028d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80028e0:	f000 f852 	bl	8002988 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <prvIdleTask+0x28>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d9f9      	bls.n	80028e0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <prvIdleTask+0x2c>)
 80028ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80028fc:	e7f0      	b.n	80028e0 <prvIdleTask+0x8>
 80028fe:	bf00      	nop
 8002900:	20000088 	.word	0x20000088
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	e00c      	b.n	800292e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <prvInitialiseTaskLists+0x60>)
 8002920:	4413      	add	r3, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fbca 	bl	80020bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3301      	adds	r3, #1
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d9ef      	bls.n	8002914 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <prvInitialiseTaskLists+0x64>)
 8002936:	f7ff fbc1 	bl	80020bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800293a:	480d      	ldr	r0, [pc, #52]	; (8002970 <prvInitialiseTaskLists+0x68>)
 800293c:	f7ff fbbe 	bl	80020bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <prvInitialiseTaskLists+0x6c>)
 8002942:	f7ff fbbb 	bl	80020bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002946:	480c      	ldr	r0, [pc, #48]	; (8002978 <prvInitialiseTaskLists+0x70>)
 8002948:	f7ff fbb8 	bl	80020bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <prvInitialiseTaskLists+0x74>)
 800294e:	f7ff fbb5 	bl	80020bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <prvInitialiseTaskLists+0x78>)
 8002954:	4a05      	ldr	r2, [pc, #20]	; (800296c <prvInitialiseTaskLists+0x64>)
 8002956:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <prvInitialiseTaskLists+0x7c>)
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <prvInitialiseTaskLists+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000088 	.word	0x20000088
 800296c:	200000ec 	.word	0x200000ec
 8002970:	20000100 	.word	0x20000100
 8002974:	2000011c 	.word	0x2000011c
 8002978:	20000130 	.word	0x20000130
 800297c:	20000148 	.word	0x20000148
 8002980:	20000114 	.word	0x20000114
 8002984:	20000118 	.word	0x20000118

08002988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800298e:	e019      	b.n	80029c4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002990:	f000 fa00 	bl	8002d94 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <prvCheckTasksWaitingTermination+0x50>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fbdc 	bl	800215e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <prvCheckTasksWaitingTermination+0x54>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <prvCheckTasksWaitingTermination+0x54>)
 80029ae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <prvCheckTasksWaitingTermination+0x58>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <prvCheckTasksWaitingTermination+0x58>)
 80029b8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80029ba:	f000 fa1b 	bl	8002df4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f810 	bl	80029e4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <prvCheckTasksWaitingTermination+0x58>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e1      	bne.n	8002990 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000130 	.word	0x20000130
 80029dc:	2000015c 	.word	0x2000015c
 80029e0:	20000144 	.word	0x20000144

080029e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fb9b 	bl	800312c <vPortFree>
                vPortFree( pxTCB );
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fb98 	bl	800312c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <prvResetNextTaskUnblockTime+0x30>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d104      	bne.n	8002a1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <prvResetNextTaskUnblockTime+0x34>)
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295
 8002a18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a1a:	e005      	b.n	8002a28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <prvResetNextTaskUnblockTime+0x30>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <prvResetNextTaskUnblockTime+0x34>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000114 	.word	0x20000114
 8002a38:	2000017c 	.word	0x2000017c

08002a3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b04      	subs	r3, #4
 8002a4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3b04      	subs	r3, #4
 8002a6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <pxPortInitialiseStack+0x64>)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3b14      	subs	r3, #20
 8002a76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3b04      	subs	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f06f 0202 	mvn.w	r2, #2
 8002a8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3b20      	subs	r3, #32
 8002a90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	08002aa5 	.word	0x08002aa5

08002aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <prvTaskExitError+0x54>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d00a      	beq.n	8002ace <prvTaskExitError+0x2a>
        __asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	60fb      	str	r3, [r7, #12]
    }
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <prvTaskExitError+0x28>
        __asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	60bb      	str	r3, [r7, #8]
    }
 8002ae0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ae2:	bf00      	nop
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0fc      	beq.n	8002ae4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20000010 	.word	0x20000010
 8002afc:	00000000 	.word	0x00000000

08002b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <pxCurrentTCBConst2>)
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	6808      	ldr	r0, [r1, #0]
 8002b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b0a:	f380 8809 	msr	PSP, r0
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f380 8811 	msr	BASEPRI, r0
 8002b1a:	4770      	bx	lr
 8002b1c:	f3af 8000 	nop.w

08002b20 <pxCurrentTCBConst2>:
 8002b20:	20000084 	.word	0x20000084
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop

08002b28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b28:	4808      	ldr	r0, [pc, #32]	; (8002b4c <prvPortStartFirstTask+0x24>)
 8002b2a:	6800      	ldr	r0, [r0, #0]
 8002b2c:	6800      	ldr	r0, [r0, #0]
 8002b2e:	f380 8808 	msr	MSP, r0
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f380 8814 	msr	CONTROL, r0
 8002b3a:	b662      	cpsie	i
 8002b3c:	b661      	cpsie	f
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	df00      	svc	0
 8002b48:	bf00      	nop
 8002b4a:	0000      	.short	0x0000
 8002b4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop

08002b54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <xPortStartScheduler+0x120>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a46      	ldr	r2, [pc, #280]	; (8002c78 <xPortStartScheduler+0x124>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d10a      	bne.n	8002b7a <xPortStartScheduler+0x26>
        __asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	613b      	str	r3, [r7, #16]
    }
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b7a:	4b3e      	ldr	r3, [pc, #248]	; (8002c74 <xPortStartScheduler+0x120>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3f      	ldr	r2, [pc, #252]	; (8002c7c <xPortStartScheduler+0x128>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10a      	bne.n	8002b9a <xPortStartScheduler+0x46>
        __asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	60fb      	str	r3, [r7, #12]
    }
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <xPortStartScheduler+0x12c>)
 8002b9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <xPortStartScheduler+0x130>)
 8002bc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <xPortStartScheduler+0x134>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bc8:	e009      	b.n	8002bde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <xPortStartScheduler+0x134>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <xPortStartScheduler+0x134>)
 8002bd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b80      	cmp	r3, #128	; 0x80
 8002be8:	d0ef      	beq.n	8002bca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <xPortStartScheduler+0x134>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d00a      	beq.n	8002c0c <xPortStartScheduler+0xb8>
        __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	60bb      	str	r3, [r7, #8]
    }
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <xPortStartScheduler+0x134>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <xPortStartScheduler+0x134>)
 8002c14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <xPortStartScheduler+0x134>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <xPortStartScheduler+0x134>)
 8002c20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <xPortStartScheduler+0x138>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <xPortStartScheduler+0x138>)
 8002c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <xPortStartScheduler+0x138>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <xPortStartScheduler+0x138>)
 8002c3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c42:	f000 f963 	bl	8002f0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c46:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <xPortStartScheduler+0x13c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c4c:	f000 f982 	bl	8002f54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <xPortStartScheduler+0x140>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <xPortStartScheduler+0x140>)
 8002c56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c5c:	f7ff ff64 	bl	8002b28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c60:	f7ff fdd0 	bl	8002804 <vTaskSwitchContext>
    prvTaskExitError();
 8002c64:	f7ff ff1e 	bl	8002aa4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000ed00 	.word	0xe000ed00
 8002c78:	410fc271 	.word	0x410fc271
 8002c7c:	410fc270 	.word	0x410fc270
 8002c80:	e000e400 	.word	0xe000e400
 8002c84:	20000188 	.word	0x20000188
 8002c88:	2000018c 	.word	0x2000018c
 8002c8c:	e000ed20 	.word	0xe000ed20
 8002c90:	20000010 	.word	0x20000010
 8002c94:	e000ef34 	.word	0xe000ef34

08002c98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c9e:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <vInitPrioGroupValue+0xe4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <vInitPrioGroupValue+0xe8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10a      	bne.n	8002cbe <vInitPrioGroupValue+0x26>
        __asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	613b      	str	r3, [r7, #16]
    }
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <vInitPrioGroupValue+0xe4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <vInitPrioGroupValue+0xec>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d10a      	bne.n	8002cde <vInitPrioGroupValue+0x46>
        __asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	60fb      	str	r3, [r7, #12]
    }
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <vInitPrioGroupValue+0xf0>)
 8002ce0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <vInitPrioGroupValue+0xf4>)
 8002d04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d0c:	e009      	b.n	8002d22 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b80      	cmp	r3, #128	; 0x80
 8002d2c:	d0ef      	beq.n	8002d0e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1c3 0307 	rsb	r3, r3, #7
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00a      	beq.n	8002d50 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	60bb      	str	r3, [r7, #8]
    }
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d50:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d58:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <vInitPrioGroupValue+0xf8>)
 8002d64:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000ed00 	.word	0xe000ed00
 8002d80:	410fc271 	.word	0x410fc271
 8002d84:	410fc270 	.word	0x410fc270
 8002d88:	e000e400 	.word	0xe000e400
 8002d8c:	20000188 	.word	0x20000188
 8002d90:	2000018c 	.word	0x2000018c

08002d94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
        __asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	607b      	str	r3, [r7, #4]
    }
 8002dac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <vPortEnterCritical+0x58>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <vPortEnterCritical+0x58>)
 8002db6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <vPortEnterCritical+0x58>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10f      	bne.n	8002de0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <vPortEnterCritical+0x5c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	603b      	str	r3, [r7, #0]
    }
 8002ddc:	bf00      	nop
 8002dde:	e7fe      	b.n	8002dde <vPortEnterCritical+0x4a>
    }
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	20000010 	.word	0x20000010
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <vPortExitCritical+0x50>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <vPortExitCritical+0x24>
        __asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	607b      	str	r3, [r7, #4]
    }
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <vPortExitCritical+0x50>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	4a09      	ldr	r2, [pc, #36]	; (8002e44 <vPortExitCritical+0x50>)
 8002e20:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <vPortExitCritical+0x50>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <vPortExitCritical+0x42>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e34:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000010 	.word	0x20000010
	...

08002e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002e50:	f3ef 8009 	mrs	r0, PSP
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <pxCurrentTCBConst>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f01e 0f10 	tst.w	lr, #16
 8002e60:	bf08      	it	eq
 8002e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6a:	6010      	str	r0, [r2, #0]
 8002e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e74:	f380 8811 	msr	BASEPRI, r0
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f7ff fcc0 	bl	8002804 <vTaskSwitchContext>
 8002e84:	f04f 0000 	mov.w	r0, #0
 8002e88:	f380 8811 	msr	BASEPRI, r0
 8002e8c:	bc09      	pop	{r0, r3}
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	6808      	ldr	r0, [r1, #0]
 8002e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e96:	f01e 0f10 	tst.w	lr, #16
 8002e9a:	bf08      	it	eq
 8002e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ea0:	f380 8809 	msr	PSP, r0
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	f3af 8000 	nop.w

08002eb0 <pxCurrentTCBConst>:
 8002eb0:	20000084 	.word	0x20000084
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop

08002eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	607b      	str	r3, [r7, #4]
    }
 8002ed0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002ed2:	f001 fc85 	bl	80047e0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ed6:	f7ff fbd9 	bl	800268c <xTaskIncrementTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ee0:	f001 fcdc 	bl	800489c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <SysTick_Handler+0x50>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e001      	b.n	8002ef2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002eee:	f001 fcb9 	bl	8004864 <SEGGER_SYSVIEW_RecordExitISR>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f383 8811 	msr	BASEPRI, r3
    }
 8002efc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <vPortSetupTimerInterrupt+0x34>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <vPortSetupTimerInterrupt+0x38>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <vPortSetupTimerInterrupt+0x3c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <vPortSetupTimerInterrupt+0x40>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <vPortSetupTimerInterrupt+0x44>)
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <vPortSetupTimerInterrupt+0x34>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010
 8002f44:	e000e018 	.word	0xe000e018
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	10624dd3 	.word	0x10624dd3
 8002f50:	e000e014 	.word	0xe000e014

08002f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f64 <vPortEnableVFP+0x10>
 8002f58:	6801      	ldr	r1, [r0, #0]
 8002f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f5e:	6001      	str	r1, [r0, #0]
 8002f60:	4770      	bx	lr
 8002f62:	0000      	.short	0x0000
 8002f64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop

08002f6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f78:	f7ff fada 	bl	8002530 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f7c:	4b65      	ldr	r3, [pc, #404]	; (8003114 <pvPortMalloc+0x1a8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f84:	f000 f934 	bl	80031f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f88:	4b63      	ldr	r3, [pc, #396]	; (8003118 <pvPortMalloc+0x1ac>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 80a7 	bne.w	80030e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02d      	beq.n	8002ff8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d227      	bcs.n	8002ff8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fa8:	2208      	movs	r2, #8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d021      	beq.n	8002ffe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f023 0307 	bic.w	r3, r3, #7
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d214      	bcs.n	8002ff2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f023 0307 	bic.w	r3, r3, #7
 8002fce:	3308      	adds	r3, #8
 8002fd0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <pvPortMalloc+0x92>
        __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	617b      	str	r3, [r7, #20]
    }
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff6:	e002      	b.n	8002ffe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	e000      	b.n	8003000 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ffe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d06e      	beq.n	80030e4 <pvPortMalloc+0x178>
 8003006:	4b45      	ldr	r3, [pc, #276]	; (800311c <pvPortMalloc+0x1b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	d869      	bhi.n	80030e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003010:	4b43      	ldr	r3, [pc, #268]	; (8003120 <pvPortMalloc+0x1b4>)
 8003012:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003014:	4b42      	ldr	r3, [pc, #264]	; (8003120 <pvPortMalloc+0x1b4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800301a:	e004      	b.n	8003026 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	429a      	cmp	r2, r3
 800302e:	d903      	bls.n	8003038 <pvPortMalloc+0xcc>
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f1      	bne.n	800301c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <pvPortMalloc+0x1a8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	429a      	cmp	r2, r3
 8003040:	d050      	beq.n	80030e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	4413      	add	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad2      	subs	r2, r2, r3
 800305c:	2308      	movs	r3, #8
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	429a      	cmp	r2, r3
 8003062:	d91f      	bls.n	80030a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <pvPortMalloc+0x120>
        __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	613b      	str	r3, [r7, #16]
    }
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800309e:	69b8      	ldr	r0, [r7, #24]
 80030a0:	f000 f908 	bl	80032b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <pvPortMalloc+0x1b0>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <pvPortMalloc+0x1b0>)
 80030b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <pvPortMalloc+0x1b0>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <pvPortMalloc+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d203      	bcs.n	80030c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <pvPortMalloc+0x1b0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <pvPortMalloc+0x1b8>)
 80030c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <pvPortMalloc+0x1ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <pvPortMalloc+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3301      	adds	r3, #1
 80030e0:	4a11      	ldr	r2, [pc, #68]	; (8003128 <pvPortMalloc+0x1bc>)
 80030e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030e4:	f7ff fa32 	bl	800254c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <pvPortMalloc+0x19c>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60fb      	str	r3, [r7, #12]
    }
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <pvPortMalloc+0x19a>
    return pvReturn;
 8003108:	69fb      	ldr	r3, [r7, #28]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3728      	adds	r7, #40	; 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20019198 	.word	0x20019198
 8003118:	200191ac 	.word	0x200191ac
 800311c:	2001919c 	.word	0x2001919c
 8003120:	20019190 	.word	0x20019190
 8003124:	200191a0 	.word	0x200191a0
 8003128:	200191a4 	.word	0x200191a4

0800312c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04d      	beq.n	80031da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800313e:	2308      	movs	r3, #8
 8003140:	425b      	negs	r3, r3
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <vPortFree+0xb8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <vPortFree+0x44>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	60fb      	str	r3, [r7, #12]
    }
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <vPortFree+0x62>
        __asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	60bb      	str	r3, [r7, #8]
    }
 800318a:	bf00      	nop
 800318c:	e7fe      	b.n	800318c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <vPortFree+0xb8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01e      	beq.n	80031da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11a      	bne.n	80031da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <vPortFree+0xb8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031b4:	f7ff f9bc 	bl	8002530 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <vPortFree+0xbc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <vPortFree+0xbc>)
 80031c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031c6:	6938      	ldr	r0, [r7, #16]
 80031c8:	f000 f874 	bl	80032b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <vPortFree+0xc0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a06      	ldr	r2, [pc, #24]	; (80031ec <vPortFree+0xc0>)
 80031d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80031d6:	f7ff f9b9 	bl	800254c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200191ac 	.word	0x200191ac
 80031e8:	2001919c 	.word	0x2001919c
 80031ec:	200191a8 	.word	0x200191a8

080031f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031f6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80031fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <prvHeapInit+0xac>)
 80031fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3307      	adds	r3, #7
 800320e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <prvHeapInit+0xac>)
 8003220:	4413      	add	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <prvHeapInit+0xb0>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <prvHeapInit+0xb0>)
 8003230:	2200      	movs	r2, #0
 8003232:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800323c:	2208      	movs	r2, #8
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <prvHeapInit+0xb4>)
 8003250:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <prvHeapInit+0xb4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <prvHeapInit+0xb4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <prvHeapInit+0xb4>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <prvHeapInit+0xb8>)
 800327e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <prvHeapInit+0xbc>)
 8003286:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <prvHeapInit+0xc0>)
 800328a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	20000190 	.word	0x20000190
 80032a0:	20019190 	.word	0x20019190
 80032a4:	20019198 	.word	0x20019198
 80032a8:	200191a0 	.word	0x200191a0
 80032ac:	2001919c 	.word	0x2001919c
 80032b0:	200191ac 	.word	0x200191ac

080032b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <prvInsertBlockIntoFreeList+0xac>)
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e002      	b.n	80032c8 <prvInsertBlockIntoFreeList+0x14>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d8f7      	bhi.n	80032c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d108      	bne.n	80032f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	441a      	add	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	441a      	add	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d118      	bne.n	800333c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <prvInsertBlockIntoFreeList+0xb0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d00d      	beq.n	8003332 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e008      	b.n	8003344 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <prvInsertBlockIntoFreeList+0xb0>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e003      	b.n	8003344 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d002      	beq.n	8003352 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20019190 	.word	0x20019190
 8003364:	20019198 	.word	0x20019198

08003368 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003376:	2205      	movs	r2, #5
 8003378:	492b      	ldr	r1, [pc, #172]	; (8003428 <SYSVIEW_AddTask+0xc0>)
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f001 fcf2 	bl	8004d64 <memcmp>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d04b      	beq.n	800341e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003386:	4b29      	ldr	r3, [pc, #164]	; (800342c <SYSVIEW_AddTask+0xc4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b07      	cmp	r3, #7
 800338c:	d903      	bls.n	8003396 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800338e:	4828      	ldr	r0, [pc, #160]	; (8003430 <SYSVIEW_AddTask+0xc8>)
 8003390:	f001 fc5e 	bl	8004c50 <SEGGER_SYSVIEW_Warn>
    return;
 8003394:	e044      	b.n	8003420 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <SYSVIEW_AddTask+0xc4>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4926      	ldr	r1, [pc, #152]	; (8003434 <SYSVIEW_AddTask+0xcc>)
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <SYSVIEW_AddTask+0xc4>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4921      	ldr	r1, [pc, #132]	; (8003434 <SYSVIEW_AddTask+0xcc>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3304      	adds	r3, #4
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <SYSVIEW_AddTask+0xc4>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	491b      	ldr	r1, [pc, #108]	; (8003434 <SYSVIEW_AddTask+0xcc>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3308      	adds	r3, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80033d6:	4b15      	ldr	r3, [pc, #84]	; (800342c <SYSVIEW_AddTask+0xc4>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4916      	ldr	r1, [pc, #88]	; (8003434 <SYSVIEW_AddTask+0xcc>)
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	330c      	adds	r3, #12
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <SYSVIEW_AddTask+0xc4>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4910      	ldr	r1, [pc, #64]	; (8003434 <SYSVIEW_AddTask+0xcc>)
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3310      	adds	r3, #16
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <SYSVIEW_AddTask+0xc4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <SYSVIEW_AddTask+0xc4>)
 800340a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f80e 	bl	8003438 <SYSVIEW_SendTaskInfo>
 800341c:	e000      	b.n	8003420 <SYSVIEW_AddTask+0xb8>
    return;
 800341e:	bf00      	nop

}
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	08004e48 	.word	0x08004e48
 800342c:	20019250 	.word	0x20019250
 8003430:	08004e50 	.word	0x08004e50
 8003434:	200191b0 	.word	0x200191b0

08003438 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	2214      	movs	r2, #20
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fc98 	bl	8004d84 <memset>
  TaskInfo.TaskID     = TaskID;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	4618      	mov	r0, r3
 800346e:	f001 f88d 	bl	800458c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <__NVIC_EnableIRQ>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003512:	f001 fbf9 	bl	8004d08 <SEGGER_SYSVIEW_IsStarted>
 8003516:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800351e:	f000 feb9 	bl	8004294 <SEGGER_SYSVIEW_Start>
  }
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <_cbOnUARTRx+0x3c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d806      	bhi.n	800354c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <_cbOnUARTRx+0x3c>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <_cbOnUARTRx+0x3c>)
 8003548:	701a      	strb	r2, [r3, #0]
    goto Done;
 800354a:	e009      	b.n	8003560 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800354c:	f7ff ffde 	bl	800350c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003550:	4b05      	ldr	r3, [pc, #20]	; (8003568 <_cbOnUARTRx+0x3c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4618      	mov	r0, r3
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	2201      	movs	r2, #1
 800355a:	4619      	mov	r1, r3
 800355c:	f000 fb9a 	bl	8003c94 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003560:	bf00      	nop
}
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000014 	.word	0x20000014

0800356c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <_cbOnUARTTx+0x5c>)
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d80f      	bhi.n	800359c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <_cbOnUARTTx+0x5c>)
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	461a      	mov	r2, r3
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <_cbOnUARTTx+0x60>)
 8003584:	5c9a      	ldrb	r2, [r3, r2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <_cbOnUARTTx+0x5c>)
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	3301      	adds	r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <_cbOnUARTTx+0x5c>)
 8003594:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
    goto Done;
 800359a:	e00f      	b.n	80035bc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <_cbOnUARTTx+0x5c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fa19 	bl	80039dc <SEGGER_RTT_ReadUpBufferNoLock>
 80035aa:	4603      	mov	r3, r0
 80035ac:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da02      	bge.n	80035ba <_cbOnUARTTx+0x4e>
    r = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e000      	b.n	80035bc <_cbOnUARTTx+0x50>
  }
Done:
 80035ba:	bf00      	nop
  return r;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000014 	.word	0x20000014
 80035cc:	08004ed0 	.word	0x08004ed0

080035d0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <SEGGER_UART_init+0x1c>)
 80035da:	4905      	ldr	r1, [pc, #20]	; (80035f0 <SEGGER_UART_init+0x20>)
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f863 	bl	80036a8 <HIF_UART_Init>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	0800352d 	.word	0x0800352d
 80035f0:	0800356d 	.word	0x0800356d

080035f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <USART2_IRQHandler+0x80>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d011      	beq.n	800362e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800360a:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <USART2_IRQHandler+0x84>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 030b 	and.w	r3, r3, #11
 8003618:	2b00      	cmp	r3, #0
 800361a:	d108      	bne.n	800362e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <USART2_IRQHandler+0x88>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <USART2_IRQHandler+0x88>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	4610      	mov	r0, r2
 800362c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01a      	beq.n	800366e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <USART2_IRQHandler+0x8c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d015      	beq.n	800366c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <USART2_IRQHandler+0x8c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1dfa      	adds	r2, r7, #7
 8003646:	4610      	mov	r0, r2
 8003648:	4798      	blx	r3
 800364a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <USART2_IRQHandler+0x90>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <USART2_IRQHandler+0x90>)
 8003658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e006      	b.n	800366e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <USART2_IRQHandler+0x80>)
 8003662:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <USART2_IRQHandler+0x84>)
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e000      	b.n	800366e <USART2_IRQHandler+0x7a>
      return;
 800366c:	bf00      	nop
    }
  }
}
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40004400 	.word	0x40004400
 8003678:	40004404 	.word	0x40004404
 800367c:	20019254 	.word	0x20019254
 8003680:	20019258 	.word	0x20019258
 8003684:	4000440c 	.word	0x4000440c

08003688 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	4000440c 	.word	0x4000440c

080036a8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80036b4:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HIF_UART_Init+0xc8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HIF_UART_Init+0xc8>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036be:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HIF_UART_Init+0xcc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HIF_UART_Init+0xcc>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HIF_UART_Init+0xd0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d8:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80036e0:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80036e2:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HIF_UART_Init+0xd0>)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HIF_UART_Init+0xd4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80036fc:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80036fe:	4a1f      	ldr	r2, [pc, #124]	; (800377c <HIF_UART_Init+0xd4>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <HIF_UART_Init+0xd8>)
 8003706:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800370a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HIF_UART_Init+0xdc>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HIF_UART_Init+0xe0>)
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800371e:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HIF_UART_Init+0xe4>)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d302      	bcc.n	800373e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003738:	f640 73ff 	movw	r3, #4095	; 0xfff
 800373c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HIF_UART_Init+0xe8>)
 800374a:	b29b      	uxth	r3, r3
 800374c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HIF_UART_Init+0xec>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003754:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HIF_UART_Init+0xf0>)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800375a:	2106      	movs	r1, #6
 800375c:	2026      	movs	r0, #38	; 0x26
 800375e:	f7ff feab 	bl	80034b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003762:	2026      	movs	r0, #38	; 0x26
 8003764:	f7ff fe8a 	bl	800347c <__NVIC_EnableIRQ>
}
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40023840 	.word	0x40023840
 8003774:	40023830 	.word	0x40023830
 8003778:	40020020 	.word	0x40020020
 800377c:	40020000 	.word	0x40020000
 8003780:	4000440c 	.word	0x4000440c
 8003784:	40004410 	.word	0x40004410
 8003788:	40004414 	.word	0x40004414
 800378c:	0501bd00 	.word	0x0501bd00
 8003790:	40004408 	.word	0x40004408
 8003794:	20019254 	.word	0x20019254
 8003798:	20019258 	.word	0x20019258

0800379c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <_DoInit+0x98>)
 80037a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2203      	movs	r2, #3
 80037aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2203      	movs	r2, #3
 80037b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a20      	ldr	r2, [pc, #128]	; (8003838 <_DoInit+0x9c>)
 80037b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a20      	ldr	r2, [pc, #128]	; (800383c <_DoInit+0xa0>)
 80037bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a17      	ldr	r2, [pc, #92]	; (8003838 <_DoInit+0x9c>)
 80037dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a17      	ldr	r2, [pc, #92]	; (8003840 <_DoInit+0xa4>)
 80037e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2210      	movs	r2, #16
 80037e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3307      	adds	r3, #7
 8003800:	4a10      	ldr	r2, [pc, #64]	; (8003844 <_DoInit+0xa8>)
 8003802:	6810      	ldr	r0, [r2, #0]
 8003804:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003806:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <_DoInit+0xac>)
 800380e:	6810      	ldr	r0, [r2, #0]
 8003810:	6018      	str	r0, [r3, #0]
 8003812:	8891      	ldrh	r1, [r2, #4]
 8003814:	7992      	ldrb	r2, [r2, #6]
 8003816:	8099      	strh	r1, [r3, #4]
 8003818:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800381a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003824:	f3bf 8f5f 	dmb	sy
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	2001925c 	.word	0x2001925c
 8003838:	08004ea0 	.word	0x08004ea0
 800383c:	20019304 	.word	0x20019304
 8003840:	20019704 	.word	0x20019704
 8003844:	08004eac 	.word	0x08004eac
 8003848:	08004eb0 	.word	0x08004eb0

0800384c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003858:	2300      	movs	r3, #0
 800385a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	429a      	cmp	r2, r3
 800386e:	d905      	bls.n	800387c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	e007      	b.n	800388c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	69b9      	ldr	r1, [r7, #24]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	1acb      	subs	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3b01      	subs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	4293      	cmp	r3, r2
 8003898:	bf28      	it	cs
 800389a:	4613      	movcs	r3, r2
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4293      	cmp	r3, r2
 80038a4:	bf28      	it	cs
 80038a6:	4613      	movcs	r3, r2
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6978      	ldr	r0, [r7, #20]
 80038ba:	f001 fa8f 	bl	8004ddc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80038be:	6a3a      	ldr	r2, [r7, #32]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	4413      	add	r3, r2
 80038c4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	4413      	add	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	4413      	add	r3, r2
 80038dc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d101      	bne.n	80038ec <_WriteBlocking+0xa0>
      WrOff = 0u;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038ec:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1b2      	bne.n	8003862 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80038fc:	6a3b      	ldr	r3, [r7, #32]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3728      	adds	r7, #40	; 0x28
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003906:	b580      	push	{r7, lr}
 8003908:	b088      	sub	sp, #32
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d911      	bls.n	800394e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	6938      	ldr	r0, [r7, #16]
 800393a:	f001 fa4f 	bl	8004ddc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800393e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800394c:	e01f      	b.n	800398e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	6938      	ldr	r0, [r7, #16]
 8003962:	f001 fa3b 	bl	8004ddc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4413      	add	r3, r2
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4619      	mov	r1, r3
 800397e:	6938      	ldr	r0, [r7, #16]
 8003980:	f001 fa2c 	bl	8004ddc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003984:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	60da      	str	r2, [r3, #12]
}
 800398e:	bf00      	nop
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003996:	b480      	push	{r7}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d808      	bhi.n	80039c4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	3b01      	subs	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e004      	b.n	80039ce <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80039ce:	697b      	ldr	r3, [r7, #20]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80039e8:	4b3e      	ldr	r3, [pc, #248]	; (8003ae4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80039ea:	623b      	str	r3, [r7, #32]
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80039f6:	f7ff fed1 	bl	800379c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4a37      	ldr	r2, [pc, #220]	; (8003ae4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d92b      	bls.n	8003a80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4293      	cmp	r3, r2
 8003a38:	bf28      	it	cs
 8003a3a:	4613      	movcs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	4413      	add	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	6939      	ldr	r1, [r7, #16]
 8003a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a4e:	f001 f9c5 	bl	8004ddc <memcpy>
    NumBytesRead += NumBytesRem;
 8003a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4413      	add	r3, r2
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4413      	add	r3, r2
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d101      	bne.n	8003a80 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bf28      	it	cs
 8003a90:	4613      	movcs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d019      	beq.n	8003ace <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	4413      	add	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	6939      	ldr	r1, [r7, #16]
 8003aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aaa:	f001 f997 	bl	8004ddc <memcpy>
    NumBytesRead += NumBytesRem;
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4413      	add	r3, r2
 8003acc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3730      	adds	r7, #48	; 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2001925c 	.word	0x2001925c

08003ae8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003af4:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <SEGGER_RTT_ReadNoLock+0x1e>
 8003b02:	f7ff fe4b 	bl	800379c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	4413      	add	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	4a37      	ldr	r2, [pc, #220]	; (8003bf0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b14:	4413      	add	r3, r2
 8003b16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d92b      	bls.n	8003b8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4293      	cmp	r3, r2
 8003b44:	bf28      	it	cs
 8003b46:	4613      	movcs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	4413      	add	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b5a:	f001 f93f 	bl	8004ddc <memcpy>
    NumBytesRead += NumBytesRem;
 8003b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d101      	bne.n	8003b8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf28      	it	cs
 8003b9c:	4613      	movcs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d019      	beq.n	8003bda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	4413      	add	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	6939      	ldr	r1, [r7, #16]
 8003bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bb6:	f001 f911 	bl	8004ddc <memcpy>
    NumBytesRead += NumBytesRem;
 8003bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3730      	adds	r7, #48	; 0x30
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	2001925c 	.word	0x2001925c

08003bf4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	3360      	adds	r3, #96	; 0x60
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003c12:	4413      	add	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d029      	beq.n	8003c72 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d82e      	bhi.n	8003c80 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d013      	beq.n	8003c52 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003c2a:	e029      	b.n	8003c80 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c2c:	6978      	ldr	r0, [r7, #20]
 8003c2e:	f7ff feb2 	bl	8003996 <_GetAvailWriteSpace>
 8003c32:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d202      	bcs.n	8003c42 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003c40:	e021      	b.n	8003c86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7ff fe5b 	bl	8003906 <_WriteNoCheck>
    break;
 8003c50:	e019      	b.n	8003c86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f7ff fe9f 	bl	8003996 <_GetAvailWriteSpace>
 8003c58:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	bf28      	it	cs
 8003c62:	4613      	movcs	r3, r2
 8003c64:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	69b9      	ldr	r1, [r7, #24]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff fe4b 	bl	8003906 <_WriteNoCheck>
    break;
 8003c70:	e009      	b.n	8003c86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	69b9      	ldr	r1, [r7, #24]
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	f7ff fde8 	bl	800384c <_WriteBlocking>
 8003c7c:	61f8      	str	r0, [r7, #28]
    break;
 8003c7e:	e002      	b.n	8003c86 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
    break;
 8003c84:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003c86:	69fb      	ldr	r3, [r7, #28]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	2001925c 	.word	0x2001925c

08003c94 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003cae:	f7ff fd75 	bl	800379c <_DoInit>
  SEGGER_RTT_LOCK();
 8003cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cb6:	f04f 0120 	mov.w	r1, #32
 8003cba:	f381 8811 	msr	BASEPRI, r1
 8003cbe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7ff ff95 	bl	8003bf4 <SEGGER_RTT_WriteDownBufferNoLock>
 8003cca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	2001925c 	.word	0x2001925c

08003ce0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003cf0:	e002      	b.n	8003cf8 <_EncodeStr+0x18>
    Len++;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f6      	bne.n	8003cf2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d901      	bls.n	8003d10 <_EncodeStr+0x30>
    Len = Limit;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2bfe      	cmp	r3, #254	; 0xfe
 8003d14:	d806      	bhi.n	8003d24 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	60fa      	str	r2, [r7, #12]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e011      	b.n	8003d48 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	60fa      	str	r2, [r7, #12]
 8003d2a:	22ff      	movs	r2, #255	; 0xff
 8003d2c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	60fa      	str	r2, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	0a19      	lsrs	r1, r3, #8
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	60fa      	str	r2, [r7, #12]
 8003d44:	b2ca      	uxtb	r2, r1
 8003d46:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003d4c:	e00a      	b.n	8003d64 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	1c53      	adds	r3, r2, #1
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1c59      	adds	r1, r3, #1
 8003d58:	60f9      	str	r1, [r7, #12]
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	701a      	strb	r2, [r3, #0]
    n++;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	3301      	adds	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3f0      	bcc.n	8003d4e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d9a:	4b35      	ldr	r3, [pc, #212]	; (8003e70 <_HandleIncomingPacket+0xdc>)
 8003d9c:	7e1b      	ldrb	r3, [r3, #24]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	1cfb      	adds	r3, r7, #3
 8003da2:	2201      	movs	r2, #1
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7ff fe9f 	bl	8003ae8 <SEGGER_RTT_ReadNoLock>
 8003daa:	4603      	mov	r3, r0
 8003dac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	dd59      	ble.n	8003e68 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d032      	beq.n	8003e20 <_HandleIncomingPacket+0x8c>
 8003dba:	2b80      	cmp	r3, #128	; 0x80
 8003dbc:	dc42      	bgt.n	8003e44 <_HandleIncomingPacket+0xb0>
 8003dbe:	2b07      	cmp	r3, #7
 8003dc0:	dc16      	bgt.n	8003df0 <_HandleIncomingPacket+0x5c>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	dd3e      	ble.n	8003e44 <_HandleIncomingPacket+0xb0>
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d83b      	bhi.n	8003e44 <_HandleIncomingPacket+0xb0>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <_HandleIncomingPacket+0x40>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003df7 	.word	0x08003df7
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e03 	.word	0x08003e03
 8003de0:	08003e09 	.word	0x08003e09
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e1b 	.word	0x08003e1b
 8003df0:	2b7f      	cmp	r3, #127	; 0x7f
 8003df2:	d034      	beq.n	8003e5e <_HandleIncomingPacket+0xca>
 8003df4:	e026      	b.n	8003e44 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003df6:	f000 fa4d 	bl	8004294 <SEGGER_SYSVIEW_Start>
      break;
 8003dfa:	e035      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003dfc:	f000 fb06 	bl	800440c <SEGGER_SYSVIEW_Stop>
      break;
 8003e00:	e032      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003e02:	f000 fcbb 	bl	800477c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003e06:	e02f      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003e08:	f000 fca4 	bl	8004754 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003e0c:	e02c      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003e0e:	f000 fb23 	bl	8004458 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003e12:	e029      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003e14:	f000 fede 	bl	8004bd4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003e18:	e026      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003e1a:	f000 febd 	bl	8004b98 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003e1e:	e023      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <_HandleIncomingPacket+0xdc>)
 8003e22:	7e1b      	ldrb	r3, [r3, #24]
 8003e24:	4618      	mov	r0, r3
 8003e26:	1cfb      	adds	r3, r7, #3
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f7ff fe5c 	bl	8003ae8 <SEGGER_RTT_ReadNoLock>
 8003e30:	4603      	mov	r3, r0
 8003e32:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	dd13      	ble.n	8003e62 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fe2b 	bl	8004a98 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003e42:	e00e      	b.n	8003e62 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	b25b      	sxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da0c      	bge.n	8003e66 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <_HandleIncomingPacket+0xdc>)
 8003e4e:	7e1b      	ldrb	r3, [r3, #24]
 8003e50:	4618      	mov	r0, r3
 8003e52:	1cfb      	adds	r3, r7, #3
 8003e54:	2201      	movs	r2, #1
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7ff fe46 	bl	8003ae8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003e5c:	e003      	b.n	8003e66 <_HandleIncomingPacket+0xd2>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
      break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <_HandleIncomingPacket+0xd4>
      break;
 8003e66:	bf00      	nop
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20019714 	.word	0x20019714

08003e74 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	; 0x30
 8003e78:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	3301      	adds	r3, #1
 8003e82:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8e:	e00b      	b.n	8003ea8 <_TrySendOverflowPacket+0x34>
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	09db      	lsrs	r3, r3, #7
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8003eac:	d8f0      	bhi.n	8003e90 <_TrySendOverflowPacket+0x1c>
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ebe:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <_TrySendOverflowPacket+0xe4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003ec4:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	e00b      	b.n	8003ef0 <_TrySendOverflowPacket+0x7c>
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	6279      	str	r1, [r7, #36]	; 0x24
 8003ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	09db      	lsrs	r3, r3, #7
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef4:	d8f0      	bhi.n	8003ed8 <_TrySendOverflowPacket+0x64>
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	627a      	str	r2, [r7, #36]	; 0x24
 8003efc:	6a3a      	ldr	r2, [r7, #32]
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003f06:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc f962 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003f20:	f7ff fbb2 	bl	8003688 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e004      	b.n	8003f48 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	3301      	adds	r3, #1
 8003f44:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <_TrySendOverflowPacket+0xe0>)
 8003f46:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003f48:	693b      	ldr	r3, [r7, #16]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3730      	adds	r7, #48	; 0x30
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20019714 	.word	0x20019714
 8003f58:	e0001004 	.word	0xe0001004

08003f5c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003f68:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <_SendPacket+0x1c4>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d010      	beq.n	8003f92 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003f70:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <_SendPacket+0x1c4>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a5 	beq.w	80040c4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003f7a:	4b69      	ldr	r3, [pc, #420]	; (8004120 <_SendPacket+0x1c4>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d109      	bne.n	8003f96 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003f82:	f7ff ff77 	bl	8003e74 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003f86:	4b66      	ldr	r3, [pc, #408]	; (8004120 <_SendPacket+0x1c4>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	f040 809c 	bne.w	80040c8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003f90:	e001      	b.n	8003f96 <_SendPacket+0x3a>
    goto Send;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <_SendPacket+0x3c>
Send:
 8003f96:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b1f      	cmp	r3, #31
 8003f9c:	d809      	bhi.n	8003fb2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003f9e:	4b60      	ldr	r3, [pc, #384]	; (8004120 <_SendPacket+0x1c4>)
 8003fa0:	69da      	ldr	r2, [r3, #28]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f040 808d 	bne.w	80040cc <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b17      	cmp	r3, #23
 8003fb6:	d807      	bhi.n	8003fc8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e03d      	b.n	8004044 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd4:	d912      	bls.n	8003ffc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	09da      	lsrs	r2, r3, #7
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	3a01      	subs	r2, #1
 8003fee:	60fa      	str	r2, [r7, #12]
 8003ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e006      	b.n	800400a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b7f      	cmp	r3, #127	; 0x7f
 800400e:	d912      	bls.n	8004036 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	09da      	lsrs	r2, r3, #7
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b01      	subs	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	3a01      	subs	r2, #1
 8004028:	60fa      	str	r2, [r7, #12]
 800402a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800402e:	b2da      	uxtb	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e006      	b.n	8004044 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b01      	subs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <_SendPacket+0x1c8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <_SendPacket+0x1c4>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	e00b      	b.n	8004076 <_SendPacket+0x11a>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	6279      	str	r1, [r7, #36]	; 0x24
 8004068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2b7f      	cmp	r3, #127	; 0x7f
 800407a:	d8f0      	bhi.n	800405e <_SendPacket+0x102>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	627a      	str	r2, [r7, #36]	; 0x24
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <_SendPacket+0x1c4>)
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	4618      	mov	r0, r3
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	461a      	mov	r2, r3
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	f7fc f8a0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040a0:	4603      	mov	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80040a4:	f7ff faf0 	bl	8003688 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <_SendPacket+0x1c4>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	60d3      	str	r3, [r2, #12]
 80040b4:	e00b      	b.n	80040ce <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <_SendPacket+0x1c4>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <_SendPacket+0x1c4>)
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e004      	b.n	80040ce <_SendPacket+0x172>
    goto SendDone;
 80040c4:	bf00      	nop
 80040c6:	e002      	b.n	80040ce <_SendPacket+0x172>
      goto SendDone;
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <_SendPacket+0x172>
      goto SendDone;
 80040cc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <_SendPacket+0x1c4>)
 80040d0:	7e1b      	ldrb	r3, [r3, #24]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <_SendPacket+0x1cc>)
 80040d6:	460b      	mov	r3, r1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	440b      	add	r3, r1
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	336c      	adds	r3, #108	; 0x6c
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <_SendPacket+0x1c4>)
 80040e6:	7e1b      	ldrb	r3, [r3, #24]
 80040e8:	4618      	mov	r0, r3
 80040ea:	490f      	ldr	r1, [pc, #60]	; (8004128 <_SendPacket+0x1cc>)
 80040ec:	4603      	mov	r3, r0
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4403      	add	r3, r0
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	440b      	add	r3, r1
 80040f6:	3370      	adds	r3, #112	; 0x70
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d00b      	beq.n	8004116 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <_SendPacket+0x1c4>)
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <_SendPacket+0x1c4>)
 8004108:	2201      	movs	r2, #1
 800410a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800410c:	f7ff fe42 	bl	8003d94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <_SendPacket+0x1c4>)
 8004112:	2200      	movs	r2, #0
 8004114:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004116:	bf00      	nop
 8004118:	3728      	adds	r7, #40	; 0x28
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20019714 	.word	0x20019714
 8004124:	e0001004 	.word	0xe0001004
 8004128:	2001925c 	.word	0x2001925c

0800412c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004134:	f3ef 8311 	mrs	r3, BASEPRI
 8004138:	f04f 0120 	mov.w	r1, #32
 800413c:	f381 8811 	msr	BASEPRI, r1
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004144:	f7ff fe19 	bl	8003d7a <_PreparePacket>
 8004148:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68b8      	ldr	r0, [r7, #8]
 8004150:	f7ff ff04 	bl	8003f5c <_SendPacket>
  RECORD_END();
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f383 8811 	msr	BASEPRI, r3
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20019744 	.word	0x20019744

08004168 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004172:	f3ef 8311 	mrs	r3, BASEPRI
 8004176:	f04f 0120 	mov.w	r1, #32
 800417a:	f381 8811 	msr	BASEPRI, r1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	4816      	ldr	r0, [pc, #88]	; (80041dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004182:	f7ff fdfa 	bl	8003d7a <_PreparePacket>
 8004186:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e00b      	b.n	80041ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	1c59      	adds	r1, r3, #1
 800419e:	61f9      	str	r1, [r7, #28]
 80041a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	09db      	lsrs	r3, r3, #7
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b7f      	cmp	r3, #127	; 0x7f
 80041b2:	d8f0      	bhi.n	8004196 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	6938      	ldr	r0, [r7, #16]
 80041ca:	f7ff fec7 	bl	8003f5c <_SendPacket>
  RECORD_END();
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f383 8811 	msr	BASEPRI, r3
}
 80041d4:	bf00      	nop
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20019744 	.word	0x20019744

080041e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80041ec:	f3ef 8311 	mrs	r3, BASEPRI
 80041f0:	f04f 0120 	mov.w	r1, #32
 80041f4:	f381 8811 	msr	BASEPRI, r1
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	4825      	ldr	r0, [pc, #148]	; (8004290 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80041fc:	f7ff fdbd 	bl	8003d7a <_PreparePacket>
 8004200:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
 800420e:	e00b      	b.n	8004228 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	b2da      	uxtb	r2, r3
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	62f9      	str	r1, [r7, #44]	; 0x2c
 800421a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	09db      	lsrs	r3, r3, #7
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b7f      	cmp	r3, #127	; 0x7f
 800422c:	d8f0      	bhi.n	8004210 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	e00b      	b.n	8004260 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	6279      	str	r1, [r7, #36]	; 0x24
 8004252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	09db      	lsrs	r3, r3, #7
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	2b7f      	cmp	r3, #127	; 0x7f
 8004264:	d8f0      	bhi.n	8004248 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	627a      	str	r2, [r7, #36]	; 0x24
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	69b8      	ldr	r0, [r7, #24]
 800427c:	f7ff fe6e 	bl	8003f5c <_SendPacket>
  RECORD_END();
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f383 8811 	msr	BASEPRI, r3
}
 8004286:	bf00      	nop
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20019744 	.word	0x20019744

08004294 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b08c      	sub	sp, #48	; 0x30
 8004298:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800429a:	4b59      	ldr	r3, [pc, #356]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80042a0:	f3ef 8311 	mrs	r3, BASEPRI
 80042a4:	f04f 0120 	mov.w	r1, #32
 80042a8:	f381 8811 	msr	BASEPRI, r1
 80042ac:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80042ae:	4b54      	ldr	r3, [pc, #336]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	220a      	movs	r2, #10
 80042b4:	4953      	ldr	r1, [pc, #332]	; (8004404 <SEGGER_SYSVIEW_Start+0x170>)
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fb ff92 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80042c2:	f7ff f9e1 	bl	8003688 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80042c6:	200a      	movs	r0, #10
 80042c8:	f7ff ff30 	bl	800412c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80042cc:	f3ef 8311 	mrs	r3, BASEPRI
 80042d0:	f04f 0120 	mov.w	r1, #32
 80042d4:	f381 8811 	msr	BASEPRI, r1
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	484b      	ldr	r0, [pc, #300]	; (8004408 <SEGGER_SYSVIEW_Start+0x174>)
 80042dc:	f7ff fd4d 	bl	8003d7a <_PreparePacket>
 80042e0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ea:	4b45      	ldr	r3, [pc, #276]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f0:	e00b      	b.n	800430a <SEGGER_SYSVIEW_Start+0x76>
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	1c59      	adds	r1, r3, #1
 80042fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	09db      	lsrs	r3, r3, #7
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2b7f      	cmp	r3, #127	; 0x7f
 800430e:	d8f0      	bhi.n	80042f2 <SEGGER_SYSVIEW_Start+0x5e>
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	4b36      	ldr	r3, [pc, #216]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	623b      	str	r3, [r7, #32]
 800432a:	e00b      	b.n	8004344 <SEGGER_SYSVIEW_Start+0xb0>
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	6279      	str	r1, [r7, #36]	; 0x24
 8004336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	09db      	lsrs	r3, r3, #7
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b7f      	cmp	r3, #127	; 0x7f
 8004348:	d8f0      	bhi.n	800432c <SEGGER_SYSVIEW_Start+0x98>
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	627a      	str	r2, [r7, #36]	; 0x24
 8004350:	6a3a      	ldr	r2, [r7, #32]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e00b      	b.n	800437e <SEGGER_SYSVIEW_Start+0xea>
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	61f9      	str	r1, [r7, #28]
 8004370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	09db      	lsrs	r3, r3, #7
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b7f      	cmp	r3, #127	; 0x7f
 8004382:	d8f0      	bhi.n	8004366 <SEGGER_SYSVIEW_Start+0xd2>
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	61fa      	str	r2, [r7, #28]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e00b      	b.n	80043b6 <SEGGER_SYSVIEW_Start+0x122>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1c59      	adds	r1, r3, #1
 80043a6:	6179      	str	r1, [r7, #20]
 80043a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	09db      	lsrs	r3, r3, #7
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b7f      	cmp	r3, #127	; 0x7f
 80043ba:	d8f0      	bhi.n	800439e <SEGGER_SYSVIEW_Start+0x10a>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	617a      	str	r2, [r7, #20]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80043cc:	2218      	movs	r2, #24
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fdc3 	bl	8003f5c <_SendPacket>
      RECORD_END();
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <SEGGER_SYSVIEW_Start+0x16c>)
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80043ea:	f000 f9c7 	bl	800477c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80043ee:	f000 f9b1 	bl	8004754 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80043f2:	f000 fbef 	bl	8004bd4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80043f6:	bf00      	nop
 80043f8:	3730      	adds	r7, #48	; 0x30
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20019714 	.word	0x20019714
 8004404:	08004ed4 	.word	0x08004ed4
 8004408:	20019744 	.word	0x20019744

0800440c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004412:	f3ef 8311 	mrs	r3, BASEPRI
 8004416:	f04f 0120 	mov.w	r1, #32
 800441a:	f381 8811 	msr	BASEPRI, r1
 800441e:	607b      	str	r3, [r7, #4]
 8004420:	480b      	ldr	r0, [pc, #44]	; (8004450 <SEGGER_SYSVIEW_Stop+0x44>)
 8004422:	f7ff fcaa 	bl	8003d7a <_PreparePacket>
 8004426:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <SEGGER_SYSVIEW_Stop+0x48>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004430:	220b      	movs	r2, #11
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	6838      	ldr	r0, [r7, #0]
 8004436:	f7ff fd91 	bl	8003f5c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SEGGER_SYSVIEW_Stop+0x48>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f383 8811 	msr	BASEPRI, r3
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20019744 	.word	0x20019744
 8004454:	20019714 	.word	0x20019714

08004458 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004458:	b580      	push	{r7, lr}
 800445a:	b08c      	sub	sp, #48	; 0x30
 800445c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800445e:	f3ef 8311 	mrs	r3, BASEPRI
 8004462:	f04f 0120 	mov.w	r1, #32
 8004466:	f381 8811 	msr	BASEPRI, r1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	4845      	ldr	r0, [pc, #276]	; (8004584 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800446e:	f7ff fc84 	bl	8003d7a <_PreparePacket>
 8004472:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447c:	4b42      	ldr	r3, [pc, #264]	; (8004588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
 8004482:	e00b      	b.n	800449c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	b2da      	uxtb	r2, r3
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	1c59      	adds	r1, r3, #1
 800448c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800448e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	09db      	lsrs	r3, r3, #7
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
 800449c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449e:	2b7f      	cmp	r3, #127	; 0x7f
 80044a0:	d8f0      	bhi.n	8004484 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	e00b      	b.n	80044d6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	6279      	str	r1, [r7, #36]	; 0x24
 80044c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	09db      	lsrs	r3, r3, #7
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b7f      	cmp	r3, #127	; 0x7f
 80044da:	d8f0      	bhi.n	80044be <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	627a      	str	r2, [r7, #36]	; 0x24
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e00b      	b.n	8004510 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	1c59      	adds	r1, r3, #1
 8004500:	61f9      	str	r1, [r7, #28]
 8004502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	09db      	lsrs	r3, r3, #7
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b7f      	cmp	r3, #127	; 0x7f
 8004514:	d8f0      	bhi.n	80044f8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	61fa      	str	r2, [r7, #28]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e00b      	b.n	8004548 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1c59      	adds	r1, r3, #1
 8004538:	6179      	str	r1, [r7, #20]
 800453a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	09db      	lsrs	r3, r3, #7
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b7f      	cmp	r3, #127	; 0x7f
 800454c:	d8f0      	bhi.n	8004530 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	617a      	str	r2, [r7, #20]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800455e:	2218      	movs	r2, #24
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7ff fcfa 	bl	8003f5c <_SendPacket>
  RECORD_END();
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	4798      	blx	r3
  }
}
 800457c:	bf00      	nop
 800457e:	3730      	adds	r7, #48	; 0x30
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20019744 	.word	0x20019744
 8004588:	20019714 	.word	0x20019714

0800458c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b092      	sub	sp, #72	; 0x48
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004594:	f3ef 8311 	mrs	r3, BASEPRI
 8004598:	f04f 0120 	mov.w	r1, #32
 800459c:	f381 8811 	msr	BASEPRI, r1
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	486a      	ldr	r0, [pc, #424]	; (800474c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80045a4:	f7ff fbe9 	bl	8003d7a <_PreparePacket>
 80045a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	647b      	str	r3, [r7, #68]	; 0x44
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b66      	ldr	r3, [pc, #408]	; (8004750 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
 80045be:	e00b      	b.n	80045d8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80045c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	6479      	str	r1, [r7, #68]	; 0x44
 80045ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d4:	09db      	lsrs	r3, r3, #7
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40
 80045d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045da:	2b7f      	cmp	r3, #127	; 0x7f
 80045dc:	d8f0      	bhi.n	80045c0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80045de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	647a      	str	r2, [r7, #68]	; 0x44
 80045e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f8:	e00b      	b.n	8004612 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004600:	1c59      	adds	r1, r3, #1
 8004602:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	09db      	lsrs	r3, r3, #7
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	2b7f      	cmp	r3, #127	; 0x7f
 8004616:	d8f0      	bhi.n	80045fa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800461e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	4619      	mov	r1, r3
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff fb55 	bl	8003ce0 <_EncodeStr>
 8004636:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004638:	2209      	movs	r2, #9
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	6938      	ldr	r0, [r7, #16]
 800463e:	f7ff fc8d 	bl	8003f5c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b40      	ldr	r3, [pc, #256]	; (8004750 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
 8004656:	e00b      	b.n	8004670 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	b2da      	uxtb	r2, r3
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	1c59      	adds	r1, r3, #1
 8004660:	6379      	str	r1, [r7, #52]	; 0x34
 8004662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	09db      	lsrs	r3, r3, #7
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
 8004670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004672:	2b7f      	cmp	r3, #127	; 0x7f
 8004674:	d8f0      	bhi.n	8004658 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	637a      	str	r2, [r7, #52]	; 0x34
 800467c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004690:	e00b      	b.n	80046aa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	b2da      	uxtb	r2, r3
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800469c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	09db      	lsrs	r3, r3, #7
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	2b7f      	cmp	r3, #127	; 0x7f
 80046ae:	d8f0      	bhi.n	8004692 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	e00b      	b.n	80046e4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1c59      	adds	r1, r3, #1
 80046d4:	6279      	str	r1, [r7, #36]	; 0x24
 80046d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	09db      	lsrs	r3, r3, #7
 80046e2:	623b      	str	r3, [r7, #32]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b7f      	cmp	r3, #127	; 0x7f
 80046e8:	d8f0      	bhi.n	80046cc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	627a      	str	r2, [r7, #36]	; 0x24
 80046f0:	6a3a      	ldr	r2, [r7, #32]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	e00b      	b.n	800471c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	61f9      	str	r1, [r7, #28]
 800470e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	09db      	lsrs	r3, r3, #7
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b7f      	cmp	r3, #127	; 0x7f
 8004720:	d8f0      	bhi.n	8004704 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	61fa      	str	r2, [r7, #28]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004732:	2215      	movs	r2, #21
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	6938      	ldr	r0, [r7, #16]
 8004738:	f7ff fc10 	bl	8003f5c <_SendPacket>
  RECORD_END();
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f383 8811 	msr	BASEPRI, r3
}
 8004742:	bf00      	nop
 8004744:	3748      	adds	r7, #72	; 0x48
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20019744 	.word	0x20019744
 8004750:	20019714 	.word	0x20019714

08004754 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800476a:	4b03      	ldr	r3, [pc, #12]	; (8004778 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	4798      	blx	r3
  }
}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20019714 	.word	0x20019714

0800477c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01a      	beq.n	80047c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4798      	blx	r3
 800479c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80047a0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80047a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	000a      	movs	r2, r1
 80047b0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80047b2:	4613      	mov	r3, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4621      	mov	r1, r4
 80047b8:	200d      	movs	r0, #13
 80047ba:	f7ff fd11 	bl	80041e0 <SEGGER_SYSVIEW_RecordU32x2>
 80047be:	e006      	b.n	80047ce <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	200c      	movs	r0, #12
 80047c8:	f7ff fcce 	bl	8004168 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20019714 	.word	0x20019714
 80047dc:	e0001004 	.word	0xe0001004

080047e0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047e6:	f3ef 8311 	mrs	r3, BASEPRI
 80047ea:	f04f 0120 	mov.w	r1, #32
 80047ee:	f381 8811 	msr	BASEPRI, r1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	4819      	ldr	r0, [pc, #100]	; (800485c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80047f6:	f7ff fac0 	bl	8003d7a <_PreparePacket>
 80047fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e00b      	b.n	800482c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	6179      	str	r1, [r7, #20]
 800481e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	09db      	lsrs	r3, r3, #7
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b7f      	cmp	r3, #127	; 0x7f
 8004830:	d8f0      	bhi.n	8004814 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	617a      	str	r2, [r7, #20]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004842:	2202      	movs	r2, #2
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f7ff fb88 	bl	8003f5c <_SendPacket>
  RECORD_END();
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f383 8811 	msr	BASEPRI, r3
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20019744 	.word	0x20019744
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800486a:	f3ef 8311 	mrs	r3, BASEPRI
 800486e:	f04f 0120 	mov.w	r1, #32
 8004872:	f381 8811 	msr	BASEPRI, r1
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	4807      	ldr	r0, [pc, #28]	; (8004898 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800487a:	f7ff fa7e 	bl	8003d7a <_PreparePacket>
 800487e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004880:	2203      	movs	r2, #3
 8004882:	6839      	ldr	r1, [r7, #0]
 8004884:	6838      	ldr	r0, [r7, #0]
 8004886:	f7ff fb69 	bl	8003f5c <_SendPacket>
  RECORD_END();
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f383 8811 	msr	BASEPRI, r3
}
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20019744 	.word	0x20019744

0800489c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048a2:	f3ef 8311 	mrs	r3, BASEPRI
 80048a6:	f04f 0120 	mov.w	r1, #32
 80048aa:	f381 8811 	msr	BASEPRI, r1
 80048ae:	607b      	str	r3, [r7, #4]
 80048b0:	4807      	ldr	r0, [pc, #28]	; (80048d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80048b2:	f7ff fa62 	bl	8003d7a <_PreparePacket>
 80048b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80048b8:	2212      	movs	r2, #18
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6838      	ldr	r0, [r7, #0]
 80048be:	f7ff fb4d 	bl	8003f5c <_SendPacket>
  RECORD_END();
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f383 8811 	msr	BASEPRI, r3
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20019744 	.word	0x20019744

080048d4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048da:	f3ef 8311 	mrs	r3, BASEPRI
 80048de:	f04f 0120 	mov.w	r1, #32
 80048e2:	f381 8811 	msr	BASEPRI, r1
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	4807      	ldr	r0, [pc, #28]	; (8004908 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80048ea:	f7ff fa46 	bl	8003d7a <_PreparePacket>
 80048ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80048f0:	2211      	movs	r2, #17
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6838      	ldr	r0, [r7, #0]
 80048f6:	f7ff fb31 	bl	8003f5c <_SendPacket>
  RECORD_END();
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f383 8811 	msr	BASEPRI, r3
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20019744 	.word	0x20019744

0800490c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004914:	f3ef 8311 	mrs	r3, BASEPRI
 8004918:	f04f 0120 	mov.w	r1, #32
 800491c:	f381 8811 	msr	BASEPRI, r1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	4819      	ldr	r0, [pc, #100]	; (8004988 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004924:	f7ff fa29 	bl	8003d7a <_PreparePacket>
 8004928:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800492e:	4b17      	ldr	r3, [pc, #92]	; (800498c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e00b      	b.n	800495a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	61f9      	str	r1, [r7, #28]
 800494c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	09db      	lsrs	r3, r3, #7
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b7f      	cmp	r3, #127	; 0x7f
 800495e:	d8f0      	bhi.n	8004942 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004970:	2208      	movs	r2, #8
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	6938      	ldr	r0, [r7, #16]
 8004976:	f7ff faf1 	bl	8003f5c <_SendPacket>
  RECORD_END();
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f383 8811 	msr	BASEPRI, r3
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20019744 	.word	0x20019744
 800498c:	20019714 	.word	0x20019714

08004990 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004998:	f3ef 8311 	mrs	r3, BASEPRI
 800499c:	f04f 0120 	mov.w	r1, #32
 80049a0:	f381 8811 	msr	BASEPRI, r1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	4819      	ldr	r0, [pc, #100]	; (8004a0c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80049a8:	f7ff f9e7 	bl	8003d7a <_PreparePacket>
 80049ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e00b      	b.n	80049de <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	61f9      	str	r1, [r7, #28]
 80049d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	09db      	lsrs	r3, r3, #7
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b7f      	cmp	r3, #127	; 0x7f
 80049e2:	d8f0      	bhi.n	80049c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	61fa      	str	r2, [r7, #28]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80049f4:	2204      	movs	r2, #4
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	f7ff faaf 	bl	8003f5c <_SendPacket>
  RECORD_END();
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f383 8811 	msr	BASEPRI, r3
}
 8004a04:	bf00      	nop
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20019744 	.word	0x20019744
 8004a10:	20019714 	.word	0x20019714

08004a14 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a20:	f04f 0120 	mov.w	r1, #32
 8004a24:	f381 8811 	msr	BASEPRI, r1
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	4819      	ldr	r0, [pc, #100]	; (8004a90 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004a2c:	f7ff f9a5 	bl	8003d7a <_PreparePacket>
 8004a30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e00b      	b.n	8004a62 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	61f9      	str	r1, [r7, #28]
 8004a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	09db      	lsrs	r3, r3, #7
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b7f      	cmp	r3, #127	; 0x7f
 8004a66:	d8f0      	bhi.n	8004a4a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	61fa      	str	r2, [r7, #28]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004a78:	2206      	movs	r2, #6
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	6938      	ldr	r0, [r7, #16]
 8004a7e:	f7ff fa6d 	bl	8003f5c <_SendPacket>
  RECORD_END();
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f383 8811 	msr	BASEPRI, r3
}
 8004a88:	bf00      	nop
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20019744 	.word	0x20019744
 8004a94:	20019714 	.word	0x20019714

08004a98 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08c      	sub	sp, #48	; 0x30
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	; (8004b90 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d06d      	beq.n	8004b86 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004aaa:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab4:	e008      	b.n	8004ac8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3f2      	bcc.n	8004ab6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004ad0:	e000      	b.n	8004ad4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004ad2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d055      	beq.n	8004b86 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ada:	f3ef 8311 	mrs	r3, BASEPRI
 8004ade:	f04f 0120 	mov.w	r1, #32
 8004ae2:	f381 8811 	msr	BASEPRI, r1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	482a      	ldr	r0, [pc, #168]	; (8004b94 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004aea:	f7ff f946 	bl	8003d7a <_PreparePacket>
 8004aee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	623b      	str	r3, [r7, #32]
 8004afc:	e00b      	b.n	8004b16 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	1c59      	adds	r1, r3, #1
 8004b06:	6279      	str	r1, [r7, #36]	; 0x24
 8004b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b7f      	cmp	r3, #127	; 0x7f
 8004b1a:	d8f0      	bhi.n	8004afe <SEGGER_SYSVIEW_SendModule+0x66>
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	627a      	str	r2, [r7, #36]	; 0x24
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e00b      	b.n	8004b50 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	61f9      	str	r1, [r7, #28]
 8004b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b7f      	cmp	r3, #127	; 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	61fa      	str	r2, [r7, #28]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2280      	movs	r2, #128	; 0x80
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff f8b6 	bl	8003ce0 <_EncodeStr>
 8004b74:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004b76:	2216      	movs	r2, #22
 8004b78:	68f9      	ldr	r1, [r7, #12]
 8004b7a:	6938      	ldr	r0, [r7, #16]
 8004b7c:	f7ff f9ee 	bl	8003f5c <_SendPacket>
      RECORD_END();
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004b86:	bf00      	nop
 8004b88:	3730      	adds	r7, #48	; 0x30
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	2001973c 	.word	0x2001973c
 8004b94:	20019744 	.word	0x20019744

08004b98 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f2      	bne.n	8004bac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2001973c 	.word	0x2001973c

08004bd4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004bda:	f3ef 8311 	mrs	r3, BASEPRI
 8004bde:	f04f 0120 	mov.w	r1, #32
 8004be2:	f381 8811 	msr	BASEPRI, r1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	4817      	ldr	r0, [pc, #92]	; (8004c48 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004bea:	f7ff f8c6 	bl	8003d7a <_PreparePacket>
 8004bee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e00b      	b.n	8004c18 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	6179      	str	r1, [r7, #20]
 8004c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	09db      	lsrs	r3, r3, #7
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1c:	d8f0      	bhi.n	8004c00 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	617a      	str	r2, [r7, #20]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004c2e:	221b      	movs	r2, #27
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	f7ff f992 	bl	8003f5c <_SendPacket>
  RECORD_END();
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20019744 	.word	0x20019744
 8004c4c:	20019740 	.word	0x20019740

08004c50 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c58:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5c:	f04f 0120 	mov.w	r1, #32
 8004c60:	f381 8811 	msr	BASEPRI, r1
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	4827      	ldr	r0, [pc, #156]	; (8004d04 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004c68:	f7ff f887 	bl	8003d7a <_PreparePacket>
 8004c6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c6e:	2280      	movs	r2, #128	; 0x80
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	6938      	ldr	r0, [r7, #16]
 8004c74:	f7ff f834 	bl	8003ce0 <_EncodeStr>
 8004c78:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	2301      	movs	r3, #1
 8004c80:	623b      	str	r3, [r7, #32]
 8004c82:	e00b      	b.n	8004c9c <SEGGER_SYSVIEW_Warn+0x4c>
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	6279      	str	r1, [r7, #36]	; 0x24
 8004c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	09db      	lsrs	r3, r3, #7
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca0:	d8f0      	bhi.n	8004c84 <SEGGER_SYSVIEW_Warn+0x34>
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e00b      	b.n	8004cd4 <SEGGER_SYSVIEW_Warn+0x84>
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	61f9      	str	r1, [r7, #28]
 8004cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd8:	d8f0      	bhi.n	8004cbc <SEGGER_SYSVIEW_Warn+0x6c>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	61fa      	str	r2, [r7, #28]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004cea:	221a      	movs	r2, #26
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	6938      	ldr	r0, [r7, #16]
 8004cf0:	f7ff f934 	bl	8003f5c <_SendPacket>
  RECORD_END();
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f383 8811 	msr	BASEPRI, r3
}
 8004cfa:	bf00      	nop
 8004cfc:	3728      	adds	r7, #40	; 0x28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20019744 	.word	0x20019744

08004d08 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004d0e:	7e1b      	ldrb	r3, [r3, #24]
 8004d10:	4619      	mov	r1, r3
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004d14:	460b      	mov	r3, r1
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	440b      	add	r3, r1
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	336c      	adds	r3, #108	; 0x6c
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004d24:	7e1b      	ldrb	r3, [r3, #24]
 8004d26:	4618      	mov	r0, r3
 8004d28:	490d      	ldr	r1, [pc, #52]	; (8004d60 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4403      	add	r3, r0
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	440b      	add	r3, r1
 8004d34:	3370      	adds	r3, #112	; 0x70
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d00b      	beq.n	8004d54 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004d3e:	789b      	ldrb	r3, [r3, #2]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d4a:	f7ff f823 	bl	8003d94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20019714 	.word	0x20019714
 8004d60:	2001925c 	.word	0x2001925c

08004d64 <memcmp>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	3901      	subs	r1, #1
 8004d68:	4402      	add	r2, r0
 8004d6a:	4290      	cmp	r0, r2
 8004d6c:	d101      	bne.n	8004d72 <memcmp+0xe>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e005      	b.n	8004d7e <memcmp+0x1a>
 8004d72:	7803      	ldrb	r3, [r0, #0]
 8004d74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d001      	beq.n	8004d80 <memcmp+0x1c>
 8004d7c:	1b18      	subs	r0, r3, r4
 8004d7e:	bd10      	pop	{r4, pc}
 8004d80:	3001      	adds	r0, #1
 8004d82:	e7f2      	b.n	8004d6a <memcmp+0x6>

08004d84 <memset>:
 8004d84:	4402      	add	r2, r0
 8004d86:	4603      	mov	r3, r0
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d100      	bne.n	8004d8e <memset+0xa>
 8004d8c:	4770      	bx	lr
 8004d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d92:	e7f9      	b.n	8004d88 <memset+0x4>

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4d0d      	ldr	r5, [pc, #52]	; (8004dcc <__libc_init_array+0x38>)
 8004d98:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	2600      	movs	r6, #0
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	4d0b      	ldr	r5, [pc, #44]	; (8004dd4 <__libc_init_array+0x40>)
 8004da6:	4c0c      	ldr	r4, [pc, #48]	; (8004dd8 <__libc_init_array+0x44>)
 8004da8:	f000 f826 	bl	8004df8 <_init>
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	2600      	movs	r6, #0
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	08004ee8 	.word	0x08004ee8
 8004dd0:	08004ee8 	.word	0x08004ee8
 8004dd4:	08004ee8 	.word	0x08004ee8
 8004dd8:	08004eec 	.word	0x08004eec

08004ddc <memcpy>:
 8004ddc:	440a      	add	r2, r1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xc>
 8004de6:	4770      	bx	lr
 8004de8:	b510      	push	{r4, lr}
 8004dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df2:	4291      	cmp	r1, r2
 8004df4:	d1f9      	bne.n	8004dea <memcpy+0xe>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
