
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007804  08007804  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800780c  0800780c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000625c  20000060  08007874  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200062bc  08007874  000262bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8c5  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b32  00000000  00000000  0003c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  000404d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a3  00000000  00000000  00041cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ce7  00000000  00000000  00042f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d71  00000000  00000000  00047c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ef19  00000000  00000000  000619d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a9c  00000000  00000000  001008ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00107388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007680 	.word	0x08007680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007680 	.word	0x08007680

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20004ba0 	.word	0x20004ba0
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb49 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f857 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f8e7 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8bb 	bl	80007a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // enable the CYCCNT counter
  //DWT_CYCCNT = (0<<0);
  DWT_CTRL |= (1<<0);
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <main+0x94>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <main+0x94>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]




  SEGGER_SYSVIEW_Conf();
 800063e:	f004 fdeb 	bl	8005218 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000642:	f005 ff57 	bl	80064f4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate( task1_handler,
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0x98>)
 8000650:	22c8      	movs	r2, #200	; 0xc8
 8000652:	4919      	ldr	r1, [pc, #100]	; (80006b8 <main+0x9c>)
 8000654:	4819      	ldr	r0, [pc, #100]	; (80006bc <main+0xa0>)
 8000656:	f002 ff6a 	bl	800352e <xTaskCreate>
 800065a:	60f8      	str	r0, [r7, #12]
                          200,
                          "Hello world from Task-1",
                          2,
						  &task1_handle
                        );
  configASSERT(status == pdPASS);
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d00a      	beq.n	8000678 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000666:	f383 8811 	msr	BASEPRI, r3
 800066a:	f3bf 8f6f 	isb	sy
 800066e:	f3bf 8f4f 	dsb	sy
 8000672:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000674:	bf00      	nop
 8000676:	e7fe      	b.n	8000676 <main+0x5a>
  status = xTaskCreate( task2_handler,
 8000678:	463b      	mov	r3, r7
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2302      	movs	r3, #2
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <main+0xa4>)
 8000682:	22c8      	movs	r2, #200	; 0xc8
 8000684:	490f      	ldr	r1, [pc, #60]	; (80006c4 <main+0xa8>)
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <main+0xac>)
 8000688:	f002 ff51 	bl	800352e <xTaskCreate>
 800068c:	60f8      	str	r0, [r7, #12]
                            200,
                            "Hello world from Task-2",
                            2,
  						  &task2_handle
                          );
  configASSERT(status = pdPASS);
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000692:	f003 f8db 	bl	800384c <vTaskStartScheduler>
  //insufficient memory in heap

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000696:	f002 f821 	bl	80026dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800069a:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <main+0xb0>)
 800069c:	2100      	movs	r1, #0
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <main+0xb4>)
 80006a0:	f002 f866 	bl	8002770 <osThreadNew>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <main+0xb8>)
 80006a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006aa:	f002 f83b 	bl	8002724 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <main+0x92>
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	080076a4 	.word	0x080076a4
 80006b8:	080076bc 	.word	0x080076bc
 80006bc:	080008d9 	.word	0x080008d9
 80006c0:	080076c4 	.word	0x080076c4
 80006c4:	080076dc 	.word	0x080076dc
 80006c8:	08000901 	.word	0x08000901
 80006cc:	08007770 	.word	0x08007770
 80006d0:	08000929 	.word	0x08000929
 80006d4:	200000c0 	.word	0x200000c0

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 faf0 	bl	8006ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xc8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <SystemClock_Config+0xc8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <SystemClock_Config+0xc8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SystemClock_Config+0xcc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <SystemClock_Config+0xcc>)
 8000722:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <SystemClock_Config+0xcc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800074c:	2354      	movs	r3, #84	; 0x54
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fd6d 	bl	800123c <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000768:	f000 f8f8 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 ffcf 	bl	800172c <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000794:	f000 f8e2 	bl	800095c <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART2_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f001 fc76 	bl	80020d0 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f8b7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000007c 	.word	0x2000007c
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2c      	ldr	r2, [pc, #176]	; (80008cc <MX_GPIO_Init+0xd0>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <MX_GPIO_Init+0xd4>)
 8000888:	f000 fcbe 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000892:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0xd8>)
 80008a4:	f000 fb2c 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a8:	2320      	movs	r3, #32
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xd4>)
 80008c0:	f000 fb1e 	bl	8000f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters ){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09c      	sub	sp, #112	; 0x70
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){

		snprintf(msg,100,"%s\n", (char*)parameters);
 80008e0:	f107 000c 	add.w	r0, r7, #12
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <task1_handler+0x24>)
 80008e8:	2164      	movs	r1, #100	; 0x64
 80008ea:	f006 f9bb 	bl	8006c64 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	4618      	mov	r0, r3
 80008f4:	f006 f9a2 	bl	8006c3c <SEGGER_SYSVIEW_PrintfTarget>
	while(1){
 80008f8:	e7f2      	b.n	80008e0 <task1_handler+0x8>
 80008fa:	bf00      	nop
 80008fc:	080076e4 	.word	0x080076e4

08000900 <task2_handler>:
		//taskYIELD();
	}
}
static void task2_handler(void* parameters ){
 8000900:	b580      	push	{r7, lr}
 8000902:	b09c      	sub	sp, #112	; 0x70
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000908:	f107 000c 	add.w	r0, r7, #12
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <task2_handler+0x24>)
 8000910:	2164      	movs	r1, #100	; 0x64
 8000912:	f006 f9a7 	bl	8006c64 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4618      	mov	r0, r3
 800091c:	f006 f98e 	bl	8006c3c <SEGGER_SYSVIEW_PrintfTarget>
	while(1){
 8000920:	e7f2      	b.n	8000908 <task2_handler+0x8>
 8000922:	bf00      	nop
 8000924:	080076e4 	.word	0x080076e4

08000928 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f001 ffaf 	bl	8002894 <osDelay>
 8000936:	e7fb      	b.n	8000930 <StartDefaultTask+0x8>

08000938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094a:	f000 f9d7 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40000800 	.word	0x40000800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <HAL_MspInit+0x58>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_MspInit+0x58>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x58>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x58>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_MspInit+0x58>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x58>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	210f      	movs	r1, #15
 80009f2:	f06f 0001 	mvn.w	r0, #1
 80009f6:	f000 fa59 	bl	8000eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
   //vInitPrioGroupValue();
  NVIC_SetPriorityGrouping( 0 );
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff ffb4 	bl	8000968 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a66:	230c      	movs	r3, #12
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a76:	2307      	movs	r3, #7
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a82:	f000 fa3d 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <HAL_InitTick+0xe4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <HAL_InitTick+0xe4>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <HAL_InitTick+0xe4>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac8:	f107 0210 	add.w	r2, r7, #16
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f84a 	bl	8001b6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae2:	f001 f81b 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8000ae6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ae8:	e004      	b.n	8000af4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aea:	f001 f817 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8000aee:	4603      	mov	r3, r0
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <HAL_InitTick+0xe8>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	0c9b      	lsrs	r3, r3, #18
 8000afe:	3b01      	subs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <HAL_InitTick+0xec>)
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <HAL_InitTick+0xf0>)
 8000b06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_InitTick+0xec>)
 8000b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_InitTick+0xec>)
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_InitTick+0xec>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_InitTick+0xec>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_InitTick+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000b28:	4817      	ldr	r0, [pc, #92]	; (8000b88 <HAL_InitTick+0xec>)
 8000b2a:	f001 f851 	bl	8001bd0 <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11b      	bne.n	8000b74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <HAL_InitTick+0xec>)
 8000b3e:	f001 f8a1 	bl	8001c84 <HAL_TIM_Base_Start_IT>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d111      	bne.n	8000b74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b50:	201e      	movs	r0, #30
 8000b52:	f000 f9c7 	bl	8000ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d808      	bhi.n	8000b6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	201e      	movs	r0, #30
 8000b62:	f000 f9a3 	bl	8000eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <HAL_InitTick+0xf4>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e002      	b.n	8000b74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3738      	adds	r7, #56	; 0x38
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	200000c4 	.word	0x200000c4
 8000b8c:	40000800 	.word	0x40000800
 8000b90:	20000004 	.word	0x20000004

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM4_IRQHandler+0x10>)
 8000bc6:	f001 f8bf 	bl	8001d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000c4 	.word	0x200000c4

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f006 f8c0 	bl	8006d88 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	2000010c 	.word	0x2000010c
 8000c3c:	200062c0 	.word	0x200062c0

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f006 f87f 	bl	8006d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fcc1 	bl	800061c <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ca8:	08007814 	.word	0x08007814
  ldr r2, =_sbss
 8000cac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cb0:	200062bc 	.word	0x200062bc

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8d8 	bl	8000e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f7ff fed8 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe60 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000110 	.word	0x20000110

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000110 	.word	0x20000110

08000d3c <__NVIC_SetPriorityGrouping>:
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff4c 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebe:	f7ff ff61 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f7ff ffb1 	bl	8000e30 <NVIC_EncodePriority>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff80 	bl	8000ddc <__NVIC_SetPriority>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff54 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e159      	b.n	80011d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8148 	bne.w	80011ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80a2 	beq.w	80011ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b57      	ldr	r3, [pc, #348]	; (80011e8 <HAL_GPIO_Init+0x2e8>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a56      	ldr	r2, [pc, #344]	; (80011e8 <HAL_GPIO_Init+0x2e8>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b54      	ldr	r3, [pc, #336]	; (80011e8 <HAL_GPIO_Init+0x2e8>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a52      	ldr	r2, [pc, #328]	; (80011ec <HAL_GPIO_Init+0x2ec>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a49      	ldr	r2, [pc, #292]	; (80011f0 <HAL_GPIO_Init+0x2f0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x202>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <HAL_GPIO_Init+0x2f4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x1fe>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <HAL_GPIO_Init+0x2f8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x1fa>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a46      	ldr	r2, [pc, #280]	; (80011fc <HAL_GPIO_Init+0x2fc>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x1f6>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a45      	ldr	r2, [pc, #276]	; (8001200 <HAL_GPIO_Init+0x300>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x1f2>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e008      	b.n	8001104 <HAL_GPIO_Init+0x204>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x204>
 80010f6:	2303      	movs	r3, #3
 80010f8:	e004      	b.n	8001104 <HAL_GPIO_Init+0x204>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e002      	b.n	8001104 <HAL_GPIO_Init+0x204>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <HAL_GPIO_Init+0x204>
 8001102:	2300      	movs	r3, #0
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	f002 0203 	and.w	r2, r2, #3
 800110a:	0092      	lsls	r2, r2, #2
 800110c:	4093      	lsls	r3, r2
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001114:	4935      	ldr	r1, [pc, #212]	; (80011ec <HAL_GPIO_Init+0x2ec>)
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	3302      	adds	r3, #2
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <HAL_GPIO_Init+0x304>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a2f      	ldr	r2, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x304>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <HAL_GPIO_Init+0x304>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_GPIO_Init+0x304>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <HAL_GPIO_Init+0x304>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119a:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_GPIO_Init+0x304>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3301      	adds	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	f67f aea2 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40021000 	.word	0x40021000
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e267      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	4b88      	ldr	r3, [pc, #544]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00c      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4b85      	ldr	r3, [pc, #532]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e242      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b76      	ldr	r3, [pc, #472]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a75      	ldr	r2, [pc, #468]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6f      	ldr	r2, [pc, #444]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6d      	ldr	r3, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b69      	ldr	r3, [pc, #420]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a68      	ldr	r2, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fd16 	bl	8000d24 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fd12 	bl	8000d24 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e207      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fd02 	bl	8000d24 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fcfe 	bl	8000d24 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1f3      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	4b4a      	ldr	r3, [pc, #296]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c7      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4937      	ldr	r1, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x240>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fcb7 	bl	8000d24 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fcb3 	bl	8000d24 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a8      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4925      	ldr	r1, [pc, #148]	; (800147c <HAL_RCC_OscConfig+0x240>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x244>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc96 	bl	8000d24 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc92 	bl	8000d24 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e187      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d036      	beq.n	8001494 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc76 	bl	8000d24 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fc72 	bl	8000d24 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e167      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x240>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 800145a:	e01b      	b.n	8001494 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_RCC_OscConfig+0x248>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fc5f 	bl	8000d24 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e00e      	b.n	8001488 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fc5b 	bl	8000d24 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d907      	bls.n	8001488 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e150      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 800147c:	40023800 	.word	0x40023800
 8001480:	42470000 	.word	0x42470000
 8001484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ea      	bne.n	800146a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8097 	beq.w	80015d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b81      	ldr	r3, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b7d      	ldr	r3, [pc, #500]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a7c      	ldr	r2, [pc, #496]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b7a      	ldr	r3, [pc, #488]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a73      	ldr	r2, [pc, #460]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc1b 	bl	8000d24 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fc17 	bl	8000d24 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e10c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x474>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x2ea>
 8001518:	4b64      	ldr	r3, [pc, #400]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x30c>
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a5e      	ldr	r2, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a5b      	ldr	r2, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x324>
 8001548:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fbdc 	bl	8000d24 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff fbd8 	bl	8000d24 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e0cb      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ee      	beq.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fbc6 	bl	8000d24 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff fbc2 	bl	8000d24 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0b5      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c4:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a1 	beq.w	800171c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d05c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d141      	bne.n	8001672 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb96 	bl	8000d24 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fb92 	bl	8000d24 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e087      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	3b01      	subs	r3, #1
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb6b 	bl	8000d24 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fb67 	bl	8000d24 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e05c      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x416>
 8001670:	e054      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x478>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb54 	bl	8000d24 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb50 	bl	8000d24 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e045      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x470>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
 800169e:	e03d      	b.n	800171c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e038      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa82 	bl	8000d24 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fa7e 	bl	8000d24 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f8e2 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08007794 	.word	0x08007794
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018fc:	b094      	sub	sp, #80	; 0x50
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
 8001904:	2300      	movs	r3, #0
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001908:	2300      	movs	r3, #0
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80e1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e0db      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b73      	ldr	r3, [pc, #460]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001930:	e0db      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b73      	ldr	r3, [pc, #460]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001936:	e0d8      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001942:	4b6d      	ldr	r3, [pc, #436]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d063      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	2200      	movs	r2, #0
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
 8001958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800195a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
 8001966:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6139      	str	r1, [r7, #16]
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800199c:	4659      	mov	r1, fp
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4651      	mov	r1, sl
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4651      	mov	r1, sl
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4651      	mov	r1, sl
 80019ac:	ebb2 0801 	subs.w	r8, r2, r1
 80019b0:	4659      	mov	r1, fp
 80019b2:	eb63 0901 	sbc.w	r9, r3, r1
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	eb18 0303 	adds.w	r3, r8, r3
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	462b      	mov	r3, r5
 80019d8:	eb49 0303 	adc.w	r3, r9, r3
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ea:	4629      	mov	r1, r5
 80019ec:	024b      	lsls	r3, r1, #9
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f4:	4621      	mov	r1, r4
 80019f6:	024a      	lsls	r2, r1, #9
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fe:	2200      	movs	r2, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a08:	f7fe fc8a 	bl	8000320 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a14:	e058      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	4611      	mov	r1, r2
 8001a22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a30:	4642      	mov	r2, r8
 8001a32:	464b      	mov	r3, r9
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0159      	lsls	r1, r3, #5
 8001a3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a42:	0150      	lsls	r0, r2, #5
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4641      	mov	r1, r8
 8001a4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a4e:	4649      	mov	r1, r9
 8001a50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a68:	ebb2 040a 	subs.w	r4, r2, sl
 8001a6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	61fa      	str	r2, [r7, #28]
 8001ab8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001abc:	f7fe fc30 	bl	8000320 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3750      	adds	r7, #80	; 0x50
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	080077a4 	.word	0x080077a4

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	080077a4 	.word	0x080077a4

08001b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	220f      	movs	r2, #15
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	08db      	lsrs	r3, r3, #3
 8001ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <HAL_RCC_GetClockConfig+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40023c00 	.word	0x40023c00

08001bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f839 	bl	8001c6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 f9ca 	bl	8001fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d001      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e044      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc6:	d013      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1a      	ldr	r2, [pc, #104]	; (8001d38 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_TIM_Base_Start_IT+0xb8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d111      	bne.n	8001d14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d010      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	e007      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40014000 	.word	0x40014000

08001d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0202 	mvn.w	r2, #2
 8001d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8ee 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8e0 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8f1 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0204 	mvn.w	r2, #4
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8c4 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8b6 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8c7 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0208 	mvn.w	r2, #8
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f89a 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f88c 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f89d 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0210 	mvn.w	r2, #16
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2208      	movs	r2, #8
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f870 	bl	8001f6c <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f862 	bl	8001f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f873 	bl	8001f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0201 	mvn.w	r2, #1
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fd36 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8e2 	bl	80020bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f838 	bl	8001f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0220 	mvn.w	r2, #32
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8ac 	bl	80020a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a34      	ldr	r2, [pc, #208]	; (800208c <TIM_Base_SetConfig+0xe4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00f      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc6:	d00b      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <TIM_Base_SetConfig+0xe8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a30      	ldr	r2, [pc, #192]	; (8002094 <TIM_Base_SetConfig+0xec>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <TIM_Base_SetConfig+0xf0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d108      	bne.n	8001ff2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <TIM_Base_SetConfig+0xe4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01b      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d017      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a22      	ldr	r2, [pc, #136]	; (8002090 <TIM_Base_SetConfig+0xe8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <TIM_Base_SetConfig+0xec>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00f      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <TIM_Base_SetConfig+0xf0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00b      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <TIM_Base_SetConfig+0xf4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <TIM_Base_SetConfig+0xf8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <TIM_Base_SetConfig+0xfc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d108      	bne.n	8002044 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <TIM_Base_SetConfig+0xe4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d103      	bne.n	8002078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000
 8002090:	40000400 	.word	0x40000400
 8002094:	40000800 	.word	0x40000800
 8002098:	40000c00 	.word	0x40000c00
 800209c:	40014000 	.word	0x40014000
 80020a0:	40014400 	.word	0x40014400
 80020a4:	40014800 	.word	0x40014800

080020a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e03f      	b.n	8002162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe fc88 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f829 	bl	800216c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800216c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002170:	b0c0      	sub	sp, #256	; 0x100
 8002172:	af00      	add	r7, sp, #0
 8002174:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002188:	68d9      	ldr	r1, [r3, #12]
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	ea40 0301 	orr.w	r3, r0, r1
 8002194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021c4:	f021 010c 	bic.w	r1, r1, #12
 80021c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021d2:	430b      	orrs	r3, r1
 80021d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e6:	6999      	ldr	r1, [r3, #24]
 80021e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	ea40 0301 	orr.w	r3, r0, r1
 80021f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b8f      	ldr	r3, [pc, #572]	; (8002438 <UART_SetConfig+0x2cc>)
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d005      	beq.n	800220c <UART_SetConfig+0xa0>
 8002200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b8d      	ldr	r3, [pc, #564]	; (800243c <UART_SetConfig+0x2d0>)
 8002208:	429a      	cmp	r2, r3
 800220a:	d104      	bne.n	8002216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800220c:	f7ff fc9a 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002210:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002214:	e003      	b.n	800221e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002216:	f7ff fc81 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 800221a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002228:	f040 810c 	bne.w	8002444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800222c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002230:	2200      	movs	r2, #0
 8002232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002236:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800223a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800223e:	4622      	mov	r2, r4
 8002240:	462b      	mov	r3, r5
 8002242:	1891      	adds	r1, r2, r2
 8002244:	65b9      	str	r1, [r7, #88]	; 0x58
 8002246:	415b      	adcs	r3, r3
 8002248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800224a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800224e:	4621      	mov	r1, r4
 8002250:	eb12 0801 	adds.w	r8, r2, r1
 8002254:	4629      	mov	r1, r5
 8002256:	eb43 0901 	adc.w	r9, r3, r1
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800226a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800226e:	4690      	mov	r8, r2
 8002270:	4699      	mov	r9, r3
 8002272:	4623      	mov	r3, r4
 8002274:	eb18 0303 	adds.w	r3, r8, r3
 8002278:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800227c:	462b      	mov	r3, r5
 800227e:	eb49 0303 	adc.w	r3, r9, r3
 8002282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002292:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800229a:	460b      	mov	r3, r1
 800229c:	18db      	adds	r3, r3, r3
 800229e:	653b      	str	r3, [r7, #80]	; 0x50
 80022a0:	4613      	mov	r3, r2
 80022a2:	eb42 0303 	adc.w	r3, r2, r3
 80022a6:	657b      	str	r3, [r7, #84]	; 0x54
 80022a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80022b0:	f7fe f836 	bl	8000320 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <UART_SetConfig+0x2d4>)
 80022ba:	fba3 2302 	umull	r2, r3, r3, r2
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	011c      	lsls	r4, r3, #4
 80022c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c6:	2200      	movs	r2, #0
 80022c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	1891      	adds	r1, r2, r2
 80022da:	64b9      	str	r1, [r7, #72]	; 0x48
 80022dc:	415b      	adcs	r3, r3
 80022de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022e4:	4641      	mov	r1, r8
 80022e6:	eb12 0a01 	adds.w	sl, r2, r1
 80022ea:	4649      	mov	r1, r9
 80022ec:	eb43 0b01 	adc.w	fp, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002304:	4692      	mov	sl, r2
 8002306:	469b      	mov	fp, r3
 8002308:	4643      	mov	r3, r8
 800230a:	eb1a 0303 	adds.w	r3, sl, r3
 800230e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002312:	464b      	mov	r3, r9
 8002314:	eb4b 0303 	adc.w	r3, fp, r3
 8002318:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002328:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800232c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002330:	460b      	mov	r3, r1
 8002332:	18db      	adds	r3, r3, r3
 8002334:	643b      	str	r3, [r7, #64]	; 0x40
 8002336:	4613      	mov	r3, r2
 8002338:	eb42 0303 	adc.w	r3, r2, r3
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
 800233e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002346:	f7fd ffeb 	bl	8000320 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4611      	mov	r1, r2
 8002350:	4b3b      	ldr	r3, [pc, #236]	; (8002440 <UART_SetConfig+0x2d4>)
 8002352:	fba3 2301 	umull	r2, r3, r3, r1
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2264      	movs	r2, #100	; 0x64
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	1acb      	subs	r3, r1, r3
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <UART_SetConfig+0x2d4>)
 8002368:	fba3 2302 	umull	r2, r3, r3, r2
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002374:	441c      	add	r4, r3
 8002376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800237a:	2200      	movs	r2, #0
 800237c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002380:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002388:	4642      	mov	r2, r8
 800238a:	464b      	mov	r3, r9
 800238c:	1891      	adds	r1, r2, r2
 800238e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002390:	415b      	adcs	r3, r3
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002398:	4641      	mov	r1, r8
 800239a:	1851      	adds	r1, r2, r1
 800239c:	6339      	str	r1, [r7, #48]	; 0x30
 800239e:	4649      	mov	r1, r9
 80023a0:	414b      	adcs	r3, r1
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80023b0:	4659      	mov	r1, fp
 80023b2:	00cb      	lsls	r3, r1, #3
 80023b4:	4651      	mov	r1, sl
 80023b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ba:	4651      	mov	r1, sl
 80023bc:	00ca      	lsls	r2, r1, #3
 80023be:	4610      	mov	r0, r2
 80023c0:	4619      	mov	r1, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	4642      	mov	r2, r8
 80023c6:	189b      	adds	r3, r3, r2
 80023c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023cc:	464b      	mov	r3, r9
 80023ce:	460a      	mov	r2, r1
 80023d0:	eb42 0303 	adc.w	r3, r2, r3
 80023d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023ec:	460b      	mov	r3, r1
 80023ee:	18db      	adds	r3, r3, r3
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f2:	4613      	mov	r3, r2
 80023f4:	eb42 0303 	adc.w	r3, r2, r3
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002402:	f7fd ff8d 	bl	8000320 <__aeabi_uldivmod>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <UART_SetConfig+0x2d4>)
 800240c:	fba3 1302 	umull	r1, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	2164      	movs	r1, #100	; 0x64
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	3332      	adds	r3, #50	; 0x32
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <UART_SetConfig+0x2d4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	f003 0207 	and.w	r2, r3, #7
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4422      	add	r2, r4
 8002432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002434:	e106      	b.n	8002644 <UART_SetConfig+0x4d8>
 8002436:	bf00      	nop
 8002438:	40011000 	.word	0x40011000
 800243c:	40011400 	.word	0x40011400
 8002440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002448:	2200      	movs	r2, #0
 800244a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800244e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002456:	4642      	mov	r2, r8
 8002458:	464b      	mov	r3, r9
 800245a:	1891      	adds	r1, r2, r2
 800245c:	6239      	str	r1, [r7, #32]
 800245e:	415b      	adcs	r3, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002466:	4641      	mov	r1, r8
 8002468:	1854      	adds	r4, r2, r1
 800246a:	4649      	mov	r1, r9
 800246c:	eb43 0501 	adc.w	r5, r3, r1
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	00eb      	lsls	r3, r5, #3
 800247a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800247e:	00e2      	lsls	r2, r4, #3
 8002480:	4614      	mov	r4, r2
 8002482:	461d      	mov	r5, r3
 8002484:	4643      	mov	r3, r8
 8002486:	18e3      	adds	r3, r4, r3
 8002488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800248c:	464b      	mov	r3, r9
 800248e:	eb45 0303 	adc.w	r3, r5, r3
 8002492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024b2:	4629      	mov	r1, r5
 80024b4:	008b      	lsls	r3, r1, #2
 80024b6:	4621      	mov	r1, r4
 80024b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024bc:	4621      	mov	r1, r4
 80024be:	008a      	lsls	r2, r1, #2
 80024c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024c4:	f7fd ff2c 	bl	8000320 <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4b60      	ldr	r3, [pc, #384]	; (8002650 <UART_SetConfig+0x4e4>)
 80024ce:	fba3 2302 	umull	r2, r3, r3, r2
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	011c      	lsls	r4, r3, #4
 80024d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024da:	2200      	movs	r2, #0
 80024dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024e8:	4642      	mov	r2, r8
 80024ea:	464b      	mov	r3, r9
 80024ec:	1891      	adds	r1, r2, r2
 80024ee:	61b9      	str	r1, [r7, #24]
 80024f0:	415b      	adcs	r3, r3
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f8:	4641      	mov	r1, r8
 80024fa:	1851      	adds	r1, r2, r1
 80024fc:	6139      	str	r1, [r7, #16]
 80024fe:	4649      	mov	r1, r9
 8002500:	414b      	adcs	r3, r1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002510:	4659      	mov	r1, fp
 8002512:	00cb      	lsls	r3, r1, #3
 8002514:	4651      	mov	r1, sl
 8002516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800251a:	4651      	mov	r1, sl
 800251c:	00ca      	lsls	r2, r1, #3
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	4603      	mov	r3, r0
 8002524:	4642      	mov	r2, r8
 8002526:	189b      	adds	r3, r3, r2
 8002528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800252c:	464b      	mov	r3, r9
 800252e:	460a      	mov	r2, r1
 8002530:	eb42 0303 	adc.w	r3, r2, r3
 8002534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	67bb      	str	r3, [r7, #120]	; 0x78
 8002542:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002550:	4649      	mov	r1, r9
 8002552:	008b      	lsls	r3, r1, #2
 8002554:	4641      	mov	r1, r8
 8002556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800255a:	4641      	mov	r1, r8
 800255c:	008a      	lsls	r2, r1, #2
 800255e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002562:	f7fd fedd 	bl	8000320 <__aeabi_uldivmod>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4611      	mov	r1, r2
 800256c:	4b38      	ldr	r3, [pc, #224]	; (8002650 <UART_SetConfig+0x4e4>)
 800256e:	fba3 2301 	umull	r2, r3, r3, r1
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2264      	movs	r2, #100	; 0x64
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	1acb      	subs	r3, r1, r3
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	3332      	adds	r3, #50	; 0x32
 8002580:	4a33      	ldr	r2, [pc, #204]	; (8002650 <UART_SetConfig+0x4e4>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800258c:	441c      	add	r4, r3
 800258e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002592:	2200      	movs	r2, #0
 8002594:	673b      	str	r3, [r7, #112]	; 0x70
 8002596:	677a      	str	r2, [r7, #116]	; 0x74
 8002598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800259c:	4642      	mov	r2, r8
 800259e:	464b      	mov	r3, r9
 80025a0:	1891      	adds	r1, r2, r2
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	415b      	adcs	r3, r3
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ac:	4641      	mov	r1, r8
 80025ae:	1851      	adds	r1, r2, r1
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	4649      	mov	r1, r9
 80025b4:	414b      	adcs	r3, r1
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025c4:	4659      	mov	r1, fp
 80025c6:	00cb      	lsls	r3, r1, #3
 80025c8:	4651      	mov	r1, sl
 80025ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ce:	4651      	mov	r1, sl
 80025d0:	00ca      	lsls	r2, r1, #3
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	4642      	mov	r2, r8
 80025da:	189b      	adds	r3, r3, r2
 80025dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80025de:	464b      	mov	r3, r9
 80025e0:	460a      	mov	r2, r1
 80025e2:	eb42 0303 	adc.w	r3, r2, r3
 80025e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
 80025f2:	667a      	str	r2, [r7, #100]	; 0x64
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002600:	4649      	mov	r1, r9
 8002602:	008b      	lsls	r3, r1, #2
 8002604:	4641      	mov	r1, r8
 8002606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800260a:	4641      	mov	r1, r8
 800260c:	008a      	lsls	r2, r1, #2
 800260e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002612:	f7fd fe85 	bl	8000320 <__aeabi_uldivmod>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <UART_SetConfig+0x4e4>)
 800261c:	fba3 1302 	umull	r1, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <UART_SetConfig+0x4e4>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4422      	add	r2, r4
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800264a:	46bd      	mov	sp, r7
 800264c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002650:	51eb851f 	.word	0x51eb851f

08002654 <__NVIC_SetPriority>:
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Handler+0x1c>)
 80026ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026b0:	f001 fd3e 	bl	8004130 <xTaskGetSchedulerState>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d001      	beq.n	80026be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026ba:	f002 fb25 	bl	8004d08 <xPortSysTickHandler>
  }
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026cc:	2100      	movs	r1, #0
 80026ce:	f06f 0004 	mvn.w	r0, #4
 80026d2:	f7ff ffbf 	bl	8002654 <__NVIC_SetPriority>
#endif
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e2:	f3ef 8305 	mrs	r3, IPSR
 80026e6:	603b      	str	r3, [r7, #0]
  return(result);
 80026e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026ee:	f06f 0305 	mvn.w	r3, #5
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	e00c      	b.n	8002710 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <osKernelInitialize+0x44>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <osKernelInitialize+0x44>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	e002      	b.n	8002710 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002710:	687b      	ldr	r3, [r7, #4]
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000114 	.word	0x20000114

08002724 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800272a:	f3ef 8305 	mrs	r3, IPSR
 800272e:	603b      	str	r3, [r7, #0]
  return(result);
 8002730:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002736:	f06f 0305 	mvn.w	r3, #5
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	e010      	b.n	8002760 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <osKernelStart+0x48>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d109      	bne.n	800275a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002746:	f7ff ffbf 	bl	80026c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <osKernelStart+0x48>)
 800274c:	2202      	movs	r2, #2
 800274e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002750:	f001 f87c 	bl	800384c <vTaskStartScheduler>
      stat = osOK;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	e002      	b.n	8002760 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002760:	687b      	ldr	r3, [r7, #4]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000114 	.word	0x20000114

08002770 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af04      	add	r7, sp, #16
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002780:	f3ef 8305 	mrs	r3, IPSR
 8002784:	617b      	str	r3, [r7, #20]
  return(result);
 8002786:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002788:	2b00      	cmp	r3, #0
 800278a:	d17e      	bne.n	800288a <osThreadNew+0x11a>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d07b      	beq.n	800288a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002796:	2318      	movs	r3, #24
 8002798:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d045      	beq.n	8002836 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <osThreadNew+0x48>
        name = attr->name;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <osThreadNew+0x6e>
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b38      	cmp	r3, #56	; 0x38
 80027d0:	d805      	bhi.n	80027de <osThreadNew+0x6e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <osThreadNew+0x72>
        return (NULL);
 80027de:	2300      	movs	r3, #0
 80027e0:	e054      	b.n	800288c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00e      	beq.n	8002818 <osThreadNew+0xa8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2ba7      	cmp	r3, #167	; 0xa7
 8002800:	d90a      	bls.n	8002818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <osThreadNew+0xa8>
        mem = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e010      	b.n	800283a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10c      	bne.n	800283a <osThreadNew+0xca>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <osThreadNew+0xca>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <osThreadNew+0xca>
          mem = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e001      	b.n	800283a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d110      	bne.n	8002862 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002848:	9202      	str	r2, [sp, #8]
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6a3a      	ldr	r2, [r7, #32]
 8002854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fe0c 	bl	8003474 <xTaskCreateStatic>
 800285c:	4603      	mov	r3, r0
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e013      	b.n	800288a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d110      	bne.n	800288a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	b29a      	uxth	r2, r3
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fe57 	bl	800352e <xTaskCreate>
 8002880:	4603      	mov	r3, r0
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <osThreadNew+0x11a>
            hTask = NULL;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800288a:	693b      	ldr	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800289c:	f3ef 8305 	mrs	r3, IPSR
 80028a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80028a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <osDelay+0x1c>
    stat = osErrorISR;
 80028a8:	f06f 0305 	mvn.w	r3, #5
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	e007      	b.n	80028c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 ff92 	bl	80037e4 <vTaskDelay>
    }
  }

  return (stat);
 80028c0:	68fb      	ldr	r3, [r7, #12]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80028dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4a06      	ldr	r2, [pc, #24]	; (80028fc <vApplicationGetIdleTaskMemory+0x30>)
 80028e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000118 	.word	0x20000118
 80028fc:	200001c0 	.word	0x200001c0

08002900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <vApplicationGetTimerTaskMemory+0x2c>)
 8002910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <vApplicationGetTimerTaskMemory+0x30>)
 8002916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	200003c0 	.word	0x200003c0
 8002930:	20000468 	.word	0x20000468

08002934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f103 0208 	add.w	r2, r3, #8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f103 0208 	add.w	r2, r3, #8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f103 0208 	add.w	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e00c      	b.n	8002a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3308      	adds	r3, #8
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e002      	b.n	8002a04 <vListInsert+0x2e>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d2f6      	bcs.n	80029fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6892      	ldr	r2, [r2, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6852      	ldr	r2, [r2, #4]
 8002a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d103      	bne.n	8002a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <xQueueGenericReset+0x2a>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	60bb      	str	r3, [r7, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ac6:	f002 f88d 	bl	8004be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	3b01      	subs	r3, #1
 8002af8:	68f9      	ldr	r1, [r7, #12]
 8002afa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	441a      	add	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d114      	bne.n	8002b46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01a      	beq.n	8002b5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3310      	adds	r3, #16
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 f917 	bl	8003d5c <xTaskRemoveFromEventList>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <xQueueGenericReset+0xcc>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	e009      	b.n	8002b5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3310      	adds	r3, #16
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fef2 	bl	8002934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3324      	adds	r3, #36	; 0x24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff feed 	bl	8002934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b5a:	f002 f873 	bl	8004c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	; 0x38
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <xQueueGenericCreateStatic+0x52>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <xQueueGenericCreateStatic+0x56>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericCreateStatic+0x58>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	623b      	str	r3, [r7, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <xQueueGenericCreateStatic+0x7e>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <xQueueGenericCreateStatic+0x82>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <xQueueGenericCreateStatic+0x84>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61fb      	str	r3, [r7, #28]
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c0a:	2350      	movs	r3, #80	; 0x50
 8002c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b50      	cmp	r3, #80	; 0x50
 8002c12:	d00a      	beq.n	8002c2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61bb      	str	r3, [r7, #24]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00d      	beq.n	8002c52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f805 	bl	8002c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3730      	adds	r7, #48	; 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d103      	bne.n	8002c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e002      	b.n	8002c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	69b8      	ldr	r0, [r7, #24]
 8002c8e:	f7ff ff05 	bl	8002a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericSend+0x32>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <xQueueGenericSend+0x40>
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <xQueueGenericSend+0x44>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <xQueueGenericSend+0x46>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <xQueueGenericSend+0x60>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d103      	bne.n	8002d12 <xQueueGenericSend+0x6e>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <xQueueGenericSend+0x72>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueGenericSend+0x74>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueGenericSend+0x8e>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	623b      	str	r3, [r7, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d32:	f001 f9fd 	bl	8004130 <xTaskGetSchedulerState>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <xQueueGenericSend+0x9e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSend+0xa2>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSend+0xa4>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <xQueueGenericSend+0xbe>
	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	61fb      	str	r3, [r7, #28]
}
 8002d5e:	bf00      	nop
 8002d60:	e7fe      	b.n	8002d60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d62:	f001 ff3f 	bl	8004be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <xQueueGenericSend+0xd4>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d129      	bne.n	8002dcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7e:	f000 fa0b 	bl	8003198 <prvCopyDataToQueue>
 8002d82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	3324      	adds	r3, #36	; 0x24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 ffe3 	bl	8003d5c <xTaskRemoveFromEventList>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <xQueueGenericSend+0x1f8>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	e00a      	b.n	8002dc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <xQueueGenericSend+0x1f8>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002dc4:	f001 ff3e 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e063      	b.n	8002e94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dd2:	f001 ff37 	bl	8004c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e05c      	b.n	8002e94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 f81d 	bl	8003e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dea:	2301      	movs	r3, #1
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dee:	f001 ff29 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002df2:	f000 fd9b 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002df6:	f001 fef5 	bl	8004be4 <vPortEnterCritical>
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d103      	bne.n	8002e10 <xQueueGenericSend+0x16c>
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSend+0x182>
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e26:	f001 ff0d 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e2a:	1d3a      	adds	r2, r7, #4
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f80c 	bl	8003e50 <xTaskCheckForTimeOut>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d124      	bne.n	8002e88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e40:	f000 faa2 	bl	8003388 <prvIsQueueFull>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d018      	beq.n	8002e7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 ff32 	bl	8003cbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e5a:	f000 fa2d 	bl	80032b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e5e:	f000 fd73 	bl	8003948 <xTaskResumeAll>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f af7c 	bne.w	8002d62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <xQueueGenericSend+0x1f8>)
 8002e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	e772      	b.n	8002d62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e7e:	f000 fa1b 	bl	80032b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e82:	f000 fd61 	bl	8003948 <xTaskResumeAll>
 8002e86:	e76c      	b.n	8002d62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e8a:	f000 fa15 	bl	80032b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e8e:	f000 fd5b 	bl	8003948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3738      	adds	r7, #56	; 0x38
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b090      	sub	sp, #64	; 0x40
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <xQueueGenericSendFromISR+0x3c>
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <xQueueGenericSendFromISR+0x40>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <xQueueGenericSendFromISR+0x42>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d103      	bne.n	8002f0a <xQueueGenericSendFromISR+0x6a>
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <xQueueGenericSendFromISR+0x6e>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <xQueueGenericSendFromISR+0x70>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	623b      	str	r3, [r7, #32]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f2a:	f001 ff3d 	bl	8004da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	61fa      	str	r2, [r7, #28]
 8002f44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <xQueueGenericSendFromISR+0xbc>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d12f      	bne.n	8002fbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f72:	f000 f911 	bl	8003198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d112      	bne.n	8002fa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d016      	beq.n	8002fb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	3324      	adds	r3, #36	; 0x24
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fee5 	bl	8003d5c <xTaskRemoveFromEventList>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002faa:	3301      	adds	r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	b25a      	sxtb	r2, r3
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002fba:	e001      	b.n	8002fc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3740      	adds	r7, #64	; 0x40
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	; 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <xQueueReceive+0x30>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	623b      	str	r3, [r7, #32]
}
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <xQueueReceive+0x3e>
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <xQueueReceive+0x42>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <xQueueReceive+0x44>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <xQueueReceive+0x5e>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	61fb      	str	r3, [r7, #28]
}
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003036:	f001 f87b 	bl	8004130 <xTaskGetSchedulerState>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <xQueueReceive+0x6e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <xQueueReceive+0x72>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueReceive+0x74>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueReceive+0x8e>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	61bb      	str	r3, [r7, #24]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003066:	f001 fdbd 	bl	8004be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01f      	beq.n	80030b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307a:	f000 f8f7 	bl	800326c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00f      	beq.n	80030ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003090:	3310      	adds	r3, #16
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe62 	bl	8003d5c <xTaskRemoveFromEventList>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <xQueueReceive+0x1bc>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030ae:	f001 fdc9 	bl	8004c44 <vPortExitCritical>
				return pdPASS;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e069      	b.n	800318a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030bc:	f001 fdc2 	bl	8004c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e062      	b.n	800318a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fea8 	bl	8003e24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d4:	2301      	movs	r3, #1
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d8:	f001 fdb4 	bl	8004c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030dc:	f000 fc26 	bl	800392c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030e0:	f001 fd80 	bl	8004be4 <vPortEnterCritical>
 80030e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ea:	b25b      	sxtb	r3, r3
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d103      	bne.n	80030fa <xQueueReceive+0x122>
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003100:	b25b      	sxtb	r3, r3
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d103      	bne.n	8003110 <xQueueReceive+0x138>
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003110:	f001 fd98 	bl	8004c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003114:	1d3a      	adds	r2, r7, #4
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fe97 	bl	8003e50 <xTaskCheckForTimeOut>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d123      	bne.n	8003170 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312a:	f000 f917 	bl	800335c <prvIsQueueEmpty>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d017      	beq.n	8003164 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fdbd 	bl	8003cbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003144:	f000 f8b8 	bl	80032b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003148:	f000 fbfe 	bl	8003948 <xTaskResumeAll>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d189      	bne.n	8003066 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <xQueueReceive+0x1bc>)
 8003154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	e780      	b.n	8003066 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003166:	f000 f8a7 	bl	80032b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800316a:	f000 fbed 	bl	8003948 <xTaskResumeAll>
 800316e:	e77a      	b.n	8003066 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003172:	f000 f8a1 	bl	80032b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003176:	f000 fbe7 	bl	8003948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800317a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800317c:	f000 f8ee 	bl	800335c <prvIsQueueEmpty>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	f43f af6f 	beq.w	8003066 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800318a:	4618      	mov	r0, r3
 800318c:	3730      	adds	r7, #48	; 0x30
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d14d      	bne.n	800325a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 ffd2 	bl	800416c <xTaskPriorityDisinherit>
 80031c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e043      	b.n	800325a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d119      	bne.n	800320c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6858      	ldr	r0, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	461a      	mov	r2, r3
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	f003 fdfc 	bl	8006de0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	441a      	add	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d32b      	bcc.n	800325a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	e026      	b.n	800325a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68d8      	ldr	r0, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	461a      	mov	r2, r3
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	f003 fde2 	bl	8006de0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	425b      	negs	r3, r3
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d207      	bcs.n	8003248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	425b      	negs	r3, r3
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d105      	bne.n	800325a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3b01      	subs	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003262:	697b      	ldr	r3, [r7, #20]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	441a      	add	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d303      	bcc.n	80032a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68d9      	ldr	r1, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	461a      	mov	r2, r3
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	f003 fd98 	bl	8006de0 <memcpy>
	}
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032c0:	f001 fc90 	bl	8004be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032cc:	e011      	b.n	80032f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3324      	adds	r3, #36	; 0x24
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fd3e 	bl	8003d5c <xTaskRemoveFromEventList>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032e6:	f000 fe15 	bl	8003f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	dce9      	bgt.n	80032ce <prvUnlockQueue+0x16>
 80032fa:	e000      	b.n	80032fe <prvUnlockQueue+0x46>
					break;
 80032fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	22ff      	movs	r2, #255	; 0xff
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003306:	f001 fc9d 	bl	8004c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800330a:	f001 fc6b 	bl	8004be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003316:	e011      	b.n	800333c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d012      	beq.n	8003346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3310      	adds	r3, #16
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd19 	bl	8003d5c <xTaskRemoveFromEventList>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003330:	f000 fdf0 	bl	8003f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003334:	7bbb      	ldrb	r3, [r7, #14]
 8003336:	3b01      	subs	r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800333c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003340:	2b00      	cmp	r3, #0
 8003342:	dce9      	bgt.n	8003318 <prvUnlockQueue+0x60>
 8003344:	e000      	b.n	8003348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	22ff      	movs	r2, #255	; 0xff
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003350:	f001 fc78 	bl	8004c44 <vPortExitCritical>
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003364:	f001 fc3e 	bl	8004be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e001      	b.n	800337a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800337a:	f001 fc63 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003390:	f001 fc28 	bl	8004be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	429a      	cmp	r2, r3
 800339e:	d102      	bne.n	80033a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e001      	b.n	80033aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 fc4b 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e014      	b.n	80033f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <vQueueAddToRegistry+0x50>)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d4:	490c      	ldr	r1, [pc, #48]	; (8003408 <vQueueAddToRegistry+0x50>)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <vQueueAddToRegistry+0x50>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033ea:	e006      	b.n	80033fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b07      	cmp	r3, #7
 80033f6:	d9e7      	bls.n	80033c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000868 	.word	0x20000868

0800340c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800341c:	f001 fbe2 	bl	8004be4 <vPortEnterCritical>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003426:	b25b      	sxtb	r3, r3
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d103      	bne.n	8003436 <vQueueWaitForMessageRestricted+0x2a>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	b25b      	sxtb	r3, r3
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d103      	bne.n	800344c <vQueueWaitForMessageRestricted+0x40>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800344c:	f001 fbfa 	bl	8004c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3324      	adds	r3, #36	; 0x24
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fc4f 	bl	8003d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff26 	bl	80032b8 <prvUnlockQueue>
	}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af04      	add	r7, sp, #16
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xTaskCreateStatic+0x46>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	61fb      	str	r3, [r7, #28]
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034ba:	23a8      	movs	r3, #168	; 0xa8
 80034bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2ba8      	cmp	r3, #168	; 0xa8
 80034c2:	d00a      	beq.n	80034da <xTaskCreateStatic+0x66>
	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	61bb      	str	r3, [r7, #24]
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01e      	beq.n	8003520 <xTaskCreateStatic+0xac>
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01b      	beq.n	8003520 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034fa:	2300      	movs	r3, #0
 80034fc:	9303      	str	r3, [sp, #12]
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9302      	str	r3, [sp, #8]
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f850 	bl	80035b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003518:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800351a:	f000 f8f3 	bl	8003704 <prvAddNewTaskToReadyList>
 800351e:	e001      	b.n	8003524 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003524:	697b      	ldr	r3, [r7, #20]
	}
 8003526:	4618      	mov	r0, r3
 8003528:	3728      	adds	r7, #40	; 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800352e:	b580      	push	{r7, lr}
 8003530:	b08c      	sub	sp, #48	; 0x30
 8003532:	af04      	add	r7, sp, #16
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fc70 	bl	8004e28 <pvPortMalloc>
 8003548:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003550:	20a8      	movs	r0, #168	; 0xa8
 8003552:	f001 fc69 	bl	8004e28 <pvPortMalloc>
 8003556:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
 8003564:	e005      	b.n	8003572 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f001 fd2a 	bl	8004fc0 <vPortFree>
 800356c:	e001      	b.n	8003572 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d017      	beq.n	80035a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	2300      	movs	r3, #0
 8003584:	9303      	str	r3, [sp, #12]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f80e 	bl	80035b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800359c:	69f8      	ldr	r0, [r7, #28]
 800359e:	f000 f8b1 	bl	8003704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035a2:	2301      	movs	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	e002      	b.n	80035ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035ae:	69bb      	ldr	r3, [r7, #24]
	}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	21a5      	movs	r1, #165	; 0xa5
 80035d2:	f003 fb7b 	bl	8006ccc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035e0:	3b01      	subs	r3, #1
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f023 0307 	bic.w	r3, r3, #7
 80035ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <prvInitialiseNewTask+0x58>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	617b      	str	r3, [r7, #20]
}
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01f      	beq.n	8003656 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	e012      	b.n	8003642 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	7819      	ldrb	r1, [r3, #0]
 8003624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	3334      	adds	r3, #52	; 0x34
 800362c:	460a      	mov	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	3301      	adds	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2b0f      	cmp	r3, #15
 8003646:	d9e9      	bls.n	800361c <prvInitialiseNewTask+0x64>
 8003648:	e000      	b.n	800364c <prvInitialiseNewTask+0x94>
			{
				break;
 800364a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003654:	e003      	b.n	800365e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	2b37      	cmp	r3, #55	; 0x37
 8003662:	d901      	bls.n	8003668 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003664:	2337      	movs	r3, #55	; 0x37
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003672:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	2200      	movs	r2, #0
 8003678:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	3304      	adds	r3, #4
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff f978 	bl	8002974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	3318      	adds	r3, #24
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff f973 	bl	8002974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	3354      	adds	r3, #84	; 0x54
 80036b8:	224c      	movs	r2, #76	; 0x4c
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fb05 	bl	8006ccc <memset>
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <prvInitialiseNewTask+0x140>)
 80036c6:	659a      	str	r2, [r3, #88]	; 0x58
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	4a0c      	ldr	r2, [pc, #48]	; (80036fc <prvInitialiseNewTask+0x144>)
 80036cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <prvInitialiseNewTask+0x148>)
 80036d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	69b8      	ldr	r0, [r7, #24]
 80036da:	f001 f957 	bl	800498c <pxPortInitialiseStack>
 80036de:	4602      	mov	r2, r0
 80036e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036f0:	bf00      	nop
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20006174 	.word	0x20006174
 80036fc:	200061dc 	.word	0x200061dc
 8003700:	20006244 	.word	0x20006244

08003704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800370c:	f001 fa6a 	bl	8004be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <prvAddNewTaskToReadyList+0xc4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	4a2c      	ldr	r2, [pc, #176]	; (80037c8 <prvAddNewTaskToReadyList+0xc4>)
 8003718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800371a:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <prvAddNewTaskToReadyList+0xc8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003722:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <prvAddNewTaskToReadyList+0xc8>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <prvAddNewTaskToReadyList+0xc4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d110      	bne.n	8003752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003730:	f000 fc04 	bl	8003f3c <prvInitialiseTaskLists>
 8003734:	e00d      	b.n	8003752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <prvAddNewTaskToReadyList+0xcc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800373e:	4b23      	ldr	r3, [pc, #140]	; (80037cc <prvAddNewTaskToReadyList+0xc8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	429a      	cmp	r2, r3
 800374a:	d802      	bhi.n	8003752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800374c:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <prvAddNewTaskToReadyList+0xc8>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <prvAddNewTaskToReadyList+0xd0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <prvAddNewTaskToReadyList+0xd0>)
 800375a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <prvAddNewTaskToReadyList+0xd0>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <prvAddNewTaskToReadyList+0xd4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d903      	bls.n	8003778 <prvAddNewTaskToReadyList+0x74>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <prvAddNewTaskToReadyList+0xd4>)
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <prvAddNewTaskToReadyList+0xd8>)
 8003786:	441a      	add	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3304      	adds	r3, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f7ff f8fd 	bl	800298e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003794:	f001 fa56 	bl	8004c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <prvAddNewTaskToReadyList+0xcc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <prvAddNewTaskToReadyList+0xc8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d207      	bcs.n	80037be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <prvAddNewTaskToReadyList+0xdc>)
 80037b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000d7c 	.word	0x20000d7c
 80037cc:	200008a8 	.word	0x200008a8
 80037d0:	20000d88 	.word	0x20000d88
 80037d4:	20000d98 	.word	0x20000d98
 80037d8:	20000d84 	.word	0x20000d84
 80037dc:	200008ac 	.word	0x200008ac
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d017      	beq.n	8003826 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <vTaskDelay+0x60>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <vTaskDelay+0x30>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	60bb      	str	r3, [r7, #8]
}
 8003810:	bf00      	nop
 8003812:	e7fe      	b.n	8003812 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003814:	f000 f88a 	bl	800392c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003818:	2100      	movs	r1, #0
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fd14 	bl	8004248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003820:	f000 f892 	bl	8003948 <xTaskResumeAll>
 8003824:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <vTaskDelay+0x64>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000da4 	.word	0x20000da4
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800385a:	463a      	mov	r2, r7
 800385c:	1d39      	adds	r1, r7, #4
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f832 	bl	80028cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	9202      	str	r2, [sp, #8]
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	460a      	mov	r2, r1
 800387a:	4924      	ldr	r1, [pc, #144]	; (800390c <vTaskStartScheduler+0xc0>)
 800387c:	4824      	ldr	r0, [pc, #144]	; (8003910 <vTaskStartScheduler+0xc4>)
 800387e:	f7ff fdf9 	bl	8003474 <xTaskCreateStatic>
 8003882:	4603      	mov	r3, r0
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <vTaskStartScheduler+0xc8>)
 8003886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <vTaskStartScheduler+0xc8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	e001      	b.n	800389a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038a0:	f000 fd26 	bl	80042f0 <xTimerCreateTimerTask>
 80038a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d11b      	bne.n	80038e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	613b      	str	r3, [r7, #16]
}
 80038be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <vTaskStartScheduler+0xcc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3354      	adds	r3, #84	; 0x54
 80038c6:	4a15      	ldr	r2, [pc, #84]	; (800391c <vTaskStartScheduler+0xd0>)
 80038c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <vTaskStartScheduler+0xd4>)
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <vTaskStartScheduler+0xd8>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <vTaskStartScheduler+0xdc>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038de:	f001 f8df 	bl	8004aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038e2:	e00e      	b.n	8003902 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d10a      	bne.n	8003902 <vTaskStartScheduler+0xb6>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	60fb      	str	r3, [r7, #12]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <vTaskStartScheduler+0xb4>
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	080076e8 	.word	0x080076e8
 8003910:	08003f2d 	.word	0x08003f2d
 8003914:	20000da0 	.word	0x20000da0
 8003918:	200008a8 	.word	0x200008a8
 800391c:	2000005c 	.word	0x2000005c
 8003920:	20000d9c 	.word	0x20000d9c
 8003924:	20000d88 	.word	0x20000d88
 8003928:	20000d80 	.word	0x20000d80

0800392c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <vTaskSuspendAll+0x18>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3301      	adds	r3, #1
 8003936:	4a03      	ldr	r2, [pc, #12]	; (8003944 <vTaskSuspendAll+0x18>)
 8003938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800393a:	bf00      	nop
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	20000da4 	.word	0x20000da4

08003948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003956:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <xTaskResumeAll+0x118>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <xTaskResumeAll+0x2c>
	__asm volatile
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	603b      	str	r3, [r7, #0]
}
 8003970:	bf00      	nop
 8003972:	e7fe      	b.n	8003972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003974:	f001 f936 	bl	8004be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003978:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <xTaskResumeAll+0x118>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3b01      	subs	r3, #1
 800397e:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <xTaskResumeAll+0x118>)
 8003980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <xTaskResumeAll+0x118>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d162      	bne.n	8003a50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800398a:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <xTaskResumeAll+0x11c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d05e      	beq.n	8003a50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003992:	e02f      	b.n	80039f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <xTaskResumeAll+0x120>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3318      	adds	r3, #24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff f851 	bl	8002a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f84c 	bl	8002a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <xTaskResumeAll+0x124>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <xTaskResumeAll+0x7c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a2a      	ldr	r2, [pc, #168]	; (8003a6c <xTaskResumeAll+0x124>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <xTaskResumeAll+0x128>)
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe ffd7 	bl	800298e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <xTaskResumeAll+0x12c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d302      	bcc.n	80039f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <xTaskResumeAll+0x130>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <xTaskResumeAll+0x120>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1cb      	bne.n	8003994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a02:	f000 fb75 	bl	80040f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <xTaskResumeAll+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a12:	f000 f859 	bl	8003ac8 <xTaskIncrementTick>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a1c:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <xTaskResumeAll+0x130>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f1      	bne.n	8003a12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <xTaskResumeAll+0x134>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <xTaskResumeAll+0x130>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <xTaskResumeAll+0x138>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a50:	f001 f8f8 	bl	8004c44 <vPortExitCritical>

	return xAlreadyYielded;
 8003a54:	68bb      	ldr	r3, [r7, #8]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000da4 	.word	0x20000da4
 8003a64:	20000d7c 	.word	0x20000d7c
 8003a68:	20000d3c 	.word	0x20000d3c
 8003a6c:	20000d84 	.word	0x20000d84
 8003a70:	200008ac 	.word	0x200008ac
 8003a74:	200008a8 	.word	0x200008a8
 8003a78:	20000d90 	.word	0x20000d90
 8003a7c:	20000d8c 	.word	0x20000d8c
 8003a80:	e000ed04 	.word	0xe000ed04

08003a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <xTaskGetTickCount+0x1c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000d80 	.word	0x20000d80

08003aa4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aaa:	f001 f97d 	bl	8004da8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003ab2:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <xTaskGetTickCountFromISR+0x20>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ab8:	683b      	ldr	r3, [r7, #0]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000d80 	.word	0x20000d80

08003ac8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <xTaskIncrementTick+0x108>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d170      	bne.n	8003bbc <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ada:	4b3e      	ldr	r3, [pc, #248]	; (8003bd4 <xTaskIncrementTick+0x10c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ae2:	4a3c      	ldr	r2, [pc, #240]	; (8003bd4 <xTaskIncrementTick+0x10c>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d120      	bne.n	8003b30 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003aee:	4b3a      	ldr	r3, [pc, #232]	; (8003bd8 <xTaskIncrementTick+0x110>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <xTaskIncrementTick+0x46>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	603b      	str	r3, [r7, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xTaskIncrementTick+0x44>
 8003b0e:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <xTaskIncrementTick+0x110>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <xTaskIncrementTick+0x114>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <xTaskIncrementTick+0x110>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <xTaskIncrementTick+0x114>)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <xTaskIncrementTick+0x118>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3301      	adds	r3, #1
 8003b28:	4a2d      	ldr	r2, [pc, #180]	; (8003be0 <xTaskIncrementTick+0x118>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	f000 fae0 	bl	80040f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b30:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <xTaskIncrementTick+0x11c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d345      	bcc.n	8003bc6 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b3a:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <xTaskIncrementTick+0x110>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <xTaskIncrementTick+0x11c>)
 8003b46:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4a:	601a      	str	r2, [r3, #0]
					break;
 8003b4c:	e03b      	b.n	8003bc6 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4e:	4b22      	ldr	r3, [pc, #136]	; (8003bd8 <xTaskIncrementTick+0x110>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d203      	bcs.n	8003b6e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b66:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <xTaskIncrementTick+0x11c>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b6c:	e02b      	b.n	8003bc6 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe ff68 	bl	8002a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3318      	adds	r3, #24
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe ff5f 	bl	8002a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <xTaskIncrementTick+0x120>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d903      	bls.n	8003b9e <xTaskIncrementTick+0xd6>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <xTaskIncrementTick+0x120>)
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <xTaskIncrementTick+0x124>)
 8003bac:	441a      	add	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7fe feea 	bl	800298e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bba:	e7be      	b.n	8003b3a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <xTaskIncrementTick+0x128>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <xTaskIncrementTick+0x128>)
 8003bc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bc6:	697b      	ldr	r3, [r7, #20]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000da4 	.word	0x20000da4
 8003bd4:	20000d80 	.word	0x20000d80
 8003bd8:	20000d34 	.word	0x20000d34
 8003bdc:	20000d38 	.word	0x20000d38
 8003be0:	20000d94 	.word	0x20000d94
 8003be4:	20000d9c 	.word	0x20000d9c
 8003be8:	20000d84 	.word	0x20000d84
 8003bec:	200008ac 	.word	0x200008ac
 8003bf0:	20000d8c 	.word	0x20000d8c

08003bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <vTaskSwitchContext+0xb0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <vTaskSwitchContext+0xb4>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c08:	e046      	b.n	8003c98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003c0a:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <vTaskSwitchContext+0xb4>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c10:	4b26      	ldr	r3, [pc, #152]	; (8003cac <vTaskSwitchContext+0xb8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e010      	b.n	8003c3a <vTaskSwitchContext+0x46>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	607b      	str	r3, [r7, #4]
}
 8003c30:	bf00      	nop
 8003c32:	e7fe      	b.n	8003c32 <vTaskSwitchContext+0x3e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	491d      	ldr	r1, [pc, #116]	; (8003cb0 <vTaskSwitchContext+0xbc>)
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0e4      	beq.n	8003c18 <vTaskSwitchContext+0x24>
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <vTaskSwitchContext+0xbc>)
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d104      	bne.n	8003c7e <vTaskSwitchContext+0x8a>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <vTaskSwitchContext+0xc0>)
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4a08      	ldr	r2, [pc, #32]	; (8003cac <vTaskSwitchContext+0xb8>)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <vTaskSwitchContext+0xc0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3354      	adds	r3, #84	; 0x54
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <vTaskSwitchContext+0xc4>)
 8003c96:	6013      	str	r3, [r2, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000da4 	.word	0x20000da4
 8003ca8:	20000d90 	.word	0x20000d90
 8003cac:	20000d84 	.word	0x20000d84
 8003cb0:	200008ac 	.word	0x200008ac
 8003cb4:	200008a8 	.word	0x200008a8
 8003cb8:	2000005c 	.word	0x2000005c

08003cbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <vTaskPlaceOnEventList+0x44>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe fe73 	bl	80029d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f000 faa8 	bl	8004248 <prvAddCurrentTaskToDelayedList>
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200008a8 	.word	0x200008a8

08003d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	617b      	str	r3, [r7, #20]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3318      	adds	r3, #24
 8003d32:	4619      	mov	r1, r3
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7fe fe2a 	bl	800298e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68b8      	ldr	r0, [r7, #8]
 8003d4a:	f000 fa7d 	bl	8004248 <prvAddCurrentTaskToDelayedList>
	}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200008a8 	.word	0x200008a8

08003d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60fb      	str	r3, [r7, #12]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fe5b 	bl	8002a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <xTaskRemoveFromEventList+0xb0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11d      	bne.n	8003dd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fe52 	bl	8002a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <xTaskRemoveFromEventList+0xb4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d903      	bls.n	8003db8 <xTaskRemoveFromEventList+0x5c>
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <xTaskRemoveFromEventList+0xb4>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <xTaskRemoveFromEventList+0xb8>)
 8003dc6:	441a      	add	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7fe fddd 	bl	800298e <vListInsertEnd>
 8003dd4:	e005      	b.n	8003de2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3318      	adds	r3, #24
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480e      	ldr	r0, [pc, #56]	; (8003e18 <xTaskRemoveFromEventList+0xbc>)
 8003dde:	f7fe fdd6 	bl	800298e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <xTaskRemoveFromEventList+0xc0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d905      	bls.n	8003dfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <xTaskRemoveFromEventList+0xc4>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e001      	b.n	8003e00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e00:	697b      	ldr	r3, [r7, #20]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000da4 	.word	0x20000da4
 8003e10:	20000d84 	.word	0x20000d84
 8003e14:	200008ac 	.word	0x200008ac
 8003e18:	20000d3c 	.word	0x20000d3c
 8003e1c:	200008a8 	.word	0x200008a8
 8003e20:	20000d90 	.word	0x20000d90

08003e24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <vTaskInternalSetTimeOutState+0x24>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <vTaskInternalSetTimeOutState+0x28>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	20000d94 	.word	0x20000d94
 8003e4c:	20000d80 	.word	0x20000d80

08003e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e92:	f000 fea7 	bl	8004be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <xTaskCheckForTimeOut+0xbc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d102      	bne.n	8003eb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	e023      	b.n	8003efe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <xTaskCheckForTimeOut+0xc0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d007      	beq.n	8003ed2 <xTaskCheckForTimeOut+0x82>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	e015      	b.n	8003efe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d20b      	bcs.n	8003ef4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff9b 	bl	8003e24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e004      	b.n	8003efe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003efa:	2301      	movs	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003efe:	f000 fea1 	bl	8004c44 <vPortExitCritical>

	return xReturn;
 8003f02:	69fb      	ldr	r3, [r7, #28]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000d80 	.word	0x20000d80
 8003f10:	20000d94 	.word	0x20000d94

08003f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <vTaskMissedYield+0x14>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	20000d90 	.word	0x20000d90

08003f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f34:	f000 f842 	bl	8003fbc <prvCheckTasksWaitingTermination>
 8003f38:	e7fc      	b.n	8003f34 <prvIdleTask+0x8>
	...

08003f3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	e00c      	b.n	8003f62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <prvInitialiseTaskLists+0x60>)
 8003f54:	4413      	add	r3, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fcec 	bl	8002934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b37      	cmp	r3, #55	; 0x37
 8003f66:	d9ef      	bls.n	8003f48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f68:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <prvInitialiseTaskLists+0x64>)
 8003f6a:	f7fe fce3 	bl	8002934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f6e:	480d      	ldr	r0, [pc, #52]	; (8003fa4 <prvInitialiseTaskLists+0x68>)
 8003f70:	f7fe fce0 	bl	8002934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f74:	480c      	ldr	r0, [pc, #48]	; (8003fa8 <prvInitialiseTaskLists+0x6c>)
 8003f76:	f7fe fcdd 	bl	8002934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f7a:	480c      	ldr	r0, [pc, #48]	; (8003fac <prvInitialiseTaskLists+0x70>)
 8003f7c:	f7fe fcda 	bl	8002934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f80:	480b      	ldr	r0, [pc, #44]	; (8003fb0 <prvInitialiseTaskLists+0x74>)
 8003f82:	f7fe fcd7 	bl	8002934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <prvInitialiseTaskLists+0x78>)
 8003f88:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <prvInitialiseTaskLists+0x64>)
 8003f8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <prvInitialiseTaskLists+0x7c>)
 8003f8e:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <prvInitialiseTaskLists+0x68>)
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200008ac 	.word	0x200008ac
 8003fa0:	20000d0c 	.word	0x20000d0c
 8003fa4:	20000d20 	.word	0x20000d20
 8003fa8:	20000d3c 	.word	0x20000d3c
 8003fac:	20000d50 	.word	0x20000d50
 8003fb0:	20000d68 	.word	0x20000d68
 8003fb4:	20000d34 	.word	0x20000d34
 8003fb8:	20000d38 	.word	0x20000d38

08003fbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fc2:	e019      	b.n	8003ff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fc4:	f000 fe0e 	bl	8004be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <prvCheckTasksWaitingTermination+0x50>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fd37 	bl	8002a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <prvCheckTasksWaitingTermination+0x54>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <prvCheckTasksWaitingTermination+0x54>)
 8003fe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <prvCheckTasksWaitingTermination+0x58>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <prvCheckTasksWaitingTermination+0x58>)
 8003fec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fee:	f000 fe29 	bl	8004c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f848 	bl	8004088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <prvCheckTasksWaitingTermination+0x58>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e1      	bne.n	8003fc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000d50 	.word	0x20000d50
 8004010:	20000d7c 	.word	0x20000d7c
 8004014:	20000d64 	.word	0x20000d64

08004018 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004024:	e005      	b.n	8004032 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3301      	adds	r3, #1
 800402a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2ba5      	cmp	r3, #165	; 0xa5
 8004038:	d0f5      	beq.n	8004026 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	b29b      	uxth	r3, r3
	}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <uxTaskGetStackHighWaterMark+0x14>
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <uxTaskGetStackHighWaterMark+0x34>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	e000      	b.n	8004066 <uxTaskGetStackHighWaterMark+0x16>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800406e:	6938      	ldr	r0, [r7, #16]
 8004070:	f7ff ffd2 	bl	8004018 <prvTaskCheckFreeStackSpace>
 8004074:	4603      	mov	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004078:	68fb      	ldr	r3, [r7, #12]
	}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200008a8 	.word	0x200008a8

08004088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3354      	adds	r3, #84	; 0x54
 8004094:	4618      	mov	r0, r3
 8004096:	f002 fe21 	bl	8006cdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d108      	bne.n	80040b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff89 	bl	8004fc0 <vPortFree>
				vPortFree( pxTCB );
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 ff86 	bl	8004fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040b4:	e018      	b.n	80040e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d103      	bne.n	80040c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 ff7d 	bl	8004fc0 <vPortFree>
	}
 80040c6:	e00f      	b.n	80040e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d00a      	beq.n	80040e8 <prvDeleteTCB+0x60>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60fb      	str	r3, [r7, #12]
}
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <prvDeleteTCB+0x5e>
	}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <prvResetNextTaskUnblockTime+0x38>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <prvResetNextTaskUnblockTime+0x3c>)
 8004102:	f04f 32ff 	mov.w	r2, #4294967295
 8004106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004108:	e008      	b.n	800411c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800410a:	4b07      	ldr	r3, [pc, #28]	; (8004128 <prvResetNextTaskUnblockTime+0x38>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a04      	ldr	r2, [pc, #16]	; (800412c <prvResetNextTaskUnblockTime+0x3c>)
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20000d34 	.word	0x20000d34
 800412c:	20000d9c 	.word	0x20000d9c

08004130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <xTaskGetSchedulerState+0x34>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800413e:	2301      	movs	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	e008      	b.n	8004156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <xTaskGetSchedulerState+0x38>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800414c:	2302      	movs	r3, #2
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	e001      	b.n	8004156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004156:	687b      	ldr	r3, [r7, #4]
	}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	20000d88 	.word	0x20000d88
 8004168:	20000da4 	.word	0x20000da4

0800416c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d056      	beq.n	8004230 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004182:	4b2e      	ldr	r3, [pc, #184]	; (800423c <xTaskPriorityDisinherit+0xd0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d00a      	beq.n	80041a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
}
 800419e:	bf00      	nop
 80041a0:	e7fe      	b.n	80041a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60bb      	str	r3, [r7, #8]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d02c      	beq.n	8004230 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d128      	bne.n	8004230 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fc30 	bl	8002a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <xTaskPriorityDisinherit+0xd4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d903      	bls.n	8004210 <xTaskPriorityDisinherit+0xa4>
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <xTaskPriorityDisinherit+0xd4>)
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4a09      	ldr	r2, [pc, #36]	; (8004244 <xTaskPriorityDisinherit+0xd8>)
 800421e:	441a      	add	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f7fe fbb1 	bl	800298e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004230:	697b      	ldr	r3, [r7, #20]
	}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200008a8 	.word	0x200008a8
 8004240:	20000d84 	.word	0x20000d84
 8004244:	200008ac 	.word	0x200008ac

08004248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004252:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3304      	adds	r3, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fbf2 	bl	8002a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d10a      	bne.n	8004282 <prvAddCurrentTaskToDelayedList+0x3a>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4819      	ldr	r0, [pc, #100]	; (80042e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800427c:	f7fe fb87 	bl	800298e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004280:	e026      	b.n	80042d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	429a      	cmp	r2, r3
 8004298:	d209      	bcs.n	80042ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7fe fb95 	bl	80029d6 <vListInsert>
}
 80042ac:	e010      	b.n	80042d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvAddCurrentTaskToDelayedList+0x94>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7fe fb8b 	bl	80029d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d202      	bcs.n	80042d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042ca:	4a08      	ldr	r2, [pc, #32]	; (80042ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000d80 	.word	0x20000d80
 80042dc:	200008a8 	.word	0x200008a8
 80042e0:	20000d68 	.word	0x20000d68
 80042e4:	20000d38 	.word	0x20000d38
 80042e8:	20000d34 	.word	0x20000d34
 80042ec:	20000d9c 	.word	0x20000d9c

080042f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042fa:	f000 fb07 	bl	800490c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <xTimerCreateTimerTask+0x80>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d021      	beq.n	800434a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800430e:	1d3a      	adds	r2, r7, #4
 8004310:	f107 0108 	add.w	r1, r7, #8
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe faf1 	bl	8002900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	9202      	str	r2, [sp, #8]
 8004326:	9301      	str	r3, [sp, #4]
 8004328:	2302      	movs	r3, #2
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2300      	movs	r3, #0
 800432e:	460a      	mov	r2, r1
 8004330:	4910      	ldr	r1, [pc, #64]	; (8004374 <xTimerCreateTimerTask+0x84>)
 8004332:	4811      	ldr	r0, [pc, #68]	; (8004378 <xTimerCreateTimerTask+0x88>)
 8004334:	f7ff f89e 	bl	8003474 <xTaskCreateStatic>
 8004338:	4603      	mov	r3, r0
 800433a:	4a10      	ldr	r2, [pc, #64]	; (800437c <xTimerCreateTimerTask+0x8c>)
 800433c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <xTimerCreateTimerTask+0x8c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004346:	2301      	movs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	613b      	str	r3, [r7, #16]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004366:	697b      	ldr	r3, [r7, #20]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000dd8 	.word	0x20000dd8
 8004374:	080076f0 	.word	0x080076f0
 8004378:	080044b5 	.word	0x080044b5
 800437c:	20000ddc 	.word	0x20000ddc

08004380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	623b      	str	r3, [r7, #32]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <xTimerGenericCommand+0x98>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d02a      	beq.n	800440c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	dc18      	bgt.n	80043fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043c8:	f7ff feb2 	bl	8004130 <xTaskGetSchedulerState>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d109      	bne.n	80043e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <xTimerGenericCommand+0x98>)
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f107 0110 	add.w	r1, r7, #16
 80043da:	2300      	movs	r3, #0
 80043dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043de:	f7fe fc61 	bl	8002ca4 <xQueueGenericSend>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24
 80043e4:	e012      	b.n	800440c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <xTimerGenericCommand+0x98>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f107 0110 	add.w	r1, r7, #16
 80043ee:	2300      	movs	r3, #0
 80043f0:	2200      	movs	r2, #0
 80043f2:	f7fe fc57 	bl	8002ca4 <xQueueGenericSend>
 80043f6:	6278      	str	r0, [r7, #36]	; 0x24
 80043f8:	e008      	b.n	800440c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <xTimerGenericCommand+0x98>)
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f107 0110 	add.w	r1, r7, #16
 8004402:	2300      	movs	r3, #0
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	f7fe fd4b 	bl	8002ea0 <xQueueGenericSendFromISR>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000dd8 	.word	0x20000dd8

0800441c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <prvProcessExpiredTimer+0x94>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7fe fb07 	bl	8002a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d022      	beq.n	800448e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	18d1      	adds	r1, r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f000 f8d1 	bl	80045fc <prvInsertTimerInActiveList>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01f      	beq.n	80044a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004460:	2300      	movs	r3, #0
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	2100      	movs	r1, #0
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff ff88 	bl	8004380 <xTimerGenericCommand>
 8004470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d113      	bne.n	80044a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60fb      	str	r3, [r7, #12]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	b2da      	uxtb	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	4798      	blx	r3
}
 80044a8:	bf00      	nop
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000dd0 	.word	0x20000dd0

080044b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044bc:	f107 0308 	add.w	r3, r7, #8
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f857 	bl	8004574 <prvGetNextExpireTime>
 80044c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4619      	mov	r1, r3
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f803 	bl	80044d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044d2:	f000 f8d5 	bl	8004680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044d6:	e7f1      	b.n	80044bc <prvTimerTask+0x8>

080044d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044e2:	f7ff fa23 	bl	800392c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044e6:	f107 0308 	add.w	r3, r7, #8
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f866 	bl	80045bc <prvSampleTimeNow>
 80044f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d130      	bne.n	800455a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <prvProcessTimerOrBlockTask+0x3c>
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	429a      	cmp	r2, r3
 8004504:	d806      	bhi.n	8004514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004506:	f7ff fa1f 	bl	8003948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff85 	bl	800441c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004512:	e024      	b.n	800455e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <prvProcessTimerOrBlockTask+0x90>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <prvProcessTimerOrBlockTask+0x50>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <prvProcessTimerOrBlockTask+0x52>
 8004528:	2300      	movs	r3, #0
 800452a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800452c:	4b0f      	ldr	r3, [pc, #60]	; (800456c <prvProcessTimerOrBlockTask+0x94>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4619      	mov	r1, r3
 800453a:	f7fe ff67 	bl	800340c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800453e:	f7ff fa03 	bl	8003948 <xTaskResumeAll>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004548:	4b09      	ldr	r3, [pc, #36]	; (8004570 <prvProcessTimerOrBlockTask+0x98>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
}
 8004558:	e001      	b.n	800455e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800455a:	f7ff f9f5 	bl	8003948 <xTaskResumeAll>
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000dd4 	.word	0x20000dd4
 800456c:	20000dd8 	.word	0x20000dd8
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <prvGetNextExpireTime+0x44>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <prvGetNextExpireTime+0x16>
 8004586:	2201      	movs	r2, #1
 8004588:	e000      	b.n	800458c <prvGetNextExpireTime+0x18>
 800458a:	2200      	movs	r2, #0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004598:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <prvGetNextExpireTime+0x44>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e001      	b.n	80045a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80045a8:	68fb      	ldr	r3, [r7, #12]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000dd0 	.word	0x20000dd0

080045bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045c4:	f7ff fa5e 	bl	8003a84 <xTaskGetTickCount>
 80045c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ca:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <prvSampleTimeNow+0x3c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d205      	bcs.n	80045e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045d4:	f000 f936 	bl	8004844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e002      	b.n	80045e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045e6:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <prvSampleTimeNow+0x3c>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045ec:	68fb      	ldr	r3, [r7, #12]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000de0 	.word	0x20000de0

080045fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	429a      	cmp	r2, r3
 8004620:	d812      	bhi.n	8004648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	1ad2      	subs	r2, r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	429a      	cmp	r2, r3
 800462e:	d302      	bcc.n	8004636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e01b      	b.n	800466e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <prvInsertTimerInActiveList+0x7c>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f7fe f9c8 	bl	80029d6 <vListInsert>
 8004646:	e012      	b.n	800466e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d206      	bcs.n	800465e <prvInsertTimerInActiveList+0x62>
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d302      	bcc.n	800465e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e007      	b.n	800466e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <prvInsertTimerInActiveList+0x80>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f7fe f9b4 	bl	80029d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800466e:	697b      	ldr	r3, [r7, #20]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000dd4 	.word	0x20000dd4
 800467c:	20000dd0 	.word	0x20000dd0

08004680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	; 0x38
 8004684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004686:	e0ca      	b.n	800481e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	da18      	bge.n	80046c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	3304      	adds	r3, #4
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	61fb      	str	r3, [r7, #28]
}
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b6:	6850      	ldr	r0, [r2, #4]
 80046b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ba:	6892      	ldr	r2, [r2, #8]
 80046bc:	4611      	mov	r1, r2
 80046be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f2c0 80ab 	blt.w	800481e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	3304      	adds	r3, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe f9b5 	bl	8002a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046de:	463b      	mov	r3, r7
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff6b 	bl	80045bc <prvSampleTimeNow>
 80046e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b09      	cmp	r3, #9
 80046ec:	f200 8096 	bhi.w	800481c <prvProcessReceivedCommands+0x19c>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <prvProcessReceivedCommands+0x78>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004721 	.word	0x08004721
 8004704:	08004795 	.word	0x08004795
 8004708:	080047a9 	.word	0x080047a9
 800470c:	080047f3 	.word	0x080047f3
 8004710:	08004721 	.word	0x08004721
 8004714:	08004721 	.word	0x08004721
 8004718:	08004795 	.word	0x08004795
 800471c:	080047a9 	.word	0x080047a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	b2da      	uxtb	r2, r3
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	18d1      	adds	r1, r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004740:	f7ff ff5c 	bl	80045fc <prvInsertTimerInActiveList>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d069      	beq.n	800481e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05e      	beq.n	800481e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	441a      	add	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	2300      	movs	r3, #0
 800476e:	2100      	movs	r1, #0
 8004770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004772:	f7ff fe05 	bl	8004380 <xTimerGenericCommand>
 8004776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d14f      	bne.n	800481e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	61bb      	str	r3, [r7, #24]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80047a6:	e03a      	b.n	800481e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	617b      	str	r3, [r7, #20]
}
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	18d1      	adds	r1, r2, r3
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ec:	f7ff ff06 	bl	80045fc <prvInsertTimerInActiveList>
					break;
 80047f0:	e015      	b.n	800481e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004802:	f000 fbdd 	bl	8004fc0 <vPortFree>
 8004806:	e00a      	b.n	800481e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	b2da      	uxtb	r2, r3
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800481a:	e000      	b.n	800481e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800481c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800481e:	4b08      	ldr	r3, [pc, #32]	; (8004840 <prvProcessReceivedCommands+0x1c0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1d39      	adds	r1, r7, #4
 8004824:	2200      	movs	r2, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fbd6 	bl	8002fd8 <xQueueReceive>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	f47f af2a 	bne.w	8004688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3730      	adds	r7, #48	; 0x30
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000dd8 	.word	0x20000dd8

08004844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800484a:	e048      	b.n	80048de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800484c:	4b2d      	ldr	r3, [pc, #180]	; (8004904 <prvSwitchTimerLists+0xc0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004856:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <prvSwitchTimerLists+0xc0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe f8ef 	bl	8002a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02e      	beq.n	80048de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4413      	add	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	429a      	cmp	r2, r3
 8004890:	d90e      	bls.n	80048b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <prvSwitchTimerLists+0xc0>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fe f894 	bl	80029d6 <vListInsert>
 80048ae:	e016      	b.n	80048de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048b0:	2300      	movs	r3, #0
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	2100      	movs	r1, #0
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff fd60 	bl	8004380 <xTimerGenericCommand>
 80048c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	603b      	str	r3, [r7, #0]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <prvSwitchTimerLists+0xc0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1b1      	bne.n	800484c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <prvSwitchTimerLists+0xc0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <prvSwitchTimerLists+0xc4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <prvSwitchTimerLists+0xc0>)
 80048f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048f6:	4a04      	ldr	r2, [pc, #16]	; (8004908 <prvSwitchTimerLists+0xc4>)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6013      	str	r3, [r2, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000dd0 	.word	0x20000dd0
 8004908:	20000dd4 	.word	0x20000dd4

0800490c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004912:	f000 f967 	bl	8004be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d120      	bne.n	8004960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800491e:	4814      	ldr	r0, [pc, #80]	; (8004970 <prvCheckForValidListAndQueue+0x64>)
 8004920:	f7fe f808 	bl	8002934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004924:	4813      	ldr	r0, [pc, #76]	; (8004974 <prvCheckForValidListAndQueue+0x68>)
 8004926:	f7fe f805 	bl	8002934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <prvCheckForValidListAndQueue+0x6c>)
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <prvCheckForValidListAndQueue+0x64>)
 800492e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <prvCheckForValidListAndQueue+0x70>)
 8004932:	4a10      	ldr	r2, [pc, #64]	; (8004974 <prvCheckForValidListAndQueue+0x68>)
 8004934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004936:	2300      	movs	r3, #0
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <prvCheckForValidListAndQueue+0x74>)
 800493c:	4a11      	ldr	r2, [pc, #68]	; (8004984 <prvCheckForValidListAndQueue+0x78>)
 800493e:	2110      	movs	r1, #16
 8004940:	200a      	movs	r0, #10
 8004942:	f7fe f913 	bl	8002b6c <xQueueGenericCreateStatic>
 8004946:	4603      	mov	r3, r0
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 800494a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <prvCheckForValidListAndQueue+0x60>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	490b      	ldr	r1, [pc, #44]	; (8004988 <prvCheckForValidListAndQueue+0x7c>)
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fd2c 	bl	80033b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004960:	f000 f970 	bl	8004c44 <vPortExitCritical>
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000dd8 	.word	0x20000dd8
 8004970:	20000da8 	.word	0x20000da8
 8004974:	20000dbc 	.word	0x20000dbc
 8004978:	20000dd0 	.word	0x20000dd0
 800497c:	20000dd4 	.word	0x20000dd4
 8004980:	20000e84 	.word	0x20000e84
 8004984:	20000de4 	.word	0x20000de4
 8004988:	080076f8 	.word	0x080076f8

0800498c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b04      	subs	r3, #4
 800499c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3b04      	subs	r3, #4
 80049aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b04      	subs	r3, #4
 80049ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049bc:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <pxPortInitialiseStack+0x64>)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3b14      	subs	r3, #20
 80049c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f06f 0202 	mvn.w	r2, #2
 80049da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3b20      	subs	r3, #32
 80049e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	080049f5 	.word	0x080049f5

080049f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <prvTaskExitError+0x54>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d00a      	beq.n	8004a1e <prvTaskExitError+0x2a>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <prvTaskExitError+0x28>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60bb      	str	r3, [r7, #8]
}
 8004a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a32:	bf00      	nop
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0fc      	beq.n	8004a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	00000000 	.word	0x00000000

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	4770      	bx	lr
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst2>:
 8004a70:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <prvPortStartFirstTask+0x24>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8814 	msr	CONTROL, r0
 8004a8a:	b662      	cpsie	i
 8004a8c:	b661      	cpsie	f
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	df00      	svc	0
 8004a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed08 	.word	0xe000ed08

08004aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aa6:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a46      	ldr	r2, [pc, #280]	; (8004bc4 <xPortStartScheduler+0x124>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10a      	bne.n	8004ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <xPortStartScheduler+0x120>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3f      	ldr	r2, [pc, #252]	; (8004bc8 <xPortStartScheduler+0x128>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10a      	bne.n	8004ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <xPortStartScheduler+0x12c>)
 8004ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	22ff      	movs	r2, #255	; 0xff
 8004af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <xPortStartScheduler+0x130>)
 8004b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b0e:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b10:	2207      	movs	r2, #7
 8004b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b14:	e009      	b.n	8004b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	4a2d      	ldr	r2, [pc, #180]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b80      	cmp	r3, #128	; 0x80
 8004b34:	d0ef      	beq.n	8004b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1c3 0307 	rsb	r3, r3, #7
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d00a      	beq.n	8004b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60bb      	str	r3, [r7, #8]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	4a1d      	ldr	r2, [pc, #116]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <xPortStartScheduler+0x134>)
 8004b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b76:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a14      	ldr	r2, [pc, #80]	; (8004bd8 <xPortStartScheduler+0x138>)
 8004b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b8e:	f000 f8dd 	bl	8004d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <xPortStartScheduler+0x13c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b98:	f000 f8fc 	bl	8004d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <xPortStartScheduler+0x140>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a0f      	ldr	r2, [pc, #60]	; (8004be0 <xPortStartScheduler+0x140>)
 8004ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ba8:	f7ff ff66 	bl	8004a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bac:	f7ff f822 	bl	8003bf4 <vTaskSwitchContext>
	prvTaskExitError();
 8004bb0:	f7ff ff20 	bl	80049f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000ed00 	.word	0xe000ed00
 8004bc4:	410fc271 	.word	0x410fc271
 8004bc8:	410fc270 	.word	0x410fc270
 8004bcc:	e000e400 	.word	0xe000e400
 8004bd0:	20000ed4 	.word	0x20000ed4
 8004bd4:	20000ed8 	.word	0x20000ed8
 8004bd8:	e000ed20 	.word	0xe000ed20
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	e000ef34 	.word	0xe000ef34

08004be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	607b      	str	r3, [r7, #4]
}
 8004bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3301      	adds	r3, #1
 8004c04:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <vPortEnterCritical+0x58>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <vPortEnterCritical+0x5c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	603b      	str	r3, [r7, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <vPortEnterCritical+0x4a>
	}
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <vPortExitCritical+0x50>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <vPortExitCritical+0x24>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	607b      	str	r3, [r7, #4]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <vPortExitCritical+0x50>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <vPortExitCritical+0x50>)
 8004c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <vPortExitCritical+0x50>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <vPortExitCritical+0x42>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f383 8811 	msr	BASEPRI, r3
}
 8004c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c
	...

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f01e 0f10 	tst.w	lr, #16
 8004cb0:	bf08      	it	eq
 8004cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cc4:	f380 8811 	msr	BASEPRI, r0
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f7fe ff90 	bl	8003bf4 <vTaskSwitchContext>
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f380 8811 	msr	BASEPRI, r0
 8004cdc:	bc09      	pop	{r0, r3}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce6:	f01e 0f10 	tst.w	lr, #16
 8004cea:	bf08      	it	eq
 8004cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cf0:	f380 8809 	msr	PSP, r0
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst>:
 8004d00:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d22:	f7fe fed1 	bl	8003ac8 <xTaskIncrementTick>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <xPortSysTickHandler+0x40>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
}
 8004d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <vPortSetupTimerInterrupt+0x38>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <vPortSetupTimerInterrupt+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <vPortSetupTimerInterrupt+0x44>)
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	e000e018 	.word	0xe000e018
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	10624dd3 	.word	0x10624dd3
 8004d90:	e000e014 	.word	0xe000e014

08004d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004da4 <vPortEnableVFP+0x10>
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d9e:	6001      	str	r1, [r0, #0]
 8004da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed88 	.word	0xe000ed88

08004da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dae:	f3ef 8305 	mrs	r3, IPSR
 8004db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d914      	bls.n	8004de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <vPortValidateInterruptPriority+0x70>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004dc4:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <vPortValidateInterruptPriority+0x74>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	7afa      	ldrb	r2, [r7, #11]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20a      	bcs.n	8004de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	607b      	str	r3, [r7, #4]
}
 8004de0:	bf00      	nop
 8004de2:	e7fe      	b.n	8004de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <vPortValidateInterruptPriority+0x78>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <vPortValidateInterruptPriority+0x7c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d90a      	bls.n	8004e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	603b      	str	r3, [r7, #0]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <vPortValidateInterruptPriority+0x60>
	}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000e3f0 	.word	0xe000e3f0
 8004e1c:	20000ed4 	.word	0x20000ed4
 8004e20:	e000ed0c 	.word	0xe000ed0c
 8004e24:	20000ed8 	.word	0x20000ed8

08004e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e34:	f7fe fd7a 	bl	800392c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e38:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <pvPortMalloc+0x180>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e40:	f000 f920 	bl	8005084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <pvPortMalloc+0x184>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 8093 	bne.w	8004f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01d      	beq.n	8004e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d014      	beq.n	8004e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	3308      	adds	r3, #8
 8004e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <pvPortMalloc+0x6c>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	617b      	str	r3, [r7, #20]
}
 8004e90:	bf00      	nop
 8004e92:	e7fe      	b.n	8004e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06e      	beq.n	8004f78 <pvPortMalloc+0x150>
 8004e9a:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <pvPortMalloc+0x188>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d869      	bhi.n	8004f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ea4:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <pvPortMalloc+0x18c>)
 8004ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ea8:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <pvPortMalloc+0x18c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eae:	e004      	b.n	8004eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d903      	bls.n	8004ecc <pvPortMalloc+0xa4>
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f1      	bne.n	8004eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <pvPortMalloc+0x180>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d050      	beq.n	8004f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2208      	movs	r2, #8
 8004edc:	4413      	add	r3, r2
 8004ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	2308      	movs	r3, #8
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d91f      	bls.n	8004f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <pvPortMalloc+0xf8>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	613b      	str	r3, [r7, #16]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f32:	69b8      	ldr	r0, [r7, #24]
 8004f34:	f000 f908 	bl	8005148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f38:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <pvPortMalloc+0x190>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d203      	bcs.n	8004f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f52:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <pvPortMalloc+0x188>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <pvPortMalloc+0x190>)
 8004f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <pvPortMalloc+0x184>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <pvPortMalloc+0x194>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a11      	ldr	r2, [pc, #68]	; (8004fbc <pvPortMalloc+0x194>)
 8004f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f78:	f7fe fce6 	bl	8003948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <pvPortMalloc+0x174>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	60fb      	str	r3, [r7, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <pvPortMalloc+0x172>
	return pvReturn;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3728      	adds	r7, #40	; 0x28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20004ae4 	.word	0x20004ae4
 8004fac:	20004af8 	.word	0x20004af8
 8004fb0:	20004ae8 	.word	0x20004ae8
 8004fb4:	20004adc 	.word	0x20004adc
 8004fb8:	20004aec 	.word	0x20004aec
 8004fbc:	20004af0 	.word	0x20004af0

08004fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d04d      	beq.n	800506e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4413      	add	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4b24      	ldr	r3, [pc, #144]	; (8005078 <vPortFree+0xb8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <vPortFree+0x44>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <vPortFree+0x62>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60bb      	str	r3, [r7, #8]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <vPortFree+0xb8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11a      	bne.n	800506e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <vPortFree+0xb8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	43db      	mvns	r3, r3
 8005042:	401a      	ands	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005048:	f7fe fc70 	bl	800392c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <vPortFree+0xbc>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4413      	add	r3, r2
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <vPortFree+0xbc>)
 8005058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800505a:	6938      	ldr	r0, [r7, #16]
 800505c:	f000 f874 	bl	8005148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <vPortFree+0xc0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a06      	ldr	r2, [pc, #24]	; (8005080 <vPortFree+0xc0>)
 8005068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800506a:	f7fe fc6d 	bl	8003948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20004af8 	.word	0x20004af8
 800507c:	20004ae8 	.word	0x20004ae8
 8005080:	20004af4 	.word	0x20004af4

08005084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800508a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800508e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <prvHeapInit+0xac>)
 8005092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3307      	adds	r3, #7
 80050a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0307 	bic.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <prvHeapInit+0xac>)
 80050b4:	4413      	add	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050bc:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <prvHeapInit+0xb0>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <prvHeapInit+0xb0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4413      	add	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050d0:	2208      	movs	r2, #8
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0307 	bic.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a15      	ldr	r2, [pc, #84]	; (8005138 <prvHeapInit+0xb4>)
 80050e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <prvHeapInit+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2200      	movs	r2, #0
 80050ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <prvHeapInit+0xb4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005104:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <prvHeapInit+0xb4>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <prvHeapInit+0xb8>)
 8005112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <prvHeapInit+0xbc>)
 800511a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800511c:	4b09      	ldr	r3, [pc, #36]	; (8005144 <prvHeapInit+0xc0>)
 800511e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000edc 	.word	0x20000edc
 8005134:	20004adc 	.word	0x20004adc
 8005138:	20004ae4 	.word	0x20004ae4
 800513c:	20004aec 	.word	0x20004aec
 8005140:	20004ae8 	.word	0x20004ae8
 8005144:	20004af8 	.word	0x20004af8

08005148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <prvInsertBlockIntoFreeList+0xac>)
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e002      	b.n	800515c <prvInsertBlockIntoFreeList+0x14>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	429a      	cmp	r2, r3
 8005164:	d8f7      	bhi.n	8005156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4413      	add	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	429a      	cmp	r2, r3
 8005176:	d108      	bne.n	800518a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	441a      	add	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d118      	bne.n	80051d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <prvInsertBlockIntoFreeList+0xb0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d00d      	beq.n	80051c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e008      	b.n	80051d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <prvInsertBlockIntoFreeList+0xb0>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e003      	b.n	80051d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d002      	beq.n	80051e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20004adc 	.word	0x20004adc
 80051f8:	20004ae4 	.word	0x20004ae4

080051fc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005200:	4803      	ldr	r0, [pc, #12]	; (8005210 <_cbSendSystemDesc+0x14>)
 8005202:	f001 fbe9 	bl	80069d8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005206:	4803      	ldr	r0, [pc, #12]	; (8005214 <_cbSendSystemDesc+0x18>)
 8005208:	f001 fbe6 	bl	80069d8 <SEGGER_SYSVIEW_SendSysDesc>
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}
 8005210:	08007700 	.word	0x08007700
 8005214:	08007740 	.word	0x08007740

08005218 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <SEGGER_SYSVIEW_Conf+0x20>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4b05      	ldr	r3, [pc, #20]	; (8005238 <SEGGER_SYSVIEW_Conf+0x20>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <SEGGER_SYSVIEW_Conf+0x24>)
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <SEGGER_SYSVIEW_Conf+0x28>)
 8005228:	f001 f85c 	bl	80062e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800522c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005230:	f001 f89c 	bl	800636c <SEGGER_SYSVIEW_SetRAMBase>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000000 	.word	0x20000000
 800523c:	080051fd 	.word	0x080051fd
 8005240:	080077ac 	.word	0x080077ac

08005244 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005246:	b085      	sub	sp, #20
 8005248:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	e048      	b.n	80052e2 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005250:	4929      	ldr	r1, [pc, #164]	; (80052f8 <_cbSendTaskList+0xb4>)
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fe fef5 	bl	8004050 <uxTaskGetStackHighWaterMark>
 8005266:	4601      	mov	r1, r0
 8005268:	4823      	ldr	r0, [pc, #140]	; (80052f8 <_cbSendTaskList+0xb4>)
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4403      	add	r3, r0
 8005276:	3310      	adds	r3, #16
 8005278:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800527a:	491f      	ldr	r1, [pc, #124]	; (80052f8 <_cbSendTaskList+0xb4>)
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	491b      	ldr	r1, [pc, #108]	; (80052f8 <_cbSendTaskList+0xb4>)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3304      	adds	r3, #4
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	4c16      	ldr	r4, [pc, #88]	; (80052f8 <_cbSendTaskList+0xb4>)
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4423      	add	r3, r4
 80052aa:	3308      	adds	r3, #8
 80052ac:	681c      	ldr	r4, [r3, #0]
 80052ae:	4d12      	ldr	r5, [pc, #72]	; (80052f8 <_cbSendTaskList+0xb4>)
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	442b      	add	r3, r5
 80052bc:	330c      	adds	r3, #12
 80052be:	681d      	ldr	r5, [r3, #0]
 80052c0:	4e0d      	ldr	r6, [pc, #52]	; (80052f8 <_cbSendTaskList+0xb4>)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4433      	add	r3, r6
 80052ce:	3310      	adds	r3, #16
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462b      	mov	r3, r5
 80052d6:	4622      	mov	r2, r4
 80052d8:	f000 f855 	bl	8005386 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3301      	adds	r3, #1
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <_cbSendTaskList+0xb8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3b1      	bcc.n	8005250 <_cbSendTaskList+0xc>
  }
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20004afc 	.word	0x20004afc
 80052fc:	20004b9c 	.word	0x20004b9c

08005300 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005308:	f7fe fbcc 	bl	8003aa4 <xTaskGetTickCountFromISR>
 800530c:	4603      	mov	r3, r0
 800530e:	2200      	movs	r2, #0
 8005310:	469a      	mov	sl, r3
 8005312:	4693      	mov	fp, r2
 8005314:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	f04f 0a00 	mov.w	sl, #0
 8005324:	f04f 0b00 	mov.w	fp, #0
 8005328:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800532c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005330:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005334:	4652      	mov	r2, sl
 8005336:	465b      	mov	r3, fp
 8005338:	1a14      	subs	r4, r2, r0
 800533a:	eb63 0501 	sbc.w	r5, r3, r1
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	00ab      	lsls	r3, r5, #2
 8005348:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800534c:	00a2      	lsls	r2, r4, #2
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	eb14 0800 	adds.w	r8, r4, r0
 8005356:	eb45 0901 	adc.w	r9, r5, r1
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800536a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800536e:	4690      	mov	r8, r2
 8005370:	4699      	mov	r9, r3
 8005372:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005376:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005386 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005386:	b580      	push	{r7, lr}
 8005388:	b08a      	sub	sp, #40	; 0x28
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	2214      	movs	r2, #20
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fc95 	bl	8006ccc <memset>
  TaskInfo.TaskID     = TaskID;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fa14 	bl	80067e8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80053c0:	bf00      	nop
 80053c2:	3728      	adds	r7, #40	; 0x28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80053ce:	4b24      	ldr	r3, [pc, #144]	; (8005460 <_DoInit+0x98>)
 80053d0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2203      	movs	r2, #3
 80053d6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2203      	movs	r2, #3
 80053dc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a20      	ldr	r2, [pc, #128]	; (8005464 <_DoInit+0x9c>)
 80053e2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a20      	ldr	r2, [pc, #128]	; (8005468 <_DoInit+0xa0>)
 80053e8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053f0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <_DoInit+0x9c>)
 8005408:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a17      	ldr	r2, [pc, #92]	; (800546c <_DoInit+0xa4>)
 800540e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2210      	movs	r2, #16
 8005414:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3307      	adds	r3, #7
 800542c:	4a10      	ldr	r2, [pc, #64]	; (8005470 <_DoInit+0xa8>)
 800542e:	6810      	ldr	r0, [r2, #0]
 8005430:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005432:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <_DoInit+0xac>)
 800543a:	6810      	ldr	r0, [r2, #0]
 800543c:	6018      	str	r0, [r3, #0]
 800543e:	8891      	ldrh	r1, [r2, #4]
 8005440:	7992      	ldrb	r2, [r2, #6]
 8005442:	8099      	strh	r1, [r3, #4]
 8005444:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005446:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005450:	f3bf 8f5f 	dmb	sy
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20004ba0 	.word	0x20004ba0
 8005464:	08007750 	.word	0x08007750
 8005468:	20004c48 	.word	0x20004c48
 800546c:	20005048 	.word	0x20005048
 8005470:	0800775c 	.word	0x0800775c
 8005474:	08007760 	.word	0x08007760

08005478 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005484:	4b3e      	ldr	r3, [pc, #248]	; (8005580 <SEGGER_RTT_ReadNoLock+0x108>)
 8005486:	623b      	str	r3, [r7, #32]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <SEGGER_RTT_ReadNoLock+0x1e>
 8005492:	f7ff ff99 	bl	80053c8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	3360      	adds	r3, #96	; 0x60
 80054a2:	4a37      	ldr	r2, [pc, #220]	; (8005580 <SEGGER_RTT_ReadNoLock+0x108>)
 80054a4:	4413      	add	r3, r2
 80054a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054b8:	2300      	movs	r3, #0
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d92b      	bls.n	800551c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bf28      	it	cs
 80054d6:	4613      	movcs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	4413      	add	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	6939      	ldr	r1, [r7, #16]
 80054e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054ea:	f001 fc79 	bl	8006de0 <memcpy>
    NumBytesRead += NumBytesRem;
 80054ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4413      	add	r3, r2
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005514:	429a      	cmp	r2, r3
 8005516:	d101      	bne.n	800551c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005518:	2300      	movs	r3, #0
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4293      	cmp	r3, r2
 800552a:	bf28      	it	cs
 800552c:	4613      	movcs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d019      	beq.n	800556a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	4413      	add	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005546:	f001 fc4b 	bl	8006de0 <memcpy>
    NumBytesRead += NumBytesRem;
 800554a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4413      	add	r3, r2
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	4413      	add	r3, r2
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005574:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20004ba0 	.word	0x20004ba0

08005584 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005592:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80055a0:	f7ff ff12 	bl	80053c8 <_DoInit>
  SEGGER_RTT_LOCK();
 80055a4:	f3ef 8311 	mrs	r3, BASEPRI
 80055a8:	f04f 0120 	mov.w	r1, #32
 80055ac:	f381 8811 	msr	BASEPRI, r1
 80055b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055b2:	4b35      	ldr	r3, [pc, #212]	; (8005688 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80055ba:	6939      	ldr	r1, [r7, #16]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	4613      	mov	r3, r2
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	440b      	add	r3, r1
 80055ca:	3304      	adds	r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3301      	adds	r3, #1
 80055d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	429a      	cmp	r2, r3
 80055e0:	dbeb      	blt.n	80055ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80055e2:	e000      	b.n	80055e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80055e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	da3f      	bge.n	8005670 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80055f0:	6939      	ldr	r1, [r7, #16]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005604:	6939      	ldr	r1, [r7, #16]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	4613      	mov	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	440b      	add	r3, r1
 8005614:	3304      	adds	r3, #4
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800561a:	6939      	ldr	r1, [r7, #16]
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	4613      	mov	r3, r2
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4413      	add	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	440b      	add	r3, r1
 8005628:	3320      	adds	r3, #32
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800562e:	6939      	ldr	r1, [r7, #16]
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	440b      	add	r3, r1
 800563c:	3328      	adds	r3, #40	; 0x28
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005642:	6939      	ldr	r1, [r7, #16]
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	4613      	mov	r3, r2
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	4413      	add	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	440b      	add	r3, r1
 8005650:	3324      	adds	r3, #36	; 0x24
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005656:	6939      	ldr	r1, [r7, #16]
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	440b      	add	r3, r1
 8005664:	332c      	adds	r3, #44	; 0x2c
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800566a:	f3bf 8f5f 	dmb	sy
 800566e:	e002      	b.n	8005676 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005670:	f04f 33ff 	mov.w	r3, #4294967295
 8005674:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800567c:	69fb      	ldr	r3, [r7, #28]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20004ba0 	.word	0x20004ba0

0800568c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800569a:	4b33      	ldr	r3, [pc, #204]	; (8005768 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80056a8:	f7ff fe8e 	bl	80053c8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056ac:	4b2e      	ldr	r3, [pc, #184]	; (8005768 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80056ae:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d24d      	bcs.n	8005758 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80056bc:	f3ef 8311 	mrs	r3, BASEPRI
 80056c0:	f04f 0120 	mov.w	r1, #32
 80056c4:	f381 8811 	msr	BASEPRI, r1
 80056c8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d031      	beq.n	8005734 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80056d0:	6979      	ldr	r1, [r7, #20]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4613      	mov	r3, r2
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	440b      	add	r3, r1
 80056de:	3360      	adds	r3, #96	; 0x60
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80056e4:	6979      	ldr	r1, [r7, #20]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	440b      	add	r3, r1
 80056f2:	3364      	adds	r3, #100	; 0x64
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80056f8:	6979      	ldr	r1, [r7, #20]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	440b      	add	r3, r1
 8005706:	3368      	adds	r3, #104	; 0x68
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800570c:	6979      	ldr	r1, [r7, #20]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4613      	mov	r3, r2
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4413      	add	r3, r2
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	440b      	add	r3, r1
 800571a:	3370      	adds	r3, #112	; 0x70
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4613      	mov	r3, r2
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	336c      	adds	r3, #108	; 0x6c
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005734:	6979      	ldr	r1, [r7, #20]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4613      	mov	r3, r2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	4413      	add	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	440b      	add	r3, r1
 8005742:	3374      	adds	r3, #116	; 0x74
 8005744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005746:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005748:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e002      	b.n	800575e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800575e:	69fb      	ldr	r3, [r7, #28]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20004ba0 	.word	0x20004ba0

0800576c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800577c:	e002      	b.n	8005784 <_EncodeStr+0x18>
    Len++;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f6      	bne.n	800577e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d901      	bls.n	800579c <_EncodeStr+0x30>
    Len = Limit;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2bfe      	cmp	r3, #254	; 0xfe
 80057a0:	d806      	bhi.n	80057b0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	60fa      	str	r2, [r7, #12]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e011      	b.n	80057d4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	60fa      	str	r2, [r7, #12]
 80057b6:	22ff      	movs	r2, #255	; 0xff
 80057b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	60fa      	str	r2, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	0a19      	lsrs	r1, r3, #8
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	60fa      	str	r2, [r7, #12]
 80057d0:	b2ca      	uxtb	r2, r1
 80057d2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80057d8:	e00a      	b.n	80057f0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	1c53      	adds	r3, r2, #1
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	60f9      	str	r1, [r7, #12]
 80057e6:	7812      	ldrb	r2, [r2, #0]
 80057e8:	701a      	strb	r2, [r3, #0]
    n++;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d3f0      	bcc.n	80057da <_EncodeStr+0x6e>
  }
  return pPayload;
 80057f8:	68fb      	ldr	r3, [r7, #12]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005826:	4b35      	ldr	r3, [pc, #212]	; (80058fc <_HandleIncomingPacket+0xdc>)
 8005828:	7e1b      	ldrb	r3, [r3, #24]
 800582a:	4618      	mov	r0, r3
 800582c:	1cfb      	adds	r3, r7, #3
 800582e:	2201      	movs	r2, #1
 8005830:	4619      	mov	r1, r3
 8005832:	f7ff fe21 	bl	8005478 <SEGGER_RTT_ReadNoLock>
 8005836:	4603      	mov	r3, r0
 8005838:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dd59      	ble.n	80058f4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	2b80      	cmp	r3, #128	; 0x80
 8005844:	d032      	beq.n	80058ac <_HandleIncomingPacket+0x8c>
 8005846:	2b80      	cmp	r3, #128	; 0x80
 8005848:	dc42      	bgt.n	80058d0 <_HandleIncomingPacket+0xb0>
 800584a:	2b07      	cmp	r3, #7
 800584c:	dc16      	bgt.n	800587c <_HandleIncomingPacket+0x5c>
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd3e      	ble.n	80058d0 <_HandleIncomingPacket+0xb0>
 8005852:	3b01      	subs	r3, #1
 8005854:	2b06      	cmp	r3, #6
 8005856:	d83b      	bhi.n	80058d0 <_HandleIncomingPacket+0xb0>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <_HandleIncomingPacket+0x40>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005883 	.word	0x08005883
 8005864:	08005889 	.word	0x08005889
 8005868:	0800588f 	.word	0x0800588f
 800586c:	08005895 	.word	0x08005895
 8005870:	0800589b 	.word	0x0800589b
 8005874:	080058a1 	.word	0x080058a1
 8005878:	080058a7 	.word	0x080058a7
 800587c:	2b7f      	cmp	r3, #127	; 0x7f
 800587e:	d034      	beq.n	80058ea <_HandleIncomingPacket+0xca>
 8005880:	e026      	b.n	80058d0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005882:	f000 fe37 	bl	80064f4 <SEGGER_SYSVIEW_Start>
      break;
 8005886:	e035      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005888:	f000 feee 	bl	8006668 <SEGGER_SYSVIEW_Stop>
      break;
 800588c:	e032      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800588e:	f001 f8c7 	bl	8006a20 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005892:	e02f      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005894:	f001 f88c 	bl	80069b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005898:	e02c      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800589a:	f000 ff0b 	bl	80066b4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800589e:	e029      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80058a0:	f001 f98e 	bl	8006bc0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80058a4:	e026      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80058a6:	f001 f96d 	bl	8006b84 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80058aa:	e023      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058ac:	4b13      	ldr	r3, [pc, #76]	; (80058fc <_HandleIncomingPacket+0xdc>)
 80058ae:	7e1b      	ldrb	r3, [r3, #24]
 80058b0:	4618      	mov	r0, r3
 80058b2:	1cfb      	adds	r3, r7, #3
 80058b4:	2201      	movs	r2, #1
 80058b6:	4619      	mov	r1, r3
 80058b8:	f7ff fdde 	bl	8005478 <SEGGER_RTT_ReadNoLock>
 80058bc:	4603      	mov	r3, r0
 80058be:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	dd13      	ble.n	80058ee <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f8db 	bl	8006a84 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80058ce:	e00e      	b.n	80058ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	da0c      	bge.n	80058f2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058d8:	4b08      	ldr	r3, [pc, #32]	; (80058fc <_HandleIncomingPacket+0xdc>)
 80058da:	7e1b      	ldrb	r3, [r3, #24]
 80058dc:	4618      	mov	r0, r3
 80058de:	1cfb      	adds	r3, r7, #3
 80058e0:	2201      	movs	r2, #1
 80058e2:	4619      	mov	r1, r3
 80058e4:	f7ff fdc8 	bl	8005478 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80058e8:	e003      	b.n	80058f2 <_HandleIncomingPacket+0xd2>
      break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
      break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <_HandleIncomingPacket+0xd4>
      break;
 80058f2:	bf00      	nop
    }
  }
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20006060 	.word	0x20006060

08005900 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b08c      	sub	sp, #48	; 0x30
 8005904:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005906:	2301      	movs	r3, #1
 8005908:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	3301      	adds	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005914:	4b31      	ldr	r3, [pc, #196]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
 800591a:	e00b      	b.n	8005934 <_TrySendOverflowPacket+0x34>
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	b2da      	uxtb	r2, r3
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	1c59      	adds	r1, r3, #1
 8005924:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	09db      	lsrs	r3, r3, #7
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	2b7f      	cmp	r3, #127	; 0x7f
 8005938:	d8f0      	bhi.n	800591c <_TrySendOverflowPacket+0x1c>
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800594a:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <_TrySendOverflowPacket+0xe0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005950:	4b22      	ldr	r3, [pc, #136]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	e00b      	b.n	800597c <_TrySendOverflowPacket+0x7c>
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	6279      	str	r1, [r7, #36]	; 0x24
 800596e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	09db      	lsrs	r3, r3, #7
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	2b7f      	cmp	r3, #127	; 0x7f
 8005980:	d8f0      	bhi.n	8005964 <_TrySendOverflowPacket+0x64>
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	627a      	str	r2, [r7, #36]	; 0x24
 8005988:	6a3a      	ldr	r2, [r7, #32]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	4618      	mov	r0, r3
 8005998:	1d3b      	adds	r3, r7, #4
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	1d3b      	adds	r3, r7, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	f7fa fc1c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059a8:	4603      	mov	r3, r0
 80059aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d009      	beq.n	80059c6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e004      	b.n	80059d0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80059c6:	4b05      	ldr	r3, [pc, #20]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	3301      	adds	r3, #1
 80059cc:	4a03      	ldr	r2, [pc, #12]	; (80059dc <_TrySendOverflowPacket+0xdc>)
 80059ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80059d0:	693b      	ldr	r3, [r7, #16]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3730      	adds	r7, #48	; 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20006060 	.word	0x20006060
 80059e0:	e0001004 	.word	0xe0001004

080059e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80059f0:	4b6c      	ldr	r3, [pc, #432]	; (8005ba4 <_SendPacket+0x1c0>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d010      	beq.n	8005a1a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80059f8:	4b6a      	ldr	r3, [pc, #424]	; (8005ba4 <_SendPacket+0x1c0>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a3 	beq.w	8005b48 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a02:	4b68      	ldr	r3, [pc, #416]	; (8005ba4 <_SendPacket+0x1c0>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d109      	bne.n	8005a1e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a0a:	f7ff ff79 	bl	8005900 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a0e:	4b65      	ldr	r3, [pc, #404]	; (8005ba4 <_SendPacket+0x1c0>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	f040 809a 	bne.w	8005b4c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005a18:	e001      	b.n	8005a1e <_SendPacket+0x3a>
    goto Send;
 8005a1a:	bf00      	nop
 8005a1c:	e000      	b.n	8005a20 <_SendPacket+0x3c>
Send:
 8005a1e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b1f      	cmp	r3, #31
 8005a24:	d809      	bhi.n	8005a3a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a26:	4b5f      	ldr	r3, [pc, #380]	; (8005ba4 <_SendPacket+0x1c0>)
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f040 808b 	bne.w	8005b50 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b17      	cmp	r3, #23
 8005a3e:	d807      	bhi.n	8005a50 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e03d      	b.n	8005acc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5c:	d912      	bls.n	8005a84 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	09da      	lsrs	r2, r3, #7
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	3a01      	subs	r2, #1
 8005a76:	60fa      	str	r2, [r7, #12]
 8005a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e006      	b.n	8005a92 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b7f      	cmp	r3, #127	; 0x7f
 8005a96:	d912      	bls.n	8005abe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	09da      	lsrs	r2, r3, #7
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	60fa      	str	r2, [r7, #12]
 8005ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	e006      	b.n	8005acc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <_SendPacket+0x1c4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ad2:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <_SendPacket+0x1c0>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	623b      	str	r3, [r7, #32]
 8005ae4:	e00b      	b.n	8005afe <_SendPacket+0x11a>
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	1c59      	adds	r1, r3, #1
 8005aee:	6279      	str	r1, [r7, #36]	; 0x24
 8005af0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	09db      	lsrs	r3, r3, #7
 8005afc:	623b      	str	r3, [r7, #32]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	2b7f      	cmp	r3, #127	; 0x7f
 8005b02:	d8f0      	bhi.n	8005ae6 <_SendPacket+0x102>
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	627a      	str	r2, [r7, #36]	; 0x24
 8005b0a:	6a3a      	ldr	r2, [r7, #32]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b14:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f7fa fb5c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b32:	4a1c      	ldr	r2, [pc, #112]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	60d3      	str	r3, [r2, #12]
 8005b38:	e00b      	b.n	8005b52 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e004      	b.n	8005b52 <_SendPacket+0x16e>
    goto SendDone;
 8005b48:	bf00      	nop
 8005b4a:	e002      	b.n	8005b52 <_SendPacket+0x16e>
      goto SendDone;
 8005b4c:	bf00      	nop
 8005b4e:	e000      	b.n	8005b52 <_SendPacket+0x16e>
      goto SendDone;
 8005b50:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b54:	7e1b      	ldrb	r3, [r3, #24]
 8005b56:	4619      	mov	r1, r3
 8005b58:	4a14      	ldr	r2, [pc, #80]	; (8005bac <_SendPacket+0x1c8>)
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	440b      	add	r3, r1
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	4413      	add	r3, r2
 8005b64:	336c      	adds	r3, #108	; 0x6c
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b6a:	7e1b      	ldrb	r3, [r3, #24]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	490f      	ldr	r1, [pc, #60]	; (8005bac <_SendPacket+0x1c8>)
 8005b70:	4603      	mov	r3, r0
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4403      	add	r3, r0
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	440b      	add	r3, r1
 8005b7a:	3370      	adds	r3, #112	; 0x70
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d00b      	beq.n	8005b9a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b84:	789b      	ldrb	r3, [r3, #2]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b90:	f7ff fe46 	bl	8005820 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b94:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <_SendPacket+0x1c0>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b9a:	bf00      	nop
 8005b9c:	3728      	adds	r7, #40	; 0x28
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20006060 	.word	0x20006060
 8005ba8:	e0001004 	.word	0xe0001004
 8005bac:	20004ba0 	.word	0x20004ba0

08005bb0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d80a      	bhi.n	8005be0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6051      	str	r1, [r2, #4]
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b80      	cmp	r3, #128	; 0x80
 8005be6:	d15a      	bne.n	8005c9e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	e00b      	b.n	8005c22 <_StoreChar+0x72>
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	1c59      	adds	r1, r3, #1
 8005c12:	6279      	str	r1, [r7, #36]	; 0x24
 8005c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	09db      	lsrs	r3, r3, #7
 8005c20:	623b      	str	r3, [r7, #32]
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	2b7f      	cmp	r3, #127	; 0x7f
 8005c26:	d8f0      	bhi.n	8005c0a <_StoreChar+0x5a>
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e00b      	b.n	8005c5a <_StoreChar+0xaa>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	1c59      	adds	r1, r3, #1
 8005c4a:	61f9      	str	r1, [r7, #28]
 8005c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	09db      	lsrs	r3, r3, #7
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5e:	d8f0      	bhi.n	8005c42 <_StoreChar+0x92>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	221a      	movs	r2, #26
 8005c76:	6939      	ldr	r1, [r7, #16]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff feb3 	bl	80059e4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fdbf 	bl	8005806 <_PreparePacket>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005cc2:	e007      	b.n	8005cd4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	623b      	str	r3, [r7, #32]
    Width++;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005cd4:	6a3a      	ldr	r2, [r7, #32]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d2f3      	bcs.n	8005cc4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d901      	bls.n	8005ce8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d11f      	bne.n	8005d32 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01c      	beq.n	8005d32 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <_PrintUnsigned+0x66>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <_PrintUnsigned+0x66>
        c = '0';
 8005d08:	2330      	movs	r3, #48	; 0x30
 8005d0a:	76fb      	strb	r3, [r7, #27]
 8005d0c:	e001      	b.n	8005d12 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005d0e:	2320      	movs	r3, #32
 8005d10:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d12:	e007      	b.n	8005d24 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	3b01      	subs	r3, #1
 8005d18:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005d1a:	7efb      	ldrb	r3, [r7, #27]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ff46 	bl	8005bb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <_PrintUnsigned+0x8a>
 8005d2a:	69fa      	ldr	r2, [r7, #28]
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3f0      	bcc.n	8005d14 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d903      	bls.n	8005d40 <_PrintUnsigned+0x98>
      NumDigits--;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	e009      	b.n	8005d54 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d200      	bcs.n	8005d54 <_PrintUnsigned+0xac>
        break;
 8005d52:	e005      	b.n	8005d60 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d5e:	e7e8      	b.n	8005d32 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005d78:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <_PrintUnsigned+0x128>)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff ff14 	bl	8005bb0 <_StoreChar>
    Digit /= Base;
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e3      	bne.n	8005d60 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005da8:	e006      	b.n	8005db8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	3b01      	subs	r3, #1
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005db0:	2120      	movs	r1, #32
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fefc 	bl	8005bb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <_PrintUnsigned+0x11e>
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3f1      	bcc.n	8005daa <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3728      	adds	r7, #40	; 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	080077c0 	.word	0x080077c0

08005dd4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bfb8      	it	lt
 8005de8:	425b      	neglt	r3, r3
 8005dea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005dec:	2301      	movs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005df0:	e007      	b.n	8005e02 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005dfa:	613b      	str	r3, [r7, #16]
    Width++;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	daf3      	bge.n	8005df2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d901      	bls.n	8005e16 <_PrintInt+0x42>
    Width = NumDigits;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <_PrintInt+0x5e>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	db04      	blt.n	8005e2c <_PrintInt+0x58>
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <_PrintInt+0x5e>
    FieldWidth--;
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <_PrintInt+0x6e>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <_PrintInt+0x9c>
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d111      	bne.n	8005e70 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00e      	beq.n	8005e70 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e52:	e006      	b.n	8005e62 <_PrintInt+0x8e>
        FieldWidth--;
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e5a:	2120      	movs	r1, #32
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff fea7 	bl	8005bb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <_PrintInt+0x9c>
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d3f1      	bcc.n	8005e54 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da07      	bge.n	8005e86 <_PrintInt+0xb2>
    v = -v;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	425b      	negs	r3, r3
 8005e7a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005e7c:	212d      	movs	r1, #45	; 0x2d
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff fe96 	bl	8005bb0 <_StoreChar>
 8005e84:	e008      	b.n	8005e98 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005e90:	212b      	movs	r1, #43	; 0x2b
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fe8c 	bl	8005bb0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d019      	beq.n	8005ed6 <_PrintInt+0x102>
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d114      	bne.n	8005ed6 <_PrintInt+0x102>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d111      	bne.n	8005ed6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00e      	beq.n	8005ed6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005eb8:	e006      	b.n	8005ec8 <_PrintInt+0xf4>
        FieldWidth--;
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005ec0:	2130      	movs	r1, #48	; 0x30
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff fe74 	bl	8005bb0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <_PrintInt+0x102>
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3f1      	bcc.n	8005eba <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f7ff fedf 	bl	8005ca8 <_PrintUnsigned>
}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b098      	sub	sp, #96	; 0x60
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f00:	f3ef 8311 	mrs	r3, BASEPRI
 8005f04:	f04f 0120 	mov.w	r1, #32
 8005f08:	f381 8811 	msr	BASEPRI, r1
 8005f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f0e:	48b7      	ldr	r0, [pc, #732]	; (80061ec <_VPrintTarget+0x2f8>)
 8005f10:	f7ff fc79 	bl	8005806 <_PreparePacket>
 8005f14:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005f16:	4bb5      	ldr	r3, [pc, #724]	; (80061ec <_VPrintTarget+0x2f8>)
 8005f18:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005f3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8183 	beq.w	800624a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005f44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f48:	2b25      	cmp	r3, #37	; 0x25
 8005f4a:	f040 8170 	bne.w	800622e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005f52:	2301      	movs	r3, #1
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005f5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f62:	3b23      	subs	r3, #35	; 0x23
 8005f64:	2b0d      	cmp	r3, #13
 8005f66:	d83f      	bhi.n	8005fe8 <_VPrintTarget+0xf4>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <_VPrintTarget+0x7c>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005fe9 	.word	0x08005fe9
 8005f7c:	08005fe9 	.word	0x08005fe9
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fe9 	.word	0x08005fe9
 8005f90:	08005fc9 	.word	0x08005fc9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fe9 	.word	0x08005fe9
 8005fa4:	08005fb9 	.word	0x08005fb9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e01a      	b.n	8005fee <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fba:	f043 0302 	orr.w	r3, r3, #2
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e012      	b.n	8005fee <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fca:	f043 0304 	orr.w	r3, r3, #4
 8005fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e00a      	b.n	8005fee <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fda:	f043 0308 	orr.w	r3, r3, #8
 8005fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e002      	b.n	8005fee <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	653b      	str	r3, [r7, #80]	; 0x50
 8005fec:	bf00      	nop
        }
      } while (v);
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1b0      	bne.n	8005f56 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006004:	2b2f      	cmp	r3, #47	; 0x2f
 8006006:	d912      	bls.n	800602e <_VPrintTarget+0x13a>
 8006008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800600c:	2b39      	cmp	r3, #57	; 0x39
 800600e:	d80e      	bhi.n	800602e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	461a      	mov	r2, r3
 8006022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006026:	4413      	add	r3, r2
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800602c:	e7e4      	b.n	8005ff8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800602e:	2300      	movs	r3, #0
 8006030:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800603a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800603e:	2b2e      	cmp	r3, #46	; 0x2e
 8006040:	d11d      	bne.n	800607e <_VPrintTarget+0x18a>
        sFormat++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006054:	2b2f      	cmp	r3, #47	; 0x2f
 8006056:	d912      	bls.n	800607e <_VPrintTarget+0x18a>
 8006058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800605c:	2b39      	cmp	r3, #57	; 0x39
 800605e:	d80e      	bhi.n	800607e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3301      	adds	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	461a      	mov	r2, r3
 8006072:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006076:	4413      	add	r3, r2
 8006078:	3b30      	subs	r3, #48	; 0x30
 800607a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800607c:	e7e4      	b.n	8006048 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800608a:	2b6c      	cmp	r3, #108	; 0x6c
 800608c:	d003      	beq.n	8006096 <_VPrintTarget+0x1a2>
 800608e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006092:	2b68      	cmp	r3, #104	; 0x68
 8006094:	d107      	bne.n	80060a6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80060a4:	e7ef      	b.n	8006086 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80060a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060aa:	2b25      	cmp	r3, #37	; 0x25
 80060ac:	f000 80b3 	beq.w	8006216 <_VPrintTarget+0x322>
 80060b0:	2b25      	cmp	r3, #37	; 0x25
 80060b2:	f2c0 80b7 	blt.w	8006224 <_VPrintTarget+0x330>
 80060b6:	2b78      	cmp	r3, #120	; 0x78
 80060b8:	f300 80b4 	bgt.w	8006224 <_VPrintTarget+0x330>
 80060bc:	2b58      	cmp	r3, #88	; 0x58
 80060be:	f2c0 80b1 	blt.w	8006224 <_VPrintTarget+0x330>
 80060c2:	3b58      	subs	r3, #88	; 0x58
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	f200 80ad 	bhi.w	8006224 <_VPrintTarget+0x330>
 80060ca:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <_VPrintTarget+0x1dc>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	080061c7 	.word	0x080061c7
 80060d4:	08006225 	.word	0x08006225
 80060d8:	08006225 	.word	0x08006225
 80060dc:	08006225 	.word	0x08006225
 80060e0:	08006225 	.word	0x08006225
 80060e4:	08006225 	.word	0x08006225
 80060e8:	08006225 	.word	0x08006225
 80060ec:	08006225 	.word	0x08006225
 80060f0:	08006225 	.word	0x08006225
 80060f4:	08006225 	.word	0x08006225
 80060f8:	08006225 	.word	0x08006225
 80060fc:	08006155 	.word	0x08006155
 8006100:	0800617b 	.word	0x0800617b
 8006104:	08006225 	.word	0x08006225
 8006108:	08006225 	.word	0x08006225
 800610c:	08006225 	.word	0x08006225
 8006110:	08006225 	.word	0x08006225
 8006114:	08006225 	.word	0x08006225
 8006118:	08006225 	.word	0x08006225
 800611c:	08006225 	.word	0x08006225
 8006120:	08006225 	.word	0x08006225
 8006124:	08006225 	.word	0x08006225
 8006128:	08006225 	.word	0x08006225
 800612c:	08006225 	.word	0x08006225
 8006130:	080061f1 	.word	0x080061f1
 8006134:	08006225 	.word	0x08006225
 8006138:	08006225 	.word	0x08006225
 800613c:	08006225 	.word	0x08006225
 8006140:	08006225 	.word	0x08006225
 8006144:	080061a1 	.word	0x080061a1
 8006148:	08006225 	.word	0x08006225
 800614c:	08006225 	.word	0x08006225
 8006150:	080061c7 	.word	0x080061c7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	1d19      	adds	r1, r3, #4
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006168:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	4611      	mov	r1, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fd1c 	bl	8005bb0 <_StoreChar>
        break;
 8006178:	e055      	b.n	8006226 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	1d19      	adds	r1, r3, #4
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6011      	str	r1, [r2, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006188:	f107 0014 	add.w	r0, r7, #20
 800618c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006196:	220a      	movs	r2, #10
 8006198:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800619a:	f7ff fe1b 	bl	8005dd4 <_PrintInt>
        break;
 800619e:	e042      	b.n	8006226 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	1d19      	adds	r1, r3, #4
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80061ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061b0:	f107 0014 	add.w	r0, r7, #20
 80061b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061be:	220a      	movs	r2, #10
 80061c0:	f7ff fd72 	bl	8005ca8 <_PrintUnsigned>
        break;
 80061c4:	e02f      	b.n	8006226 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	1d19      	adds	r1, r3, #4
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6011      	str	r1, [r2, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80061d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061d6:	f107 0014 	add.w	r0, r7, #20
 80061da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e4:	2210      	movs	r2, #16
 80061e6:	f7ff fd5f 	bl	8005ca8 <_PrintUnsigned>
        break;
 80061ea:	e01c      	b.n	8006226 <_VPrintTarget+0x332>
 80061ec:	20006090 	.word	0x20006090
      case 'p':
        v = va_arg(*pParamList, int);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	1d19      	adds	r1, r3, #4
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80061fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006200:	f107 0014 	add.w	r0, r7, #20
 8006204:	2300      	movs	r3, #0
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	2308      	movs	r3, #8
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2308      	movs	r3, #8
 800620e:	2210      	movs	r2, #16
 8006210:	f7ff fd4a 	bl	8005ca8 <_PrintUnsigned>
        break;
 8006214:	e007      	b.n	8006226 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006216:	f107 0314 	add.w	r3, r7, #20
 800621a:	2125      	movs	r1, #37	; 0x25
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fcc7 	bl	8005bb0 <_StoreChar>
        break;
 8006222:	e000      	b.n	8006226 <_VPrintTarget+0x332>
      default:
        break;
 8006224:	bf00      	nop
      }
      sFormat++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e007      	b.n	800623e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800622e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fcb9 	bl	8005bb0 <_StoreChar>
    }
  } while (*sFormat);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f47f ae72 	bne.w	8005f2c <_VPrintTarget+0x38>
 8006248:	e000      	b.n	800624c <_VPrintTarget+0x358>
      break;
 800624a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d041      	beq.n	80062d6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	643b      	str	r3, [r7, #64]	; 0x40
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006262:	e00b      	b.n	800627c <_VPrintTarget+0x388>
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	b2da      	uxtb	r2, r3
 8006268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	6439      	str	r1, [r7, #64]	; 0x40
 800626e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006278:	09db      	lsrs	r3, r3, #7
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	2b7f      	cmp	r3, #127	; 0x7f
 8006280:	d8f0      	bhi.n	8006264 <_VPrintTarget+0x370>
 8006282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	643a      	str	r2, [r7, #64]	; 0x40
 8006288:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006290:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
 8006296:	2300      	movs	r3, #0
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
 800629a:	e00b      	b.n	80062b4 <_VPrintTarget+0x3c0>
 800629c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	1c59      	adds	r1, r3, #1
 80062a4:	63b9      	str	r1, [r7, #56]	; 0x38
 80062a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	09db      	lsrs	r3, r3, #7
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b6:	2b7f      	cmp	r3, #127	; 0x7f
 80062b8:	d8f0      	bhi.n	800629c <_VPrintTarget+0x3a8>
 80062ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	63ba      	str	r2, [r7, #56]	; 0x38
 80062c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	69b9      	ldr	r1, [r7, #24]
 80062ce:	221a      	movs	r2, #26
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fb87 	bl	80059e4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80062dc:	bf00      	nop
 80062de:	3758      	adds	r7, #88	; 0x58
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062f2:	2300      	movs	r3, #0
 80062f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062f8:	4917      	ldr	r1, [pc, #92]	; (8006358 <SEGGER_SYSVIEW_Init+0x74>)
 80062fa:	4818      	ldr	r0, [pc, #96]	; (800635c <SEGGER_SYSVIEW_Init+0x78>)
 80062fc:	f7ff f942 	bl	8005584 <SEGGER_RTT_AllocUpBuffer>
 8006300:	4603      	mov	r3, r0
 8006302:	b2da      	uxtb	r2, r3
 8006304:	4b16      	ldr	r3, [pc, #88]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006306:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 800630a:	785a      	ldrb	r2, [r3, #1]
 800630c:	4b14      	ldr	r3, [pc, #80]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 800630e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006310:	4b13      	ldr	r3, [pc, #76]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006312:	7e1b      	ldrb	r3, [r3, #24]
 8006314:	4618      	mov	r0, r3
 8006316:	2300      	movs	r3, #0
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	2308      	movs	r3, #8
 800631c:	4a11      	ldr	r2, [pc, #68]	; (8006364 <SEGGER_SYSVIEW_Init+0x80>)
 800631e:	490f      	ldr	r1, [pc, #60]	; (800635c <SEGGER_SYSVIEW_Init+0x78>)
 8006320:	f7ff f9b4 	bl	800568c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800632a:	4b0f      	ldr	r3, [pc, #60]	; (8006368 <SEGGER_SYSVIEW_Init+0x84>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006330:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006332:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006338:	4a09      	ldr	r2, [pc, #36]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800633e:	4a08      	ldr	r2, [pc, #32]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006344:	4a06      	ldr	r2, [pc, #24]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <SEGGER_SYSVIEW_Init+0x7c>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20005058 	.word	0x20005058
 800635c:	08007768 	.word	0x08007768
 8006360:	20006060 	.word	0x20006060
 8006364:	20006058 	.word	0x20006058
 8006368:	e0001004 	.word	0xe0001004

0800636c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006374:	4a04      	ldr	r2, [pc, #16]	; (8006388 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6113      	str	r3, [r2, #16]
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20006060 	.word	0x20006060

0800638c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006394:	f3ef 8311 	mrs	r3, BASEPRI
 8006398:	f04f 0120 	mov.w	r1, #32
 800639c:	f381 8811 	msr	BASEPRI, r1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	4808      	ldr	r0, [pc, #32]	; (80063c4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80063a4:	f7ff fa2f 	bl	8005806 <_PreparePacket>
 80063a8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f7ff fb18 	bl	80059e4 <_SendPacket>
  RECORD_END();
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f383 8811 	msr	BASEPRI, r3
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20006090 	.word	0x20006090

080063c8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063d2:	f3ef 8311 	mrs	r3, BASEPRI
 80063d6:	f04f 0120 	mov.w	r1, #32
 80063da:	f381 8811 	msr	BASEPRI, r1
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	4816      	ldr	r0, [pc, #88]	; (800643c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80063e2:	f7ff fa10 	bl	8005806 <_PreparePacket>
 80063e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
 80063f4:	e00b      	b.n	800640e <SEGGER_SYSVIEW_RecordU32+0x46>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	1c59      	adds	r1, r3, #1
 80063fe:	61f9      	str	r1, [r7, #28]
 8006400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	09db      	lsrs	r3, r3, #7
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b7f      	cmp	r3, #127	; 0x7f
 8006412:	d8f0      	bhi.n	80063f6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	61fa      	str	r2, [r7, #28]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	68f9      	ldr	r1, [r7, #12]
 8006428:	6938      	ldr	r0, [r7, #16]
 800642a:	f7ff fadb 	bl	80059e4 <_SendPacket>
  RECORD_END();
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f383 8811 	msr	BASEPRI, r3
}
 8006434:	bf00      	nop
 8006436:	3720      	adds	r7, #32
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20006090 	.word	0x20006090

08006440 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b08c      	sub	sp, #48	; 0x30
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800644c:	f3ef 8311 	mrs	r3, BASEPRI
 8006450:	f04f 0120 	mov.w	r1, #32
 8006454:	f381 8811 	msr	BASEPRI, r1
 8006458:	61fb      	str	r3, [r7, #28]
 800645a:	4825      	ldr	r0, [pc, #148]	; (80064f0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800645c:	f7ff f9d3 	bl	8005806 <_PreparePacket>
 8006460:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
 800646e:	e00b      	b.n	8006488 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	b2da      	uxtb	r2, r3
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	62f9      	str	r1, [r7, #44]	; 0x2c
 800647a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	09db      	lsrs	r3, r3, #7
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	2b7f      	cmp	r3, #127	; 0x7f
 800648c:	d8f0      	bhi.n	8006470 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	e00b      	b.n	80064c0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	6279      	str	r1, [r7, #36]	; 0x24
 80064b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	09db      	lsrs	r3, r3, #7
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b7f      	cmp	r3, #127	; 0x7f
 80064c4:	d8f0      	bhi.n	80064a8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	627a      	str	r2, [r7, #36]	; 0x24
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	6979      	ldr	r1, [r7, #20]
 80064da:	69b8      	ldr	r0, [r7, #24]
 80064dc:	f7ff fa82 	bl	80059e4 <_SendPacket>
  RECORD_END();
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f383 8811 	msr	BASEPRI, r3
}
 80064e6:	bf00      	nop
 80064e8:	3730      	adds	r7, #48	; 0x30
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20006090 	.word	0x20006090

080064f4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	; 0x30
 80064f8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064fa:	4b58      	ldr	r3, [pc, #352]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006500:	f3ef 8311 	mrs	r3, BASEPRI
 8006504:	f04f 0120 	mov.w	r1, #32
 8006508:	f381 8811 	msr	BASEPRI, r1
 800650c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800650e:	4b53      	ldr	r3, [pc, #332]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	220a      	movs	r2, #10
 8006514:	4952      	ldr	r1, [pc, #328]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 8006516:	4618      	mov	r0, r3
 8006518:	f7f9 fe62 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006522:	200a      	movs	r0, #10
 8006524:	f7ff ff32 	bl	800638c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006528:	f3ef 8311 	mrs	r3, BASEPRI
 800652c:	f04f 0120 	mov.w	r1, #32
 8006530:	f381 8811 	msr	BASEPRI, r1
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	484b      	ldr	r0, [pc, #300]	; (8006664 <SEGGER_SYSVIEW_Start+0x170>)
 8006538:	f7ff f965 	bl	8005806 <_PreparePacket>
 800653c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006546:	4b45      	ldr	r3, [pc, #276]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
 800654c:	e00b      	b.n	8006566 <SEGGER_SYSVIEW_Start+0x72>
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	1c59      	adds	r1, r3, #1
 8006556:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	09db      	lsrs	r3, r3, #7
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	2b7f      	cmp	r3, #127	; 0x7f
 800656a:	d8f0      	bhi.n	800654e <SEGGER_SYSVIEW_Start+0x5a>
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	4b36      	ldr	r3, [pc, #216]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	e00b      	b.n	80065a0 <SEGGER_SYSVIEW_Start+0xac>
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	b2da      	uxtb	r2, r3
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	1c59      	adds	r1, r3, #1
 8006590:	6279      	str	r1, [r7, #36]	; 0x24
 8006592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	09db      	lsrs	r3, r3, #7
 800659e:	623b      	str	r3, [r7, #32]
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	2b7f      	cmp	r3, #127	; 0x7f
 80065a4:	d8f0      	bhi.n	8006588 <SEGGER_SYSVIEW_Start+0x94>
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	627a      	str	r2, [r7, #36]	; 0x24
 80065ac:	6a3a      	ldr	r2, [r7, #32]
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	4b28      	ldr	r3, [pc, #160]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e00b      	b.n	80065da <SEGGER_SYSVIEW_Start+0xe6>
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	61f9      	str	r1, [r7, #28]
 80065cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	09db      	lsrs	r3, r3, #7
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b7f      	cmp	r3, #127	; 0x7f
 80065de:	d8f0      	bhi.n	80065c2 <SEGGER_SYSVIEW_Start+0xce>
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	61fa      	str	r2, [r7, #28]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_Start+0x11e>
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	6179      	str	r1, [r7, #20]
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_Start+0x106>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	617a      	str	r2, [r7, #20]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006628:	2218      	movs	r2, #24
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff f9d9 	bl	80059e4 <_SendPacket>
      RECORD_END();
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <SEGGER_SYSVIEW_Start+0x168>)
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006646:	f000 f9eb 	bl	8006a20 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800664a:	f000 f9b1 	bl	80069b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800664e:	f000 fab7 	bl	8006bc0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006652:	bf00      	nop
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20006060 	.word	0x20006060
 8006660:	080077b4 	.word	0x080077b4
 8006664:	20006090 	.word	0x20006090

08006668 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800666e:	f3ef 8311 	mrs	r3, BASEPRI
 8006672:	f04f 0120 	mov.w	r1, #32
 8006676:	f381 8811 	msr	BASEPRI, r1
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	480b      	ldr	r0, [pc, #44]	; (80066ac <SEGGER_SYSVIEW_Stop+0x44>)
 800667e:	f7ff f8c2 	bl	8005806 <_PreparePacket>
 8006682:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800668c:	220b      	movs	r2, #11
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6838      	ldr	r0, [r7, #0]
 8006692:	f7ff f9a7 	bl	80059e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f383 8811 	msr	BASEPRI, r3
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20006090 	.word	0x20006090
 80066b0:	20006060 	.word	0x20006060

080066b4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	; 0x30
 80066b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066ba:	f3ef 8311 	mrs	r3, BASEPRI
 80066be:	f04f 0120 	mov.w	r1, #32
 80066c2:	f381 8811 	msr	BASEPRI, r1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	4845      	ldr	r0, [pc, #276]	; (80067e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ca:	f7ff f89c 	bl	8005806 <_PreparePacket>
 80066ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d8:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066de:	e00b      	b.n	80066f8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	1c59      	adds	r1, r3, #1
 80066e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	09db      	lsrs	r3, r3, #7
 80066f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	2b7f      	cmp	r3, #127	; 0x7f
 80066fc:	d8f0      	bhi.n	80066e0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
 8006712:	4b34      	ldr	r3, [pc, #208]	; (80067e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	623b      	str	r3, [r7, #32]
 8006718:	e00b      	b.n	8006732 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	6279      	str	r1, [r7, #36]	; 0x24
 8006724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	09db      	lsrs	r3, r3, #7
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2b7f      	cmp	r3, #127	; 0x7f
 8006736:	d8f0      	bhi.n	800671a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	627a      	str	r2, [r7, #36]	; 0x24
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e00b      	b.n	800676c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	61f9      	str	r1, [r7, #28]
 800675e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	09db      	lsrs	r3, r3, #7
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b7f      	cmp	r3, #127	; 0x7f
 8006770:	d8f0      	bhi.n	8006754 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	61fa      	str	r2, [r7, #28]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	e00b      	b.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	6179      	str	r1, [r7, #20]
 8006796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2b7f      	cmp	r3, #127	; 0x7f
 80067a8:	d8f0      	bhi.n	800678c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	617a      	str	r2, [r7, #20]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067ba:	2218      	movs	r2, #24
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	68b8      	ldr	r0, [r7, #8]
 80067c0:	f7ff f910 	bl	80059e4 <_SendPacket>
  RECORD_END();
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067d2:	4b04      	ldr	r3, [pc, #16]	; (80067e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	4798      	blx	r3
  }
}
 80067d8:	bf00      	nop
 80067da:	3730      	adds	r7, #48	; 0x30
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20006090 	.word	0x20006090
 80067e4:	20006060 	.word	0x20006060

080067e8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b092      	sub	sp, #72	; 0x48
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067f0:	f3ef 8311 	mrs	r3, BASEPRI
 80067f4:	f04f 0120 	mov.w	r1, #32
 80067f8:	f381 8811 	msr	BASEPRI, r1
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	486a      	ldr	r0, [pc, #424]	; (80069a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006800:	f7ff f801 	bl	8005806 <_PreparePacket>
 8006804:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b66      	ldr	r3, [pc, #408]	; (80069ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
 800681a:	e00b      	b.n	8006834 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681e:	b2da      	uxtb	r2, r3
 8006820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006822:	1c59      	adds	r1, r3, #1
 8006824:	6479      	str	r1, [r7, #68]	; 0x44
 8006826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006830:	09db      	lsrs	r3, r3, #7
 8006832:	643b      	str	r3, [r7, #64]	; 0x40
 8006834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006836:	2b7f      	cmp	r3, #127	; 0x7f
 8006838:	d8f0      	bhi.n	800681c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800683a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	647a      	str	r2, [r7, #68]	; 0x44
 8006840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	63bb      	str	r3, [r7, #56]	; 0x38
 8006854:	e00b      	b.n	800686e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	b2da      	uxtb	r2, r3
 800685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685c:	1c59      	adds	r1, r3, #1
 800685e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	2b7f      	cmp	r3, #127	; 0x7f
 8006872:	d8f0      	bhi.n	8006856 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800687a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006882:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	4619      	mov	r1, r3
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7fe ff6d 	bl	800576c <_EncodeStr>
 8006892:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006894:	2209      	movs	r2, #9
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	6938      	ldr	r0, [r7, #16]
 800689a:	f7ff f8a3 	bl	80059e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b40      	ldr	r3, [pc, #256]	; (80069ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	633b      	str	r3, [r7, #48]	; 0x30
 80068b2:	e00b      	b.n	80068cc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	6379      	str	r1, [r7, #52]	; 0x34
 80068be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	633b      	str	r3, [r7, #48]	; 0x30
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	2b7f      	cmp	r3, #127	; 0x7f
 80068d0:	d8f0      	bhi.n	80068b4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	637a      	str	r2, [r7, #52]	; 0x34
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ec:	e00b      	b.n	8006906 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	2b7f      	cmp	r3, #127	; 0x7f
 800690a:	d8f0      	bhi.n	80068ee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	e00b      	b.n	8006940 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	6279      	str	r1, [r7, #36]	; 0x24
 8006932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	09db      	lsrs	r3, r3, #7
 800693e:	623b      	str	r3, [r7, #32]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	2b7f      	cmp	r3, #127	; 0x7f
 8006944:	d8f0      	bhi.n	8006928 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	627a      	str	r2, [r7, #36]	; 0x24
 800694c:	6a3a      	ldr	r2, [r7, #32]
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e00b      	b.n	8006978 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	1c59      	adds	r1, r3, #1
 8006968:	61f9      	str	r1, [r7, #28]
 800696a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	09db      	lsrs	r3, r3, #7
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b7f      	cmp	r3, #127	; 0x7f
 800697c:	d8f0      	bhi.n	8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	61fa      	str	r2, [r7, #28]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800698e:	2215      	movs	r2, #21
 8006990:	68f9      	ldr	r1, [r7, #12]
 8006992:	6938      	ldr	r0, [r7, #16]
 8006994:	f7ff f826 	bl	80059e4 <_SendPacket>
  RECORD_END();
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f383 8811 	msr	BASEPRI, r3
}
 800699e:	bf00      	nop
 80069a0:	3748      	adds	r7, #72	; 0x48
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20006090 	.word	0x20006090
 80069ac:	20006060 	.word	0x20006060

080069b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069c6:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4798      	blx	r3
  }
}
 80069ce:	bf00      	nop
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20006060 	.word	0x20006060

080069d8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e0:	f3ef 8311 	mrs	r3, BASEPRI
 80069e4:	f04f 0120 	mov.w	r1, #32
 80069e8:	f381 8811 	msr	BASEPRI, r1
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	480b      	ldr	r0, [pc, #44]	; (8006a1c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069f0:	f7fe ff09 	bl	8005806 <_PreparePacket>
 80069f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069f6:	2280      	movs	r2, #128	; 0x80
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f7fe feb6 	bl	800576c <_EncodeStr>
 8006a00:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a02:	220e      	movs	r2, #14
 8006a04:	68f9      	ldr	r1, [r7, #12]
 8006a06:	6938      	ldr	r0, [r7, #16]
 8006a08:	f7fe ffec 	bl	80059e4 <_SendPacket>
  RECORD_END();
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f383 8811 	msr	BASEPRI, r3
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20006090 	.word	0x20006090

08006a20 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01a      	beq.n	8006a64 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a2e:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d015      	beq.n	8006a64 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4798      	blx	r3
 8006a40:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a44:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	000a      	movs	r2, r1
 8006a54:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a56:	4613      	mov	r3, r2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	200d      	movs	r0, #13
 8006a5e:	f7ff fcef 	bl	8006440 <SEGGER_SYSVIEW_RecordU32x2>
 8006a62:	e006      	b.n	8006a72 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a64:	4b06      	ldr	r3, [pc, #24]	; (8006a80 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	200c      	movs	r0, #12
 8006a6c:	f7ff fcac 	bl	80063c8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd90      	pop	{r4, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20006060 	.word	0x20006060
 8006a80:	e0001004 	.word	0xe0001004

08006a84 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08c      	sub	sp, #48	; 0x30
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a8e:	4b3b      	ldr	r3, [pc, #236]	; (8006b7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d06d      	beq.n	8006b72 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa0:	e008      	b.n	8006ab4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d3f2      	bcc.n	8006aa2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006abc:	e000      	b.n	8006ac0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006abe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d055      	beq.n	8006b72 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aca:	f04f 0120 	mov.w	r1, #32
 8006ace:	f381 8811 	msr	BASEPRI, r1
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	482a      	ldr	r0, [pc, #168]	; (8006b80 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ad6:	f7fe fe96 	bl	8005806 <_PreparePacket>
 8006ada:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	623b      	str	r3, [r7, #32]
 8006ae8:	e00b      	b.n	8006b02 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	1c59      	adds	r1, r3, #1
 8006af2:	6279      	str	r1, [r7, #36]	; 0x24
 8006af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	09db      	lsrs	r3, r3, #7
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	2b7f      	cmp	r3, #127	; 0x7f
 8006b06:	d8f0      	bhi.n	8006aea <SEGGER_SYSVIEW_SendModule+0x66>
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e00b      	b.n	8006b3c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	1c59      	adds	r1, r3, #1
 8006b2c:	61f9      	str	r1, [r7, #28]
 8006b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	09db      	lsrs	r3, r3, #7
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b40:	d8f0      	bhi.n	8006b24 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2280      	movs	r2, #128	; 0x80
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7fe fe06 	bl	800576c <_EncodeStr>
 8006b60:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b62:	2216      	movs	r2, #22
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f7fe ff3c 	bl	80059e4 <_SendPacket>
      RECORD_END();
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3730      	adds	r7, #48	; 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20006088 	.word	0x20006088
 8006b80:	20006090 	.word	0x20006090

08006b84 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f2      	bne.n	8006b98 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20006088 	.word	0x20006088

08006bc0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bca:	f04f 0120 	mov.w	r1, #32
 8006bce:	f381 8811 	msr	BASEPRI, r1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	4817      	ldr	r0, [pc, #92]	; (8006c34 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006bd6:	f7fe fe16 	bl	8005806 <_PreparePacket>
 8006bda:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e00b      	b.n	8006c04 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	6179      	str	r1, [r7, #20]
 8006bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	09db      	lsrs	r3, r3, #7
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b7f      	cmp	r3, #127	; 0x7f
 8006c08:	d8f0      	bhi.n	8006bec <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	617a      	str	r2, [r7, #20]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c1a:	221b      	movs	r2, #27
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f7fe fee0 	bl	80059e4 <_SendPacket>
  RECORD_END();
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f383 8811 	msr	BASEPRI, r3
}
 8006c2a:	bf00      	nop
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20006090 	.word	0x20006090
 8006c38:	2000608c 	.word	0x2000608c

08006c3c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c3c:	b40f      	push	{r0, r1, r2, r3}
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7ff f94f 	bl	8005ef4 <_VPrintTarget>
  va_end(ParamList);
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c60:	b004      	add	sp, #16
 8006c62:	4770      	bx	lr

08006c64 <sniprintf>:
 8006c64:	b40c      	push	{r2, r3}
 8006c66:	b530      	push	{r4, r5, lr}
 8006c68:	4b17      	ldr	r3, [pc, #92]	; (8006cc8 <sniprintf+0x64>)
 8006c6a:	1e0c      	subs	r4, r1, #0
 8006c6c:	681d      	ldr	r5, [r3, #0]
 8006c6e:	b09d      	sub	sp, #116	; 0x74
 8006c70:	da08      	bge.n	8006c84 <sniprintf+0x20>
 8006c72:	238b      	movs	r3, #139	; 0x8b
 8006c74:	602b      	str	r3, [r5, #0]
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	b01d      	add	sp, #116	; 0x74
 8006c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c80:	b002      	add	sp, #8
 8006c82:	4770      	bx	lr
 8006c84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c8c:	bf14      	ite	ne
 8006c8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c92:	4623      	moveq	r3, r4
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c9c:	9002      	str	r0, [sp, #8]
 8006c9e:	9006      	str	r0, [sp, #24]
 8006ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ca6:	ab21      	add	r3, sp, #132	; 0x84
 8006ca8:	a902      	add	r1, sp, #8
 8006caa:	4628      	mov	r0, r5
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	f000 f9f7 	bl	80070a0 <_svfiprintf_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	bfbc      	itt	lt
 8006cb6:	238b      	movlt	r3, #139	; 0x8b
 8006cb8:	602b      	strlt	r3, [r5, #0]
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	d0dd      	beq.n	8006c7a <sniprintf+0x16>
 8006cbe:	9b02      	ldr	r3, [sp, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	e7d9      	b.n	8006c7a <sniprintf+0x16>
 8006cc6:	bf00      	nop
 8006cc8:	2000005c 	.word	0x2000005c

08006ccc <memset>:
 8006ccc:	4402      	add	r2, r0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <memset+0xa>
 8006cd4:	4770      	bx	lr
 8006cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cda:	e7f9      	b.n	8006cd0 <memset+0x4>

08006cdc <_reclaim_reent>:
 8006cdc:	4b29      	ldr	r3, [pc, #164]	; (8006d84 <_reclaim_reent+0xa8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4283      	cmp	r3, r0
 8006ce2:	b570      	push	{r4, r5, r6, lr}
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	d04b      	beq.n	8006d80 <_reclaim_reent+0xa4>
 8006ce8:	69c3      	ldr	r3, [r0, #28]
 8006cea:	b143      	cbz	r3, 8006cfe <_reclaim_reent+0x22>
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d144      	bne.n	8006d7c <_reclaim_reent+0xa0>
 8006cf2:	69e3      	ldr	r3, [r4, #28]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	b111      	cbz	r1, 8006cfe <_reclaim_reent+0x22>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f87f 	bl	8006dfc <_free_r>
 8006cfe:	6961      	ldr	r1, [r4, #20]
 8006d00:	b111      	cbz	r1, 8006d08 <_reclaim_reent+0x2c>
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 f87a 	bl	8006dfc <_free_r>
 8006d08:	69e1      	ldr	r1, [r4, #28]
 8006d0a:	b111      	cbz	r1, 8006d12 <_reclaim_reent+0x36>
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f875 	bl	8006dfc <_free_r>
 8006d12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d14:	b111      	cbz	r1, 8006d1c <_reclaim_reent+0x40>
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 f870 	bl	8006dfc <_free_r>
 8006d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1e:	b111      	cbz	r1, 8006d26 <_reclaim_reent+0x4a>
 8006d20:	4620      	mov	r0, r4
 8006d22:	f000 f86b 	bl	8006dfc <_free_r>
 8006d26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d28:	b111      	cbz	r1, 8006d30 <_reclaim_reent+0x54>
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 f866 	bl	8006dfc <_free_r>
 8006d30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d32:	b111      	cbz	r1, 8006d3a <_reclaim_reent+0x5e>
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 f861 	bl	8006dfc <_free_r>
 8006d3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d3c:	b111      	cbz	r1, 8006d44 <_reclaim_reent+0x68>
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 f85c 	bl	8006dfc <_free_r>
 8006d44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006d46:	b111      	cbz	r1, 8006d4e <_reclaim_reent+0x72>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 f857 	bl	8006dfc <_free_r>
 8006d4e:	6a23      	ldr	r3, [r4, #32]
 8006d50:	b1b3      	cbz	r3, 8006d80 <_reclaim_reent+0xa4>
 8006d52:	4620      	mov	r0, r4
 8006d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d58:	4718      	bx	r3
 8006d5a:	5949      	ldr	r1, [r1, r5]
 8006d5c:	b941      	cbnz	r1, 8006d70 <_reclaim_reent+0x94>
 8006d5e:	3504      	adds	r5, #4
 8006d60:	69e3      	ldr	r3, [r4, #28]
 8006d62:	2d80      	cmp	r5, #128	; 0x80
 8006d64:	68d9      	ldr	r1, [r3, #12]
 8006d66:	d1f8      	bne.n	8006d5a <_reclaim_reent+0x7e>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f847 	bl	8006dfc <_free_r>
 8006d6e:	e7c0      	b.n	8006cf2 <_reclaim_reent+0x16>
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f842 	bl	8006dfc <_free_r>
 8006d78:	4631      	mov	r1, r6
 8006d7a:	e7ef      	b.n	8006d5c <_reclaim_reent+0x80>
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	e7ef      	b.n	8006d60 <_reclaim_reent+0x84>
 8006d80:	bd70      	pop	{r4, r5, r6, pc}
 8006d82:	bf00      	nop
 8006d84:	2000005c 	.word	0x2000005c

08006d88 <__errno>:
 8006d88:	4b01      	ldr	r3, [pc, #4]	; (8006d90 <__errno+0x8>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	2000005c 	.word	0x2000005c

08006d94 <__libc_init_array>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4d0d      	ldr	r5, [pc, #52]	; (8006dcc <__libc_init_array+0x38>)
 8006d98:	4c0d      	ldr	r4, [pc, #52]	; (8006dd0 <__libc_init_array+0x3c>)
 8006d9a:	1b64      	subs	r4, r4, r5
 8006d9c:	10a4      	asrs	r4, r4, #2
 8006d9e:	2600      	movs	r6, #0
 8006da0:	42a6      	cmp	r6, r4
 8006da2:	d109      	bne.n	8006db8 <__libc_init_array+0x24>
 8006da4:	4d0b      	ldr	r5, [pc, #44]	; (8006dd4 <__libc_init_array+0x40>)
 8006da6:	4c0c      	ldr	r4, [pc, #48]	; (8006dd8 <__libc_init_array+0x44>)
 8006da8:	f000 fc6a 	bl	8007680 <_init>
 8006dac:	1b64      	subs	r4, r4, r5
 8006dae:	10a4      	asrs	r4, r4, #2
 8006db0:	2600      	movs	r6, #0
 8006db2:	42a6      	cmp	r6, r4
 8006db4:	d105      	bne.n	8006dc2 <__libc_init_array+0x2e>
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dbc:	4798      	blx	r3
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	e7ee      	b.n	8006da0 <__libc_init_array+0xc>
 8006dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dc6:	4798      	blx	r3
 8006dc8:	3601      	adds	r6, #1
 8006dca:	e7f2      	b.n	8006db2 <__libc_init_array+0x1e>
 8006dcc:	0800780c 	.word	0x0800780c
 8006dd0:	0800780c 	.word	0x0800780c
 8006dd4:	0800780c 	.word	0x0800780c
 8006dd8:	08007810 	.word	0x08007810

08006ddc <__retarget_lock_acquire_recursive>:
 8006ddc:	4770      	bx	lr

08006dde <__retarget_lock_release_recursive>:
 8006dde:	4770      	bx	lr

08006de0 <memcpy>:
 8006de0:	440a      	add	r2, r1
 8006de2:	4291      	cmp	r1, r2
 8006de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006de8:	d100      	bne.n	8006dec <memcpy+0xc>
 8006dea:	4770      	bx	lr
 8006dec:	b510      	push	{r4, lr}
 8006dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df6:	4291      	cmp	r1, r2
 8006df8:	d1f9      	bne.n	8006dee <memcpy+0xe>
 8006dfa:	bd10      	pop	{r4, pc}

08006dfc <_free_r>:
 8006dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d044      	beq.n	8006e8c <_free_r+0x90>
 8006e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e06:	9001      	str	r0, [sp, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e0e:	bfb8      	it	lt
 8006e10:	18e4      	addlt	r4, r4, r3
 8006e12:	f000 f8df 	bl	8006fd4 <__malloc_lock>
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <_free_r+0x94>)
 8006e18:	9801      	ldr	r0, [sp, #4]
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x30>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e28:	f000 b8da 	b.w	8006fe0 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x46>
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	1961      	adds	r1, r4, r5
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1949      	addeq	r1, r1, r5
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x22>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x50>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x46>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1855      	adds	r5, r2, r1
 8006e50:	42a5      	cmp	r5, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x70>
 8006e54:	6824      	ldr	r4, [r4, #0]
 8006e56:	4421      	add	r1, r4
 8006e58:	1854      	adds	r4, r2, r1
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x26>
 8006e60:	681c      	ldr	r4, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	440c      	add	r4, r1
 8006e68:	6014      	str	r4, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x26>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x78>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x26>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1949      	addeq	r1, r1, r5
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x26>
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bd30      	pop	{r4, r5, pc}
 8006e90:	200062b4 	.word	0x200062b4

08006e94 <sbrk_aligned>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	4e0e      	ldr	r6, [pc, #56]	; (8006ed0 <sbrk_aligned+0x3c>)
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6831      	ldr	r1, [r6, #0]
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	b911      	cbnz	r1, 8006ea6 <sbrk_aligned+0x12>
 8006ea0:	f000 fba6 	bl	80075f0 <_sbrk_r>
 8006ea4:	6030      	str	r0, [r6, #0]
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 fba1 	bl	80075f0 <_sbrk_r>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d00a      	beq.n	8006ec8 <sbrk_aligned+0x34>
 8006eb2:	1cc4      	adds	r4, r0, #3
 8006eb4:	f024 0403 	bic.w	r4, r4, #3
 8006eb8:	42a0      	cmp	r0, r4
 8006eba:	d007      	beq.n	8006ecc <sbrk_aligned+0x38>
 8006ebc:	1a21      	subs	r1, r4, r0
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 fb96 	bl	80075f0 <_sbrk_r>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d101      	bne.n	8006ecc <sbrk_aligned+0x38>
 8006ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ecc:	4620      	mov	r0, r4
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	200062b8 	.word	0x200062b8

08006ed4 <_malloc_r>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	1ccd      	adds	r5, r1, #3
 8006eda:	f025 0503 	bic.w	r5, r5, #3
 8006ede:	3508      	adds	r5, #8
 8006ee0:	2d0c      	cmp	r5, #12
 8006ee2:	bf38      	it	cc
 8006ee4:	250c      	movcc	r5, #12
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	4607      	mov	r7, r0
 8006eea:	db01      	blt.n	8006ef0 <_malloc_r+0x1c>
 8006eec:	42a9      	cmp	r1, r5
 8006eee:	d905      	bls.n	8006efc <_malloc_r+0x28>
 8006ef0:	230c      	movs	r3, #12
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fd0 <_malloc_r+0xfc>
 8006f00:	f000 f868 	bl	8006fd4 <__malloc_lock>
 8006f04:	f8d8 3000 	ldr.w	r3, [r8]
 8006f08:	461c      	mov	r4, r3
 8006f0a:	bb5c      	cbnz	r4, 8006f64 <_malloc_r+0x90>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f7ff ffc0 	bl	8006e94 <sbrk_aligned>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	4604      	mov	r4, r0
 8006f18:	d155      	bne.n	8006fc6 <_malloc_r+0xf2>
 8006f1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006f1e:	4626      	mov	r6, r4
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	d145      	bne.n	8006fb0 <_malloc_r+0xdc>
 8006f24:	2c00      	cmp	r4, #0
 8006f26:	d048      	beq.n	8006fba <_malloc_r+0xe6>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	eb04 0903 	add.w	r9, r4, r3
 8006f32:	f000 fb5d 	bl	80075f0 <_sbrk_r>
 8006f36:	4581      	cmp	r9, r0
 8006f38:	d13f      	bne.n	8006fba <_malloc_r+0xe6>
 8006f3a:	6821      	ldr	r1, [r4, #0]
 8006f3c:	1a6d      	subs	r5, r5, r1
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff ffa7 	bl	8006e94 <sbrk_aligned>
 8006f46:	3001      	adds	r0, #1
 8006f48:	d037      	beq.n	8006fba <_malloc_r+0xe6>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	442b      	add	r3, r5
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	f8d8 3000 	ldr.w	r3, [r8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d038      	beq.n	8006fca <_malloc_r+0xf6>
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	42a2      	cmp	r2, r4
 8006f5c:	d12b      	bne.n	8006fb6 <_malloc_r+0xe2>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	e00f      	b.n	8006f84 <_malloc_r+0xb0>
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	1b52      	subs	r2, r2, r5
 8006f68:	d41f      	bmi.n	8006faa <_malloc_r+0xd6>
 8006f6a:	2a0b      	cmp	r2, #11
 8006f6c:	d917      	bls.n	8006f9e <_malloc_r+0xca>
 8006f6e:	1961      	adds	r1, r4, r5
 8006f70:	42a3      	cmp	r3, r4
 8006f72:	6025      	str	r5, [r4, #0]
 8006f74:	bf18      	it	ne
 8006f76:	6059      	strne	r1, [r3, #4]
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	bf08      	it	eq
 8006f7c:	f8c8 1000 	streq.w	r1, [r8]
 8006f80:	5162      	str	r2, [r4, r5]
 8006f82:	604b      	str	r3, [r1, #4]
 8006f84:	4638      	mov	r0, r7
 8006f86:	f104 060b 	add.w	r6, r4, #11
 8006f8a:	f000 f829 	bl	8006fe0 <__malloc_unlock>
 8006f8e:	f026 0607 	bic.w	r6, r6, #7
 8006f92:	1d23      	adds	r3, r4, #4
 8006f94:	1af2      	subs	r2, r6, r3
 8006f96:	d0ae      	beq.n	8006ef6 <_malloc_r+0x22>
 8006f98:	1b9b      	subs	r3, r3, r6
 8006f9a:	50a3      	str	r3, [r4, r2]
 8006f9c:	e7ab      	b.n	8006ef6 <_malloc_r+0x22>
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6862      	ldr	r2, [r4, #4]
 8006fa2:	d1dd      	bne.n	8006f60 <_malloc_r+0x8c>
 8006fa4:	f8c8 2000 	str.w	r2, [r8]
 8006fa8:	e7ec      	b.n	8006f84 <_malloc_r+0xb0>
 8006faa:	4623      	mov	r3, r4
 8006fac:	6864      	ldr	r4, [r4, #4]
 8006fae:	e7ac      	b.n	8006f0a <_malloc_r+0x36>
 8006fb0:	4634      	mov	r4, r6
 8006fb2:	6876      	ldr	r6, [r6, #4]
 8006fb4:	e7b4      	b.n	8006f20 <_malloc_r+0x4c>
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	e7cc      	b.n	8006f54 <_malloc_r+0x80>
 8006fba:	230c      	movs	r3, #12
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	f000 f80e 	bl	8006fe0 <__malloc_unlock>
 8006fc4:	e797      	b.n	8006ef6 <_malloc_r+0x22>
 8006fc6:	6025      	str	r5, [r4, #0]
 8006fc8:	e7dc      	b.n	8006f84 <_malloc_r+0xb0>
 8006fca:	605b      	str	r3, [r3, #4]
 8006fcc:	deff      	udf	#255	; 0xff
 8006fce:	bf00      	nop
 8006fd0:	200062b4 	.word	0x200062b4

08006fd4 <__malloc_lock>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__malloc_lock+0x8>)
 8006fd6:	f7ff bf01 	b.w	8006ddc <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	200062b0 	.word	0x200062b0

08006fe0 <__malloc_unlock>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__malloc_unlock+0x8>)
 8006fe2:	f7ff befc 	b.w	8006dde <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	200062b0 	.word	0x200062b0

08006fec <__ssputs_r>:
 8006fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff0:	688e      	ldr	r6, [r1, #8]
 8006ff2:	461f      	mov	r7, r3
 8006ff4:	42be      	cmp	r6, r7
 8006ff6:	680b      	ldr	r3, [r1, #0]
 8006ff8:	4682      	mov	sl, r0
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	4690      	mov	r8, r2
 8006ffe:	d82c      	bhi.n	800705a <__ssputs_r+0x6e>
 8007000:	898a      	ldrh	r2, [r1, #12]
 8007002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007006:	d026      	beq.n	8007056 <__ssputs_r+0x6a>
 8007008:	6965      	ldr	r5, [r4, #20]
 800700a:	6909      	ldr	r1, [r1, #16]
 800700c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007010:	eba3 0901 	sub.w	r9, r3, r1
 8007014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007018:	1c7b      	adds	r3, r7, #1
 800701a:	444b      	add	r3, r9
 800701c:	106d      	asrs	r5, r5, #1
 800701e:	429d      	cmp	r5, r3
 8007020:	bf38      	it	cc
 8007022:	461d      	movcc	r5, r3
 8007024:	0553      	lsls	r3, r2, #21
 8007026:	d527      	bpl.n	8007078 <__ssputs_r+0x8c>
 8007028:	4629      	mov	r1, r5
 800702a:	f7ff ff53 	bl	8006ed4 <_malloc_r>
 800702e:	4606      	mov	r6, r0
 8007030:	b360      	cbz	r0, 800708c <__ssputs_r+0xa0>
 8007032:	6921      	ldr	r1, [r4, #16]
 8007034:	464a      	mov	r2, r9
 8007036:	f7ff fed3 	bl	8006de0 <memcpy>
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	6126      	str	r6, [r4, #16]
 8007048:	6165      	str	r5, [r4, #20]
 800704a:	444e      	add	r6, r9
 800704c:	eba5 0509 	sub.w	r5, r5, r9
 8007050:	6026      	str	r6, [r4, #0]
 8007052:	60a5      	str	r5, [r4, #8]
 8007054:	463e      	mov	r6, r7
 8007056:	42be      	cmp	r6, r7
 8007058:	d900      	bls.n	800705c <__ssputs_r+0x70>
 800705a:	463e      	mov	r6, r7
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	4632      	mov	r2, r6
 8007060:	4641      	mov	r1, r8
 8007062:	f000 faab 	bl	80075bc <memmove>
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	1b9b      	subs	r3, r3, r6
 800706a:	60a3      	str	r3, [r4, #8]
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	4433      	add	r3, r6
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	2000      	movs	r0, #0
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	462a      	mov	r2, r5
 800707a:	f000 fac9 	bl	8007610 <_realloc_r>
 800707e:	4606      	mov	r6, r0
 8007080:	2800      	cmp	r0, #0
 8007082:	d1e0      	bne.n	8007046 <__ssputs_r+0x5a>
 8007084:	6921      	ldr	r1, [r4, #16]
 8007086:	4650      	mov	r0, sl
 8007088:	f7ff feb8 	bl	8006dfc <_free_r>
 800708c:	230c      	movs	r3, #12
 800708e:	f8ca 3000 	str.w	r3, [sl]
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007098:	81a3      	strh	r3, [r4, #12]
 800709a:	f04f 30ff 	mov.w	r0, #4294967295
 800709e:	e7e9      	b.n	8007074 <__ssputs_r+0x88>

080070a0 <_svfiprintf_r>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	4698      	mov	r8, r3
 80070a6:	898b      	ldrh	r3, [r1, #12]
 80070a8:	061b      	lsls	r3, r3, #24
 80070aa:	b09d      	sub	sp, #116	; 0x74
 80070ac:	4607      	mov	r7, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	4614      	mov	r4, r2
 80070b2:	d50e      	bpl.n	80070d2 <_svfiprintf_r+0x32>
 80070b4:	690b      	ldr	r3, [r1, #16]
 80070b6:	b963      	cbnz	r3, 80070d2 <_svfiprintf_r+0x32>
 80070b8:	2140      	movs	r1, #64	; 0x40
 80070ba:	f7ff ff0b 	bl	8006ed4 <_malloc_r>
 80070be:	6028      	str	r0, [r5, #0]
 80070c0:	6128      	str	r0, [r5, #16]
 80070c2:	b920      	cbnz	r0, 80070ce <_svfiprintf_r+0x2e>
 80070c4:	230c      	movs	r3, #12
 80070c6:	603b      	str	r3, [r7, #0]
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e0d0      	b.n	8007270 <_svfiprintf_r+0x1d0>
 80070ce:	2340      	movs	r3, #64	; 0x40
 80070d0:	616b      	str	r3, [r5, #20]
 80070d2:	2300      	movs	r3, #0
 80070d4:	9309      	str	r3, [sp, #36]	; 0x24
 80070d6:	2320      	movs	r3, #32
 80070d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80070e0:	2330      	movs	r3, #48	; 0x30
 80070e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007288 <_svfiprintf_r+0x1e8>
 80070e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070ea:	f04f 0901 	mov.w	r9, #1
 80070ee:	4623      	mov	r3, r4
 80070f0:	469a      	mov	sl, r3
 80070f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070f6:	b10a      	cbz	r2, 80070fc <_svfiprintf_r+0x5c>
 80070f8:	2a25      	cmp	r2, #37	; 0x25
 80070fa:	d1f9      	bne.n	80070f0 <_svfiprintf_r+0x50>
 80070fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007100:	d00b      	beq.n	800711a <_svfiprintf_r+0x7a>
 8007102:	465b      	mov	r3, fp
 8007104:	4622      	mov	r2, r4
 8007106:	4629      	mov	r1, r5
 8007108:	4638      	mov	r0, r7
 800710a:	f7ff ff6f 	bl	8006fec <__ssputs_r>
 800710e:	3001      	adds	r0, #1
 8007110:	f000 80a9 	beq.w	8007266 <_svfiprintf_r+0x1c6>
 8007114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007116:	445a      	add	r2, fp
 8007118:	9209      	str	r2, [sp, #36]	; 0x24
 800711a:	f89a 3000 	ldrb.w	r3, [sl]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80a1 	beq.w	8007266 <_svfiprintf_r+0x1c6>
 8007124:	2300      	movs	r3, #0
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800712e:	f10a 0a01 	add.w	sl, sl, #1
 8007132:	9304      	str	r3, [sp, #16]
 8007134:	9307      	str	r3, [sp, #28]
 8007136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800713a:	931a      	str	r3, [sp, #104]	; 0x68
 800713c:	4654      	mov	r4, sl
 800713e:	2205      	movs	r2, #5
 8007140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007144:	4850      	ldr	r0, [pc, #320]	; (8007288 <_svfiprintf_r+0x1e8>)
 8007146:	f7f9 f89b 	bl	8000280 <memchr>
 800714a:	9a04      	ldr	r2, [sp, #16]
 800714c:	b9d8      	cbnz	r0, 8007186 <_svfiprintf_r+0xe6>
 800714e:	06d0      	lsls	r0, r2, #27
 8007150:	bf44      	itt	mi
 8007152:	2320      	movmi	r3, #32
 8007154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007158:	0711      	lsls	r1, r2, #28
 800715a:	bf44      	itt	mi
 800715c:	232b      	movmi	r3, #43	; 0x2b
 800715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007162:	f89a 3000 	ldrb.w	r3, [sl]
 8007166:	2b2a      	cmp	r3, #42	; 0x2a
 8007168:	d015      	beq.n	8007196 <_svfiprintf_r+0xf6>
 800716a:	9a07      	ldr	r2, [sp, #28]
 800716c:	4654      	mov	r4, sl
 800716e:	2000      	movs	r0, #0
 8007170:	f04f 0c0a 	mov.w	ip, #10
 8007174:	4621      	mov	r1, r4
 8007176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800717a:	3b30      	subs	r3, #48	; 0x30
 800717c:	2b09      	cmp	r3, #9
 800717e:	d94d      	bls.n	800721c <_svfiprintf_r+0x17c>
 8007180:	b1b0      	cbz	r0, 80071b0 <_svfiprintf_r+0x110>
 8007182:	9207      	str	r2, [sp, #28]
 8007184:	e014      	b.n	80071b0 <_svfiprintf_r+0x110>
 8007186:	eba0 0308 	sub.w	r3, r0, r8
 800718a:	fa09 f303 	lsl.w	r3, r9, r3
 800718e:	4313      	orrs	r3, r2
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	46a2      	mov	sl, r4
 8007194:	e7d2      	b.n	800713c <_svfiprintf_r+0x9c>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	9103      	str	r1, [sp, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfbb      	ittet	lt
 80071a2:	425b      	neglt	r3, r3
 80071a4:	f042 0202 	orrlt.w	r2, r2, #2
 80071a8:	9307      	strge	r3, [sp, #28]
 80071aa:	9307      	strlt	r3, [sp, #28]
 80071ac:	bfb8      	it	lt
 80071ae:	9204      	strlt	r2, [sp, #16]
 80071b0:	7823      	ldrb	r3, [r4, #0]
 80071b2:	2b2e      	cmp	r3, #46	; 0x2e
 80071b4:	d10c      	bne.n	80071d0 <_svfiprintf_r+0x130>
 80071b6:	7863      	ldrb	r3, [r4, #1]
 80071b8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ba:	d134      	bne.n	8007226 <_svfiprintf_r+0x186>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	1d1a      	adds	r2, r3, #4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	9203      	str	r2, [sp, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bfb8      	it	lt
 80071c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071cc:	3402      	adds	r4, #2
 80071ce:	9305      	str	r3, [sp, #20]
 80071d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007298 <_svfiprintf_r+0x1f8>
 80071d4:	7821      	ldrb	r1, [r4, #0]
 80071d6:	2203      	movs	r2, #3
 80071d8:	4650      	mov	r0, sl
 80071da:	f7f9 f851 	bl	8000280 <memchr>
 80071de:	b138      	cbz	r0, 80071f0 <_svfiprintf_r+0x150>
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	eba0 000a 	sub.w	r0, r0, sl
 80071e6:	2240      	movs	r2, #64	; 0x40
 80071e8:	4082      	lsls	r2, r0
 80071ea:	4313      	orrs	r3, r2
 80071ec:	3401      	adds	r4, #1
 80071ee:	9304      	str	r3, [sp, #16]
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	4825      	ldr	r0, [pc, #148]	; (800728c <_svfiprintf_r+0x1ec>)
 80071f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071fa:	2206      	movs	r2, #6
 80071fc:	f7f9 f840 	bl	8000280 <memchr>
 8007200:	2800      	cmp	r0, #0
 8007202:	d038      	beq.n	8007276 <_svfiprintf_r+0x1d6>
 8007204:	4b22      	ldr	r3, [pc, #136]	; (8007290 <_svfiprintf_r+0x1f0>)
 8007206:	bb1b      	cbnz	r3, 8007250 <_svfiprintf_r+0x1b0>
 8007208:	9b03      	ldr	r3, [sp, #12]
 800720a:	3307      	adds	r3, #7
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	3308      	adds	r3, #8
 8007212:	9303      	str	r3, [sp, #12]
 8007214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007216:	4433      	add	r3, r6
 8007218:	9309      	str	r3, [sp, #36]	; 0x24
 800721a:	e768      	b.n	80070ee <_svfiprintf_r+0x4e>
 800721c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007220:	460c      	mov	r4, r1
 8007222:	2001      	movs	r0, #1
 8007224:	e7a6      	b.n	8007174 <_svfiprintf_r+0xd4>
 8007226:	2300      	movs	r3, #0
 8007228:	3401      	adds	r4, #1
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	4619      	mov	r1, r3
 800722e:	f04f 0c0a 	mov.w	ip, #10
 8007232:	4620      	mov	r0, r4
 8007234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007238:	3a30      	subs	r2, #48	; 0x30
 800723a:	2a09      	cmp	r2, #9
 800723c:	d903      	bls.n	8007246 <_svfiprintf_r+0x1a6>
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0c6      	beq.n	80071d0 <_svfiprintf_r+0x130>
 8007242:	9105      	str	r1, [sp, #20]
 8007244:	e7c4      	b.n	80071d0 <_svfiprintf_r+0x130>
 8007246:	fb0c 2101 	mla	r1, ip, r1, r2
 800724a:	4604      	mov	r4, r0
 800724c:	2301      	movs	r3, #1
 800724e:	e7f0      	b.n	8007232 <_svfiprintf_r+0x192>
 8007250:	ab03      	add	r3, sp, #12
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	462a      	mov	r2, r5
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <_svfiprintf_r+0x1f4>)
 8007258:	a904      	add	r1, sp, #16
 800725a:	4638      	mov	r0, r7
 800725c:	f3af 8000 	nop.w
 8007260:	1c42      	adds	r2, r0, #1
 8007262:	4606      	mov	r6, r0
 8007264:	d1d6      	bne.n	8007214 <_svfiprintf_r+0x174>
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	065b      	lsls	r3, r3, #25
 800726a:	f53f af2d 	bmi.w	80070c8 <_svfiprintf_r+0x28>
 800726e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007270:	b01d      	add	sp, #116	; 0x74
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	ab03      	add	r3, sp, #12
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	462a      	mov	r2, r5
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <_svfiprintf_r+0x1f4>)
 800727e:	a904      	add	r1, sp, #16
 8007280:	4638      	mov	r0, r7
 8007282:	f000 f879 	bl	8007378 <_printf_i>
 8007286:	e7eb      	b.n	8007260 <_svfiprintf_r+0x1c0>
 8007288:	080077d0 	.word	0x080077d0
 800728c:	080077da 	.word	0x080077da
 8007290:	00000000 	.word	0x00000000
 8007294:	08006fed 	.word	0x08006fed
 8007298:	080077d6 	.word	0x080077d6

0800729c <_printf_common>:
 800729c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a0:	4616      	mov	r6, r2
 80072a2:	4699      	mov	r9, r3
 80072a4:	688a      	ldr	r2, [r1, #8]
 80072a6:	690b      	ldr	r3, [r1, #16]
 80072a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bfb8      	it	lt
 80072b0:	4613      	movlt	r3, r2
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b8:	4607      	mov	r7, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b10a      	cbz	r2, 80072c2 <_printf_common+0x26>
 80072be:	3301      	adds	r3, #1
 80072c0:	6033      	str	r3, [r6, #0]
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	0699      	lsls	r1, r3, #26
 80072c6:	bf42      	ittt	mi
 80072c8:	6833      	ldrmi	r3, [r6, #0]
 80072ca:	3302      	addmi	r3, #2
 80072cc:	6033      	strmi	r3, [r6, #0]
 80072ce:	6825      	ldr	r5, [r4, #0]
 80072d0:	f015 0506 	ands.w	r5, r5, #6
 80072d4:	d106      	bne.n	80072e4 <_printf_common+0x48>
 80072d6:	f104 0a19 	add.w	sl, r4, #25
 80072da:	68e3      	ldr	r3, [r4, #12]
 80072dc:	6832      	ldr	r2, [r6, #0]
 80072de:	1a9b      	subs	r3, r3, r2
 80072e0:	42ab      	cmp	r3, r5
 80072e2:	dc26      	bgt.n	8007332 <_printf_common+0x96>
 80072e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e8:	1e13      	subs	r3, r2, #0
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	bf18      	it	ne
 80072ee:	2301      	movne	r3, #1
 80072f0:	0692      	lsls	r2, r2, #26
 80072f2:	d42b      	bmi.n	800734c <_printf_common+0xb0>
 80072f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f8:	4649      	mov	r1, r9
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c0      	blx	r8
 80072fe:	3001      	adds	r0, #1
 8007300:	d01e      	beq.n	8007340 <_printf_common+0xa4>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	6922      	ldr	r2, [r4, #16]
 8007306:	f003 0306 	and.w	r3, r3, #6
 800730a:	2b04      	cmp	r3, #4
 800730c:	bf02      	ittt	eq
 800730e:	68e5      	ldreq	r5, [r4, #12]
 8007310:	6833      	ldreq	r3, [r6, #0]
 8007312:	1aed      	subeq	r5, r5, r3
 8007314:	68a3      	ldr	r3, [r4, #8]
 8007316:	bf0c      	ite	eq
 8007318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800731c:	2500      	movne	r5, #0
 800731e:	4293      	cmp	r3, r2
 8007320:	bfc4      	itt	gt
 8007322:	1a9b      	subgt	r3, r3, r2
 8007324:	18ed      	addgt	r5, r5, r3
 8007326:	2600      	movs	r6, #0
 8007328:	341a      	adds	r4, #26
 800732a:	42b5      	cmp	r5, r6
 800732c:	d11a      	bne.n	8007364 <_printf_common+0xc8>
 800732e:	2000      	movs	r0, #0
 8007330:	e008      	b.n	8007344 <_printf_common+0xa8>
 8007332:	2301      	movs	r3, #1
 8007334:	4652      	mov	r2, sl
 8007336:	4649      	mov	r1, r9
 8007338:	4638      	mov	r0, r7
 800733a:	47c0      	blx	r8
 800733c:	3001      	adds	r0, #1
 800733e:	d103      	bne.n	8007348 <_printf_common+0xac>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007348:	3501      	adds	r5, #1
 800734a:	e7c6      	b.n	80072da <_printf_common+0x3e>
 800734c:	18e1      	adds	r1, r4, r3
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	2030      	movs	r0, #48	; 0x30
 8007352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007356:	4422      	add	r2, r4
 8007358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800735c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007360:	3302      	adds	r3, #2
 8007362:	e7c7      	b.n	80072f4 <_printf_common+0x58>
 8007364:	2301      	movs	r3, #1
 8007366:	4622      	mov	r2, r4
 8007368:	4649      	mov	r1, r9
 800736a:	4638      	mov	r0, r7
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d0e6      	beq.n	8007340 <_printf_common+0xa4>
 8007372:	3601      	adds	r6, #1
 8007374:	e7d9      	b.n	800732a <_printf_common+0x8e>
	...

08007378 <_printf_i>:
 8007378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800737c:	7e0f      	ldrb	r7, [r1, #24]
 800737e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007380:	2f78      	cmp	r7, #120	; 0x78
 8007382:	4691      	mov	r9, r2
 8007384:	4680      	mov	r8, r0
 8007386:	460c      	mov	r4, r1
 8007388:	469a      	mov	sl, r3
 800738a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800738e:	d807      	bhi.n	80073a0 <_printf_i+0x28>
 8007390:	2f62      	cmp	r7, #98	; 0x62
 8007392:	d80a      	bhi.n	80073aa <_printf_i+0x32>
 8007394:	2f00      	cmp	r7, #0
 8007396:	f000 80d4 	beq.w	8007542 <_printf_i+0x1ca>
 800739a:	2f58      	cmp	r7, #88	; 0x58
 800739c:	f000 80c0 	beq.w	8007520 <_printf_i+0x1a8>
 80073a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a8:	e03a      	b.n	8007420 <_printf_i+0xa8>
 80073aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ae:	2b15      	cmp	r3, #21
 80073b0:	d8f6      	bhi.n	80073a0 <_printf_i+0x28>
 80073b2:	a101      	add	r1, pc, #4	; (adr r1, 80073b8 <_printf_i+0x40>)
 80073b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b8:	08007411 	.word	0x08007411
 80073bc:	08007425 	.word	0x08007425
 80073c0:	080073a1 	.word	0x080073a1
 80073c4:	080073a1 	.word	0x080073a1
 80073c8:	080073a1 	.word	0x080073a1
 80073cc:	080073a1 	.word	0x080073a1
 80073d0:	08007425 	.word	0x08007425
 80073d4:	080073a1 	.word	0x080073a1
 80073d8:	080073a1 	.word	0x080073a1
 80073dc:	080073a1 	.word	0x080073a1
 80073e0:	080073a1 	.word	0x080073a1
 80073e4:	08007529 	.word	0x08007529
 80073e8:	08007451 	.word	0x08007451
 80073ec:	080074e3 	.word	0x080074e3
 80073f0:	080073a1 	.word	0x080073a1
 80073f4:	080073a1 	.word	0x080073a1
 80073f8:	0800754b 	.word	0x0800754b
 80073fc:	080073a1 	.word	0x080073a1
 8007400:	08007451 	.word	0x08007451
 8007404:	080073a1 	.word	0x080073a1
 8007408:	080073a1 	.word	0x080073a1
 800740c:	080074eb 	.word	0x080074eb
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	602a      	str	r2, [r5, #0]
 8007418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800741c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007420:	2301      	movs	r3, #1
 8007422:	e09f      	b.n	8007564 <_printf_i+0x1ec>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	0607      	lsls	r7, r0, #24
 800742a:	f103 0104 	add.w	r1, r3, #4
 800742e:	6029      	str	r1, [r5, #0]
 8007430:	d501      	bpl.n	8007436 <_printf_i+0xbe>
 8007432:	681e      	ldr	r6, [r3, #0]
 8007434:	e003      	b.n	800743e <_printf_i+0xc6>
 8007436:	0646      	lsls	r6, r0, #25
 8007438:	d5fb      	bpl.n	8007432 <_printf_i+0xba>
 800743a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800743e:	2e00      	cmp	r6, #0
 8007440:	da03      	bge.n	800744a <_printf_i+0xd2>
 8007442:	232d      	movs	r3, #45	; 0x2d
 8007444:	4276      	negs	r6, r6
 8007446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800744a:	485a      	ldr	r0, [pc, #360]	; (80075b4 <_printf_i+0x23c>)
 800744c:	230a      	movs	r3, #10
 800744e:	e012      	b.n	8007476 <_printf_i+0xfe>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	1d19      	adds	r1, r3, #4
 8007456:	6029      	str	r1, [r5, #0]
 8007458:	0605      	lsls	r5, r0, #24
 800745a:	d501      	bpl.n	8007460 <_printf_i+0xe8>
 800745c:	681e      	ldr	r6, [r3, #0]
 800745e:	e002      	b.n	8007466 <_printf_i+0xee>
 8007460:	0641      	lsls	r1, r0, #25
 8007462:	d5fb      	bpl.n	800745c <_printf_i+0xe4>
 8007464:	881e      	ldrh	r6, [r3, #0]
 8007466:	4853      	ldr	r0, [pc, #332]	; (80075b4 <_printf_i+0x23c>)
 8007468:	2f6f      	cmp	r7, #111	; 0x6f
 800746a:	bf0c      	ite	eq
 800746c:	2308      	moveq	r3, #8
 800746e:	230a      	movne	r3, #10
 8007470:	2100      	movs	r1, #0
 8007472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007476:	6865      	ldr	r5, [r4, #4]
 8007478:	60a5      	str	r5, [r4, #8]
 800747a:	2d00      	cmp	r5, #0
 800747c:	bfa2      	ittt	ge
 800747e:	6821      	ldrge	r1, [r4, #0]
 8007480:	f021 0104 	bicge.w	r1, r1, #4
 8007484:	6021      	strge	r1, [r4, #0]
 8007486:	b90e      	cbnz	r6, 800748c <_printf_i+0x114>
 8007488:	2d00      	cmp	r5, #0
 800748a:	d04b      	beq.n	8007524 <_printf_i+0x1ac>
 800748c:	4615      	mov	r5, r2
 800748e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007492:	fb03 6711 	mls	r7, r3, r1, r6
 8007496:	5dc7      	ldrb	r7, [r0, r7]
 8007498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800749c:	4637      	mov	r7, r6
 800749e:	42bb      	cmp	r3, r7
 80074a0:	460e      	mov	r6, r1
 80074a2:	d9f4      	bls.n	800748e <_printf_i+0x116>
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d10b      	bne.n	80074c0 <_printf_i+0x148>
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	07de      	lsls	r6, r3, #31
 80074ac:	d508      	bpl.n	80074c0 <_printf_i+0x148>
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	6861      	ldr	r1, [r4, #4]
 80074b2:	4299      	cmp	r1, r3
 80074b4:	bfde      	ittt	le
 80074b6:	2330      	movle	r3, #48	; 0x30
 80074b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074c0:	1b52      	subs	r2, r2, r5
 80074c2:	6122      	str	r2, [r4, #16]
 80074c4:	f8cd a000 	str.w	sl, [sp]
 80074c8:	464b      	mov	r3, r9
 80074ca:	aa03      	add	r2, sp, #12
 80074cc:	4621      	mov	r1, r4
 80074ce:	4640      	mov	r0, r8
 80074d0:	f7ff fee4 	bl	800729c <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	d14a      	bne.n	800756e <_printf_i+0x1f6>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	b004      	add	sp, #16
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	f043 0320 	orr.w	r3, r3, #32
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	4833      	ldr	r0, [pc, #204]	; (80075b8 <_printf_i+0x240>)
 80074ec:	2778      	movs	r7, #120	; 0x78
 80074ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	6829      	ldr	r1, [r5, #0]
 80074f6:	061f      	lsls	r7, r3, #24
 80074f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074fc:	d402      	bmi.n	8007504 <_printf_i+0x18c>
 80074fe:	065f      	lsls	r7, r3, #25
 8007500:	bf48      	it	mi
 8007502:	b2b6      	uxthmi	r6, r6
 8007504:	07df      	lsls	r7, r3, #31
 8007506:	bf48      	it	mi
 8007508:	f043 0320 	orrmi.w	r3, r3, #32
 800750c:	6029      	str	r1, [r5, #0]
 800750e:	bf48      	it	mi
 8007510:	6023      	strmi	r3, [r4, #0]
 8007512:	b91e      	cbnz	r6, 800751c <_printf_i+0x1a4>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	f023 0320 	bic.w	r3, r3, #32
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	2310      	movs	r3, #16
 800751e:	e7a7      	b.n	8007470 <_printf_i+0xf8>
 8007520:	4824      	ldr	r0, [pc, #144]	; (80075b4 <_printf_i+0x23c>)
 8007522:	e7e4      	b.n	80074ee <_printf_i+0x176>
 8007524:	4615      	mov	r5, r2
 8007526:	e7bd      	b.n	80074a4 <_printf_i+0x12c>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	6826      	ldr	r6, [r4, #0]
 800752c:	6961      	ldr	r1, [r4, #20]
 800752e:	1d18      	adds	r0, r3, #4
 8007530:	6028      	str	r0, [r5, #0]
 8007532:	0635      	lsls	r5, r6, #24
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	d501      	bpl.n	800753c <_printf_i+0x1c4>
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	e002      	b.n	8007542 <_printf_i+0x1ca>
 800753c:	0670      	lsls	r0, r6, #25
 800753e:	d5fb      	bpl.n	8007538 <_printf_i+0x1c0>
 8007540:	8019      	strh	r1, [r3, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	4615      	mov	r5, r2
 8007548:	e7bc      	b.n	80074c4 <_printf_i+0x14c>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	1d1a      	adds	r2, r3, #4
 800754e:	602a      	str	r2, [r5, #0]
 8007550:	681d      	ldr	r5, [r3, #0]
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	2100      	movs	r1, #0
 8007556:	4628      	mov	r0, r5
 8007558:	f7f8 fe92 	bl	8000280 <memchr>
 800755c:	b108      	cbz	r0, 8007562 <_printf_i+0x1ea>
 800755e:	1b40      	subs	r0, r0, r5
 8007560:	6060      	str	r0, [r4, #4]
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	2300      	movs	r3, #0
 8007568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756c:	e7aa      	b.n	80074c4 <_printf_i+0x14c>
 800756e:	6923      	ldr	r3, [r4, #16]
 8007570:	462a      	mov	r2, r5
 8007572:	4649      	mov	r1, r9
 8007574:	4640      	mov	r0, r8
 8007576:	47d0      	blx	sl
 8007578:	3001      	adds	r0, #1
 800757a:	d0ad      	beq.n	80074d8 <_printf_i+0x160>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	079b      	lsls	r3, r3, #30
 8007580:	d413      	bmi.n	80075aa <_printf_i+0x232>
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	4298      	cmp	r0, r3
 8007588:	bfb8      	it	lt
 800758a:	4618      	movlt	r0, r3
 800758c:	e7a6      	b.n	80074dc <_printf_i+0x164>
 800758e:	2301      	movs	r3, #1
 8007590:	4632      	mov	r2, r6
 8007592:	4649      	mov	r1, r9
 8007594:	4640      	mov	r0, r8
 8007596:	47d0      	blx	sl
 8007598:	3001      	adds	r0, #1
 800759a:	d09d      	beq.n	80074d8 <_printf_i+0x160>
 800759c:	3501      	adds	r5, #1
 800759e:	68e3      	ldr	r3, [r4, #12]
 80075a0:	9903      	ldr	r1, [sp, #12]
 80075a2:	1a5b      	subs	r3, r3, r1
 80075a4:	42ab      	cmp	r3, r5
 80075a6:	dcf2      	bgt.n	800758e <_printf_i+0x216>
 80075a8:	e7eb      	b.n	8007582 <_printf_i+0x20a>
 80075aa:	2500      	movs	r5, #0
 80075ac:	f104 0619 	add.w	r6, r4, #25
 80075b0:	e7f5      	b.n	800759e <_printf_i+0x226>
 80075b2:	bf00      	nop
 80075b4:	080077e1 	.word	0x080077e1
 80075b8:	080077f2 	.word	0x080077f2

080075bc <memmove>:
 80075bc:	4288      	cmp	r0, r1
 80075be:	b510      	push	{r4, lr}
 80075c0:	eb01 0402 	add.w	r4, r1, r2
 80075c4:	d902      	bls.n	80075cc <memmove+0x10>
 80075c6:	4284      	cmp	r4, r0
 80075c8:	4623      	mov	r3, r4
 80075ca:	d807      	bhi.n	80075dc <memmove+0x20>
 80075cc:	1e43      	subs	r3, r0, #1
 80075ce:	42a1      	cmp	r1, r4
 80075d0:	d008      	beq.n	80075e4 <memmove+0x28>
 80075d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075da:	e7f8      	b.n	80075ce <memmove+0x12>
 80075dc:	4402      	add	r2, r0
 80075de:	4601      	mov	r1, r0
 80075e0:	428a      	cmp	r2, r1
 80075e2:	d100      	bne.n	80075e6 <memmove+0x2a>
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ee:	e7f7      	b.n	80075e0 <memmove+0x24>

080075f0 <_sbrk_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	; (800760c <_sbrk_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7f9 faea 	bl	8000bd4 <_sbrk>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_sbrk_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_sbrk_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200062ac 	.word	0x200062ac

08007610 <_realloc_r>:
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	4680      	mov	r8, r0
 8007616:	4614      	mov	r4, r2
 8007618:	460e      	mov	r6, r1
 800761a:	b921      	cbnz	r1, 8007626 <_realloc_r+0x16>
 800761c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007620:	4611      	mov	r1, r2
 8007622:	f7ff bc57 	b.w	8006ed4 <_malloc_r>
 8007626:	b92a      	cbnz	r2, 8007634 <_realloc_r+0x24>
 8007628:	f7ff fbe8 	bl	8006dfc <_free_r>
 800762c:	4625      	mov	r5, r4
 800762e:	4628      	mov	r0, r5
 8007630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007634:	f000 f81b 	bl	800766e <_malloc_usable_size_r>
 8007638:	4284      	cmp	r4, r0
 800763a:	4607      	mov	r7, r0
 800763c:	d802      	bhi.n	8007644 <_realloc_r+0x34>
 800763e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007642:	d812      	bhi.n	800766a <_realloc_r+0x5a>
 8007644:	4621      	mov	r1, r4
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fc44 	bl	8006ed4 <_malloc_r>
 800764c:	4605      	mov	r5, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	d0ed      	beq.n	800762e <_realloc_r+0x1e>
 8007652:	42bc      	cmp	r4, r7
 8007654:	4622      	mov	r2, r4
 8007656:	4631      	mov	r1, r6
 8007658:	bf28      	it	cs
 800765a:	463a      	movcs	r2, r7
 800765c:	f7ff fbc0 	bl	8006de0 <memcpy>
 8007660:	4631      	mov	r1, r6
 8007662:	4640      	mov	r0, r8
 8007664:	f7ff fbca 	bl	8006dfc <_free_r>
 8007668:	e7e1      	b.n	800762e <_realloc_r+0x1e>
 800766a:	4635      	mov	r5, r6
 800766c:	e7df      	b.n	800762e <_realloc_r+0x1e>

0800766e <_malloc_usable_size_r>:
 800766e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007672:	1f18      	subs	r0, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfbc      	itt	lt
 8007678:	580b      	ldrlt	r3, [r1, r0]
 800767a:	18c0      	addlt	r0, r0, r3
 800767c:	4770      	bx	lr
	...

08007680 <_init>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr

0800768c <_fini>:
 800768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768e:	bf00      	nop
 8007690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007692:	bc08      	pop	{r3}
 8007694:	469e      	mov	lr, r3
 8007696:	4770      	bx	lr
